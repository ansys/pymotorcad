[
    {
        "objectID": "examples/adaptive_library/DXFImport",
        "href": "examples/adaptive_library/DXFImport.html#custom-dxf-geometry",
        "title": "Custom DXF Geometry",
        "section": "Custom DXF Geometry",
        "text": "This script applies the adaptive templates functionality to import custom rotor geometry from a\nDXF file.\nFor more information on how to add imported DXF geometries to Adaptive Templates in Motor-CAD,\nsee ref_adaptive_templates_UG in the ref_user_guide.\nDXF import for Adaptive Templates in Motor-CAD requires Motor-CAD 2024 R2 or later.\nThis script is designed to be run from Motor-CAD template “e8”. The “e8” template file contains an\nimported custom geometry from a DXF file. The template should be adjusted slightly to more\nclosely match the imported custom geometry before running the Adaptive Templates script.\nThe following Standard Template geometry changes should be made:\nSet L1 Mag Gap Inner and L2 Mag Gap Inner to 0 mm (for Magnet Layers 1 and 2).\nSet L2 Web Thickness to 18 mm (for Magnet Layer 2).\nSet L2 Pole Arc [ED] to 105 electrical degrees (for Magnet Layer 2).\nSet L2 RDuct Rad Dia to 123.8 mm (for Rotor Duct Layer 2).\nSet L2 RDuct Dia to 4.94 mm (for Rotor Duct Layer 2).\nIf no Motor-CAD file is open, the e8 template is loaded and the geometry is adjusted as\ndescribed earlier.\nCustom DXF Geometry"
    },
    {
        "objectID": "examples/adaptive_library/DXFImport",
        "href": "examples/adaptive_library/DXFImport.html#perform-required-imports",
        "title": "Custom DXF Geometry > Perform required imports",
        "section": "Perform required imports",
        "text": "Import the pymotorcad package to access Motor-CAD.\nImport the os, shutil, sys, and tempfile packages\nto open and save a temporary MOT file if none is open.\nPerform required imports\npymotorcad\nos\nshutil\nsys\ntempfile"
    },
    {
        "objectID": "examples/adaptive_library/DXFImport",
        "href": "examples/adaptive_library/DXFImport.html#connect-to-motor-cad",
        "title": "Custom DXF Geometry > Connect to Motor-CAD",
        "section": "Connect to Motor-CAD",
        "text": "If this script is loaded into the Adaptive Templates file in Motor-CAD, the current Motor-CAD\ninstance is used.\nIf the script is run externally, these actions occur: a new Motor-CAD instance is opened,\nthe e8 IPM motor template is loaded, the geometry changes described earlier are applied and the\nfile is saved to a temporary folder.\nTo keep a new Motor-CAD instance open after executing the script, use the\nMotorCAD(keep_instance_open=True) option when opening the new instance.\nAlternatively, use the MotorCAD() method, which closes the Motor-CAD instance after the\nscript is executed.\nConnect to Motor-CAD\nMotorCAD(keep_instance_open=True)\nMotorCAD()"
    },
    {
        "objectID": "examples/adaptive_library/DXFImport",
        "href": "examples/adaptive_library/DXFImport.html#get-required-region-objects",
        "title": "Custom DXF Geometry > Get required region objects",
        "section": "Get required region objects",
        "text": "Get the existing Standard Template regions, and imported regions that are required for the script.\nGet required region objects"
    },
    {
        "objectID": "examples/adaptive_library/DXFImport",
        "href": "examples/adaptive_library/DXFImport.html#identify-the-required-regions",
        "title": "Custom DXF Geometry > Identify the required regions",
        "section": "Identify the required regions",
        "text": "This workflow replaces existing template regions with corresponding imported regions. For\nexample, the Standard Template geometry region RotorDuctFluidRegion_2 is replaced by a\ncustom region from the imported DXF file.\nFind the names of the corresponding DXF regions under Import in the Geometry tree on\nthe Geometry -> Editor -> Geometry tab in Motor-CAD. Imported regions are displayed by\nselecting the checkbox. For example, the corresponding imported DXF region for template region\nRotorDuctFluidRegion_2 is named DXFRegion_Rotor_14.\nThis script replaces the entities (lines and arcs) of RotorDuctFluidRegion_2 with entities\nfrom DXFRegion_Rotor_14. The geometry is replaced, while the properties of the region\nRotorDuctFluidRegion_2, such as name, material, colour are retained.\nIdentify the required regions"
    },
    {
        "objectID": "examples/adaptive_library/DXFImport",
        "href": "examples/adaptive_library/DXFImport.html#get-existing-template-regions",
        "title": "Custom DXF Geometry > Get existing template regions",
        "section": "Get existing template regions",
        "text": "The regions in the existing template geometry to be replaced by custom regions from the\nimported DXF geometry will be stored in a list. Use the get_region() method to get the\nrequired regions and store these in the standard_regions list.\nGet existing template regions\nget_region()\nstandard_regions"
    },
    {
        "objectID": "examples/adaptive_library/DXFImport",
        "href": "examples/adaptive_library/DXFImport.html#get-imported-dxf-regions",
        "title": "Custom DXF Geometry > Get imported DXF regions",
        "section": "Get imported DXF regions",
        "text": "The imported DXF regions to replace the existing regions with will be stored in a list. Use the\nget_region_dxf() method to get the required regions and store in the replacement_regions\nlist. The indices of the regions in the standard_regions and replacement_regions lists\nmust match such that the corresponding standard and replacement regions share the same index.\nFor example, the RotorDuctFluidRegion_2 and DXFRegion_Rotor_14 regions are both the fifth\nelement of their respective lists.\nGet imported DXF regions\nget_region_dxf()\nreplacement_regions\nstandard_regions\nreplacement_regions"
    },
    {
        "objectID": "examples/adaptive_library/DXFImport",
        "href": "examples/adaptive_library/DXFImport.html#replace-standard_regions-with-replacement_regions",
        "title": "Custom DXF Geometry > Replace standard_regions with replacement_regions",
        "section": "Replace standard_regions with replacement_regions",
        "text": "For each standard region, use the Region.replace() method to replace the region with its\ncorresponding imported DXF region. The Region.replace() method replaces the entities\n(lines and arcs) of a region with entities from another region. The geometry entities are\nreplaced, while the properties, such as name, material, colour, of the original regions are\nretained.\nFor more information on the Region.replace() method, see the entry under Region in\nref_geometry_functions in the API reference documentation.\nOnce the entities have been replaced, use the set_region() method to set the modified region\nin Motor-CAD.\nReplace standard_regions with replacement_regions\nstandard_regions\nreplacement_regions\nRegion.replace()\nRegion.replace()\nRegion.replace()\nRegion\nset_region()"
    },
    {
        "objectID": "examples/adaptive_library/DXFImport",
        "href": "examples/adaptive_library/DXFImport.html#load-in-adaptive-templates-script-if-required",
        "title": "Custom DXF Geometry > Load in Adaptive Templates Script if required",
        "section": "Load in Adaptive Templates Script if required",
        "text": "When this script is run externally, the script executes the following:\nSet Geometry type to Adaptive.\nLoad the script into the Adaptive Templates tab.\nGo to the Geometry -> Radial tab to run the Adaptive Templates script and display the new\ngeometry.\nWhen running in a Jupyter Notebook, you must provide the path for the Adaptive Templates script\n(PY file) instead of sys.argv[0] when using the load_adaptive_script() method.\nTotal running time of the script: (0 minutes 20.532 seconds)\nDownload Jupyter notebook: DXFImport.ipynb\nDownload Python source code: DXFImport.py\nDownload zipped: DXFImport.zip\nGallery generated by Sphinx-Gallery\nLoad in Adaptive Templates Script if required\nsys.argv[0]\nload_adaptive_script()\nDownload Jupyter notebook: DXFImport.ipynb\nDownload Python source code: DXFImport.py\nDownload zipped: DXFImport.zip"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadCustomDriveCycle",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadCustomDriveCycle.html#loadcustomdrivecycle",
        "title": "LoadCustomDriveCycle",
        "section": "LoadCustomDriveCycle",
        "text": "Deprecated function. Replaced by MotorCAD.load_custom_drive_cycle().\nLoadCustomDriveCycle\nMotorCAD.load_custom_drive_cycle()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadCustomDriveCycle",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadCustomDriveCycle.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadCustomDriveCycle",
        "title": "LoadCustomDriveCycle > LoadCustomDriveCycle > LoadCustomDriveCycle",
        "section": "LoadCustomDriveCycle > LoadCustomDriveCycle",
        "text": "MotorCADCompatibility.LoadCustomDriveCycle(*args)\n\nDeprecated function. Replaced by MotorCAD.load_custom_drive_cycle().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.set_fluid",
        "href": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.set_fluid.html#set_fluid",
        "title": "set_fluid",
        "section": "set_fluid",
        "text": "Set the fluid for a cooling type.\nType of the cooling. Options are \"InternalFluid\",\n\"ExternalFluid\", \"ShaftSGFluid\", \"RotorWJFluid\",\n\"SlotWJFluid\", \"HousingWJFluid\", \"WetRotorFluid\",\n\"SprayCoolingFluid\", \"TVentFluid\",\n\"Spray_RadialHousing_Fluid\", \"Spray_RadialRotor_Fluid\",\n\"Spray_RadialHousing_Fluid_F\", \"Spray_RadialHousing_Fluid_R\",\n\"Spray_RadialRotor_Fluid_F\" and \"Spray_RadialRotor_Fluid_R\".\nset_fluid\npython:str\n\"InternalFluid\"\n\"ExternalFluid\"\n\"ShaftSGFluid\"\n\"RotorWJFluid\"\n\"SlotWJFluid\"\n\"HousingWJFluid\"\n\"WetRotorFluid\"\n\"SprayCoolingFluid\"\n\"TVentFluid\"\n\"Spray_RadialHousing_Fluid\"\n\"Spray_RadialRotor_Fluid\"\n\"Spray_RadialHousing_Fluid_F\"\n\"Spray_RadialHousing_Fluid_R\"\n\"Spray_RadialRotor_Fluid_F\"\n\"Spray_RadialRotor_Fluid_R\""
    },
    {
        "objectID": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.set_fluid",
        "href": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.set_fluid.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_fluid",
        "title": "set_fluid > set_fluid > set_fluid",
        "section": "set_fluid > set_fluid",
        "text": "MotorCAD.set_fluid(cooling_type, fluid)\n\nSet the fluid for a cooling type.\n\nParameters\n\ncooling_type\n\npython:str\n\nType of the cooling. Options are \"InternalFluid\",\n\"ExternalFluid\", \"ShaftSGFluid\", \"RotorWJFluid\",\n\"SlotWJFluid\", \"HousingWJFluid\", \"WetRotorFluid\",\n\"SprayCoolingFluid\", \"TVentFluid\",\n\"Spray_RadialHousing_Fluid\", \"Spray_RadialRotor_Fluid\",\n\"Spray_RadialHousing_Fluid_F\", \"Spray_RadialHousing_Fluid_R\",\n\"Spray_RadialRotor_Fluid_F\" and \"Spray_RadialRotor_Fluid_R\".\n\nfluid\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.round_corner",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.round_corner.html#round_corner",
        "title": "round_corner",
        "section": "round_corner",
        "text": "Round the corner of a region.\nThe corner coordinates must already exist on two entities belonging to the region.\nThe two entities adjacent to the corner are shortened, and an arc is created between\nthem.\nCoordinate of the corner to round.\nRadius to round the corner by.\nround_corner\nansys.motorcad.core.geometry.Coordinate\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.round_corner",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.round_corner.html#ansys.motorcad.core.geometry.Region.round_corner",
        "title": "round_corner > round_corner > round_corner",
        "section": "round_corner > round_corner",
        "text": "Region.round_corner(corner_coordinate, radius)\n\nRound the corner of a region.\n\nThe corner coordinates must already exist on two entities belonging to the region.\nThe two entities adjacent to the corner are shortened, and an arc is created between\nthem.\n\nParameters\n\ncorner_coordinate\n\nansys.motorcad.core.geometry.Coordinate\n\nCoordinate of the corner to round.\n\nradius\n\npython:float\n\nRadius to round the corner by.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/geometry_fitting",
        "href": "methods/geometry_fitting.html#geometry-fitting",
        "title": "Geometry fitting",
        "section": "Geometry fitting",
        "text": "Geometry fitting functions are used to find line and arc\nentities to fit a list of coordinates within a defined\ntolerance for Motor-CAD Adaptive Templates geometry using\nPyMotorCAD.\nMore information on Adaptive Templates is available\nin the ref_user_guide under ref_adaptive_templates_UG.\nreturn_entity_list(coordinates, ...)\nGet list of entities from a list of coordinates.\nGeometry fitting\nreturn_entity_list"
    },
    {
        "objectID": "methods/_autogen_UI",
        "href": "methods/_autogen_UI.html#ui",
        "title": "UI",
        "section": "UI",
        "text": "clear_messages()\nClear messages in the message display window.\ndisable_error_messages(active)\nDisable the display of error messages.\ndisplay_screen(screen_name)\nDisplay a screen within Motor-CAD.\ninitialise_tab_names()\nInitialize the available tabs in the Motor-CAD UI.\nsave_motorcad_screen_to_file(screen_name, ...)\nSave the entire Motor-CAD screen of a tab to an image file.\nsave_screen_to_file(screen_name, file_name)\nSave the image from a Motor-CAD tab to an image file.\nset_3d_component_visibility(group_name, ...)\nSet the visibility of a component by group name and component name.\nset_motorlab_context()\nChange Motor-CAD to the lab context.\nset_visible(visible)\nSet the visibility of the Motor-CAD UI.\nshow_magnetic_context()\nShow the magnetic context in Motor-CAD.\nshow_mechanical_context()\nShow the mechanical context in Motor-CAD.\nshow_message(message)\nDisplay a message in the Motor-CAD message window.\nshow_thermal_context()\nShow the thermal context in Motor-CAD.\nUI\nclear_messages\ndisable_error_messages\ndisplay_screen\ninitialise_tab_names\nsave_motorcad_screen_to_file\nsave_screen_to_file\nset_3d_component_visibility\nset_motorlab_context\nset_visible\nshow_magnetic_context\nshow_mechanical_context\nshow_message\nshow_thermal_context"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_air",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_air.html#rotor_air",
        "title": "rotor_air",
        "section": "rotor_air",
        "text": "rotor_air"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_air",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_air.html#ansys.motorcad.core.geometry.RegionType.rotor_air",
        "title": "rotor_air > rotor_air > rotor_air",
        "section": "rotor_air > rotor_air",
        "text": "RegionType.rotor_air = 'Rotor Air'\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowMagneticContext",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowMagneticContext.html#showmagneticcontext",
        "title": "ShowMagneticContext",
        "section": "ShowMagneticContext",
        "text": "Deprecated function. Replaced by MotorCAD.show_magnetic_context().\nShowMagneticContext\nMotorCAD.show_magnetic_context()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowMagneticContext",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowMagneticContext.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowMagneticContext",
        "title": "ShowMagneticContext > ShowMagneticContext > ShowMagneticContext",
        "section": "ShowMagneticContext > ShowMagneticContext",
        "text": "MotorCADCompatibility.ShowMagneticContext()\n\nDeprecated function. Replaced by MotorCAD.show_magnetic_context().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_liner",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_liner.html#stator_liner",
        "title": "stator_liner",
        "section": "stator_liner",
        "text": "stator_liner"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_liner",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_liner.html#ansys.motorcad.core.geometry.RegionType.stator_liner",
        "title": "stator_liner > stator_liner > stator_liner",
        "section": "stator_liner > stator_liner",
        "text": "RegionType.stator_liner = 'Stator Liner'\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.get_line_intersection",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.get_line_intersection.html#get_line_intersection",
        "title": "get_line_intersection",
        "section": "get_line_intersection",
        "text": "Get intersection Coordinates of arc with a line.\nReturns None if intersection not found.\nget_line_intersection\nansys.motorcad.core.geometry.Line\nansys.motorcad.core.geometry.Coordinate\npython:list\nof\nCoordinate\npython:None"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.get_line_intersection",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.get_line_intersection.html#ansys.motorcad.core.geometry.Arc.get_line_intersection",
        "title": "get_line_intersection > get_line_intersection > get_line_intersection",
        "section": "get_line_intersection > get_line_intersection",
        "text": "Arc.get_line_intersection(line)\n\nGet intersection Coordinates of arc with a line.\n\nReturns None if intersection not found.\n\nParameters\n\nline\n\nansys.motorcad.core.geometry.Line\n\n\n\nReturns\n\nansys.motorcad.core.geometry.Coordinate or python:list of Coordinate or python:None\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.br_used",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.br_used.html#br_used",
        "title": "br_used",
        "section": "br_used",
        "text": "Br used after applying Br multiplier.\nbr_used\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.br_used",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.br_used.html#ansys.motorcad.core.geometry.RegionMagnet.br_used",
        "title": "br_used > br_used > br_used",
        "section": "br_used > br_used",
        "text": "property RegionMagnet.br_used\n\nBr used after applying Br multiplier.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateOperatingPoint_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateOperatingPoint_Lab.html#calculateoperatingpoint_lab",
        "title": "CalculateOperatingPoint_Lab",
        "section": "CalculateOperatingPoint_Lab",
        "text": "Deprecated function. Replaced by MotorCAD.calculate_operating_point_lab().\nCalculateOperatingPoint_Lab\nMotorCAD.calculate_operating_point_lab()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateOperatingPoint_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateOperatingPoint_Lab.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateOperatingPoint_Lab",
        "title": "CalculateOperatingPoint_Lab > CalculateOperatingPoint_Lab > CalculateOperatingPoint_Lab",
        "section": "CalculateOperatingPoint_Lab > CalculateOperatingPoint_Lab",
        "text": "MotorCADCompatibility.CalculateOperatingPoint_Lab()\n\nDeprecated function. Replaced by MotorCAD.calculate_operating_point_lab().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.mesh_length",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.mesh_length.html#mesh_length",
        "title": "mesh_length",
        "section": "mesh_length",
        "text": "Get or set the mesh length to use, or 0 for default.\nmesh_length"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.mesh_length",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.mesh_length.html#ansys.motorcad.core.geometry.RegionMagnet.mesh_length",
        "title": "mesh_length > mesh_length > mesh_length",
        "section": "mesh_length > mesh_length",
        "text": "property RegionMagnet.mesh_length\n\nGet or set the mesh length to use, or 0 for default.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DisplayScreen",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DisplayScreen.html#displayscreen",
        "title": "DisplayScreen",
        "section": "DisplayScreen",
        "text": "Deprecated function. Replaced by MotorCAD.display_screen().\nDisplayScreen\nMotorCAD.display_screen()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DisplayScreen",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DisplayScreen.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DisplayScreen",
        "title": "DisplayScreen > DisplayScreen > DisplayScreen",
        "section": "DisplayScreen > DisplayScreen",
        "text": "MotorCADCompatibility.DisplayScreen(*args)\n\nDeprecated function. Replaced by MotorCAD.display_screen().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autogen_Geometry",
        "href": "methods/_autogen_Geometry.html#geometry",
        "title": "Geometry",
        "section": "Geometry",
        "text": "check_if_geometry_is_valid(edit_geometry)\nCheck if the Motor-CAD geometry is valid.\nget_winding_coil(phase, path, coil)\nGet the go and return slots, positions, and turns for the winding coil.\nset_winding_coil(phase, path, coil, go_slot, ...)\nSet go and return slots, positions, and turns for the winding coil.\nGeometry\ncheck_if_geometry_is_valid\nget_winding_coil\nset_winding_coil"
    },
    {
        "objectID": "examples/internal_scripting/mechanical_stress",
        "href": "examples/internal_scripting/mechanical_stress.html#mechanical-stress",
        "title": "Mechanical stress",
        "section": "Mechanical stress",
        "text": "This example demonstrates internal scripting mechanical stress functionality\nPerform required imports\nLaunch Motor-CAD\nMechanical stress"
    },
    {
        "objectID": "examples/internal_scripting/mechanical_stress",
        "href": "examples/internal_scripting/mechanical_stress.html#pymotorcad-documentation-example",
        "title": "Mechanical stress > PyMotorCAD Documentation Example",
        "section": "PyMotorCAD Documentation Example",
        "text": "(Used for the PyMotorCAD Documentation Examples only)\nTotal running time of the script: (0 minutes 20.516 seconds)\nDownload Jupyter notebook: mechanical_stress.ipynb\nDownload Python source code: mechanical_stress.py\nDownload zipped: mechanical_stress.zip\nGallery generated by Sphinx-Gallery\nPyMotorCAD Documentation Example\nDownload Jupyter notebook: mechanical_stress.ipynb\nDownload Python source code: mechanical_stress.py\nDownload zipped: mechanical_stress.zip"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFEAPathArc",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFEAPathArc.html#setfeapatharc",
        "title": "SetFEAPathArc",
        "section": "SetFEAPathArc",
        "text": "Deprecated function. Replaced by MotorCAD.set_fea_path_arc().\nSetFEAPathArc\nMotorCAD.set_fea_path_arc()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFEAPathArc",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFEAPathArc.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFEAPathArc",
        "title": "SetFEAPathArc > SetFEAPathArc > SetFEAPathArc",
        "section": "SetFEAPathArc > SetFEAPathArc",
        "text": "MotorCADCompatibility.SetFEAPathArc(*args)\n\nDeprecated function. Replaced by MotorCAD.set_fea_path_arc().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/adaptive_library/BPMTriangularRotorNotches",
        "href": "examples/adaptive_library/BPMTriangularRotorNotches.html#triangular-rotor-notches-for-ipm",
        "title": "Triangular Rotor Notches for IPM",
        "section": "Triangular Rotor Notches for IPM",
        "text": "This script applies the adaptive templates functionality to create triangular rotor notches to\nimprove NVH performance.\nFor more information on the use of Adaptive Templates in Motor-CAD, and how to create, modify\nand debug Adaptive Templates Scripts, see ref_adaptive_templates_UG in the\nref_user_guide.\nAdaptive Templates in Motor-CAD require v2024.1.2 (Motor-CAD 2024 R1 Update) or later and\nPyMotorCAD v0.4.1. To update PyMotorCAD in Motor-CAD, go to Scripting -> Settings -> PyMotorCAD\nupdates and select ‘Update to Latest Release’.\nThis script is designed to be run from Motor-CAD template “e9”. If no Motor-CAD file is open, the\ne9 template will be loaded.\nThis script uses the following adaptive parameters:\nNotch Angle (-4)\nNotch Sweep (5)\nNotch Depth (1)\nNotches per Pole (2)\nIf these parameters are not already set up in the Motor-CAD file, the parameters will be\nautomatically set, with the default values shown in brackets.\nTo set an adaptive geometry for a Motor-CAD file, a script must be loaded in to the Adaptive\nTemplates tab (Geometry -> Editor -> Adaptive Templates) in Motor-CAD and run. When the option\n‘Geometry Templates Type’ is set to ‘Adaptive’, this script is automatically run repeatedly to\nkeep the Adaptive Geometry set in Motor-CAD.\nThis Python script can also be executed externally. When executed externally, a Motor-CAD instance\nwill be launched and a file based on the “e9” template will be saved to a temporary folder. This\nscript will be loaded into the Adaptive Templates tab.\nTriangular Rotor Notches for IPM"
    },
    {
        "objectID": "examples/adaptive_library/BPMTriangularRotorNotches",
        "href": "examples/adaptive_library/BPMTriangularRotorNotches.html#perform-required-imports",
        "title": "Triangular Rotor Notches for IPM > Perform Required imports",
        "section": "Perform Required imports",
        "text": "Import the pymotorcad package to access Motor-CAD. Import the triangular_notch function to\ncreate the notch geometry region with Adaptive Templates geometry. Import the os, shutil,\nsys, and tempfile packages to open and save a temporary MOT file if none is open.\nPerform Required imports\npymotorcad\ntriangular_notch\nos\nshutil\nsys\ntempfile"
    },
    {
        "objectID": "examples/adaptive_library/BPMTriangularRotorNotches",
        "href": "examples/adaptive_library/BPMTriangularRotorNotches.html#connect-to-motor-cad",
        "title": "Triangular Rotor Notches for IPM > Connect to Motor-CAD",
        "section": "Connect to Motor-CAD",
        "text": "If this script is loaded into the Adaptive Templates file in Motor-CAD, the current Motor-CAD\ninstance is used.\nIf the script is run externally, these actions occur: a new Motor-CAD instance is opened,\nthe e9 IPM motor template is loaded, and the file is saved to a temporary folder.\nTo keep a new Motor-CAD instance open after executing the script, use the\nMotorCAD(keep_instance_open=True) option when opening the new instance.\nAlternatively, use the MotorCAD() method, which closes the Motor-CAD instance after the\nscript is executed.\nConnect to Motor-CAD\nMotorCAD(keep_instance_open=True)\nMotorCAD()"
    },
    {
        "objectID": "examples/adaptive_library/BPMTriangularRotorNotches",
        "href": "examples/adaptive_library/BPMTriangularRotorNotches.html#set-adaptive-parameters-if-required",
        "title": "Triangular Rotor Notches for IPM > Set Adaptive Parameters if required",
        "section": "Set Adaptive Parameters if required",
        "text": "Four Adaptive Parameters are required for this adaptive template. These are used to define the\nnumber of rotor notches to be added, their position and size.\nIf the Adaptive Parameters have already been set in the current Motor-CAD file, their current\nvalues will be used. Otherwise, the Adaptive Parameters will be defined and set to default values.\nUse the set_adaptive_parameter_default method to set the required parameters if undefined.\nSet Adaptive Parameters if required\nset_adaptive_parameter_default"
    },
    {
        "objectID": "examples/adaptive_library/BPMTriangularRotorNotches",
        "href": "examples/adaptive_library/BPMTriangularRotorNotches.html#get-required-parameters-and-objects",
        "title": "Triangular Rotor Notches for IPM > Get required parameters and objects",
        "section": "Get required parameters and objects",
        "text": "Get the Adaptive Parameters specified in Motor-CAD, and their values\nGet the standard template rotor region from Motor-CAD. Calculate the rotor radius and define the\nrotor centre coordinates.\nAdd an if statement to account for the case when a notch crosses the symmetry boundary. This\nresets notch_angle to half the notch_angular_width away from the boundary.\nAdd an if statement to account for the case when notches overlap at the centre of the pole.\nThis resets notch_angle to:\nHalf the notch_angular_width away from the pole centre when there are an even number of\nnotches\nThe full notch_angular_width away from the pole centre when there are an odd number of\nnotches\nGet required parameters and objects\nif\nnotch_angle\nnotch_angular_width\nif\nnotch_angle\nnotch_angular_width\nnotch_angular_width"
    },
    {
        "objectID": "examples/adaptive_library/BPMTriangularRotorNotches",
        "href": "examples/adaptive_library/BPMTriangularRotorNotches.html#create-the-adaptive-templates-geometry",
        "title": "Triangular Rotor Notches for IPM > Create the Adaptive Templates geometry",
        "section": "Create the Adaptive Templates geometry",
        "text": "For each notch to be added:\nCalculate the angular position of the notch in mechanical degrees\nApply the offset angle. For notches on the left side of the pole, the position is shifted by\n+ notch_angle mechanical degrees. For notches on the right side of the pole, the position is\nshifted by - notch_angle mechanical degrees.\nCreate the notch Region using the triangular_notch() function, imported from\nansys.motorcad.core.geometry_shapes. The arguments for the function are:\nrotor_radius\nnotch_angular_width\nnotch_centre_angle\nnotch_depth\nDefine the properties for the notch region\nname\ncolour\nduplication angle\nmaterial\nset the notch’s parent to the rotor region. This will allow Motor-CAD to treat the notch as\na sub-region of the rotor and handle subtractions automatically.\nIf the notch is closed, set the region in Motor-CAD.\nCreate the Adaptive Templates geometry\n+ notch_angle\n- notch_angle\ntriangular_notch()\nansys.motorcad.core.geometry_shapes\nparent"
    },
    {
        "objectID": "examples/adaptive_library/BPMTriangularRotorNotches",
        "href": "examples/adaptive_library/BPMTriangularRotorNotches.html#load-in-adaptive-templates-script-if-required",
        "title": "Triangular Rotor Notches for IPM > Load in Adaptive Templates script if required",
        "section": "Load in Adaptive Templates script if required",
        "text": "When this script is run externally, the script executes the following:\nSet Geometry type to Adaptive.\nLoad the script into the Adaptive Templates tab.\nGo to the Geometry -> Radial tab to run the Adaptive Templates script and display the new\ngeometry.\nWhen running in a Jupyter Notebook, you must provide the path for the Adaptive Templates script\n(PY file) instead of sys.argv[0] when using the load_adaptive_script() method.\nTotal running time of the script: (0 minutes 20.016 seconds)\nDownload Jupyter notebook: BPMTriangularRotorNotches.ipynb\nDownload Python source code: BPMTriangularRotorNotches.py\nDownload zipped: BPMTriangularRotorNotches.zip\nGallery generated by Sphinx-Gallery\nLoad in Adaptive Templates script if required\nsys.argv[0]\nload_adaptive_script()\nDownload Jupyter notebook: BPMTriangularRotorNotches.ipynb\nDownload Python source code: BPMTriangularRotorNotches.py\nDownload zipped: BPMTriangularRotorNotches.zip"
    },
    {
        "objectID": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.set_variable",
        "href": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.set_variable.html#set_variable",
        "title": "set_variable",
        "section": "set_variable",
        "text": "Set a Motor-CAD variable.\nName of the variable.\nValue to set the variable to.\nset_variable\npython:str"
    },
    {
        "objectID": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.set_variable",
        "href": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.set_variable.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_variable",
        "title": "set_variable > set_variable > set_variable",
        "section": "set_variable > set_variable",
        "text": "MotorCAD.set_variable(variable_name, variable_value)\n\nSet a Motor-CAD variable.\n\nParameters\n\nvariable_name\n\npython:str\n\nName of the variable.\n\nvariable_value\n\nint|float|str|bool\n\nValue to set the variable to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.insert_entity",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.insert_entity.html#insert_entity",
        "title": "insert_entity",
        "section": "insert_entity",
        "text": "Insert entity to list of region entities at given index.\nIndex of which to insert at\nLine/arc entity class instance\ninsert_entity\npython:int\nLine\nArc"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.insert_entity",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.insert_entity.html#ansys.motorcad.core.geometry.RegionMagnet.insert_entity",
        "title": "insert_entity > insert_entity > insert_entity",
        "section": "insert_entity > insert_entity",
        "text": "RegionMagnet.insert_entity(index, entity)\n\nInsert entity to list of region entities at given index.\n\nParameters\n\nindex\n\npython:int\n\nIndex of which to insert at\n\nentity\n\nLine or Arc\n\nLine/arc entity class instance\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.BuildModel_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.BuildModel_Lab.html#buildmodel_lab",
        "title": "BuildModel_Lab",
        "section": "BuildModel_Lab",
        "text": "Deprecated function. Replaced by MotorCAD.build_model_lab().\nBuildModel_Lab\nMotorCAD.build_model_lab()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.BuildModel_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.BuildModel_Lab.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.BuildModel_Lab",
        "title": "BuildModel_Lab > BuildModel_Lab > BuildModel_Lab",
        "section": "BuildModel_Lab > BuildModel_Lab",
        "text": "MotorCADCompatibility.BuildModel_Lab()\n\nDeprecated function. Replaced by MotorCAD.build_model_lab().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.name",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Get or set region name.\nname"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.name",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.name.html#ansys.motorcad.core.geometry.RegionMagnet.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property RegionMagnet.name\n\nGet or set region name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.get_intersection",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.get_intersection.html#get_intersection",
        "title": "get_intersection",
        "section": "get_intersection",
        "text": "Get intersection Coordinate of entity with another entity.\nReturns None if intersection not found.\nget_intersection\nansys.motorcad.core.geometry.Line\nansys.motorcad.core.geometry.Arc\nansys.motorcad.core.geometry.Coordinate\npython:list\nof\nCoordinate\npython:None"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.get_intersection",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.get_intersection.html#ansys.motorcad.core.geometry.Line.get_intersection",
        "title": "get_intersection > get_intersection > get_intersection",
        "section": "get_intersection > get_intersection",
        "text": "Line.get_intersection(entity)\n\nGet intersection Coordinate of entity with another entity.\n\nReturns None if intersection not found.\n\nParameters\n\nentity\n\nansys.motorcad.core.geometry.Line or ansys.motorcad.core.geometry.Arc\n\n\n\nReturns\n\nansys.motorcad.core.geometry.Coordinate or python:list of Coordinate or python:None\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/virtual_env_motorcad",
        "href": "user_guide/virtual_env_motorcad.html#using-a-python-virtual-environment-in-motor-cad",
        "title": "Using a Python virtual environment in Motor-CAD",
        "section": "Using a Python virtual environment in Motor-CAD",
        "text": "You can use a Python virtual environment with Motor-CAD. By default, Motor-CAD uses the Python\nversion that comes with the Motor-CAD installation.\nUsing a Python virtual environment in Motor-CAD"
    },
    {
        "objectID": "user_guide/virtual_env_motorcad",
        "href": "user_guide/virtual_env_motorcad.html#create-a-local-python-virtual-environment",
        "title": "Using a Python virtual environment in Motor-CAD > Create a local Python virtual environment",
        "section": "Create a local Python virtual environment",
        "text": "If you are using a Python IDE, this often creates a virtual environment for you when you\nstart a new project. In this case, you can skip the section below, which describes how to create\na virtual environment from the command line.\nIf Python is already installed, you can check the version by running the following command in a\nterminal. (You can use the Windows terminal or any terminal integrated with an IDE such as Visual\nStudio Code or PyCharm.)\nBased on the Python version, you create a virtual environment:\nActivate the newly created virtual environment:\nIn case of Windows Powershell\nIn case of Windows Command Prompt\nDepending on the terminal specification, the virtual environment name might be highlighted.\nUse pip to install all required packages, such as ansys.motorcad.core, numpy or\nbezier.\nIn the terminal window, the preceding commands might look like this:\nCreate a local Python virtual environment\npip\nansys.motorcad.core\nnumpy\nbezier"
    },
    {
        "objectID": "user_guide/virtual_env_motorcad",
        "href": "user_guide/virtual_env_motorcad.html#change-the-python-exe-path-in-the-motor-cad-ui",
        "title": "Using a Python virtual environment in Motor-CAD > Change the Python exe path in the Motor-CAD UI",
        "section": "Change the Python exe path in the Motor-CAD UI",
        "text": "Proceed to change the path for the Python exe in Defaults -> Default File Locations. This should\npoint to the pythonw.exe file in the Scripts folder of the virtual environment:\nThe Python path is updated accordingly, and the Python version is recognised by the Motor-CAD\nUI.\nChange the Python exe path in the Motor-CAD UI\npythonw.exe\nScripts"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_RT",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_RT.html#addpoint_rt",
        "title": "AddPoint_RT",
        "section": "AddPoint_RT",
        "text": "Deprecated function.\nAddPoint_RT"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_RT",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_RT.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_RT",
        "title": "AddPoint_RT > AddPoint_RT > AddPoint_RT",
        "section": "AddPoint_RT > AddPoint_RT",
        "text": "MotorCADCompatibility.AddPoint_RT(*args)\n\nDeprecated function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_region",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_region.html#get_region",
        "title": "get_region",
        "section": "get_region",
        "text": "Get Motor-CAD geometry region.\nname of region.\nMotor-CAD region object.\nget_region\npython:str\nansys.motorcad.core.geometry.Region\nansys.motorcad.core.geometry.RegionMagnet"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_region",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_region.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_region",
        "title": "get_region > get_region > get_region",
        "section": "get_region > get_region",
        "text": "MotorCAD.get_region(name)\n\nGet Motor-CAD geometry region.\n\nParameters\n\nname\n\npython:str\n\nname of region.\n\nReturns\n\nansys.motorcad.core.geometry.Region or ansys.motorcad.core.geometry.RegionMagnet\n\nMotor-CAD region object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_CustomMaterial_XY",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_CustomMaterial_XY.html#addpoint_custommaterial_xy",
        "title": "AddPoint_CustomMaterial_XY",
        "section": "AddPoint_CustomMaterial_XY",
        "text": "Deprecated function. Replaced by MotorCAD.add_point_custom_material_xy().\nAddPoint_CustomMaterial_XY\nMotorCAD.add_point_custom_material_xy()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_CustomMaterial_XY",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_CustomMaterial_XY.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_CustomMaterial_XY",
        "title": "AddPoint_CustomMaterial_XY > AddPoint_CustomMaterial_XY > AddPoint_CustomMaterial_XY",
        "section": "AddPoint_CustomMaterial_XY > AddPoint_CustomMaterial_XY",
        "text": "MotorCADCompatibility.AddPoint_CustomMaterial_XY(*args)\n\nDeprecated function. Replaced by MotorCAD.add_point_custom_material_xy().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "sg_execution_times",
        "href": "sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "41:18.669 total execution time for 19 files from all galleries:\nExample\nTime\nMem (MB)\nsphx_glr_examples_links_thermal_twinbuilder.py (..\\..\\examples\\links\\thermal_twinbuilder.py)\n16:09.939\n0.0\nsphx_glr_examples_links_ece_export_for_twinbuilder.py (..\\..\\examples\\links\\ece_export_for_twinbuilder.py)\n10:58.902\n0.0\nsphx_glr_examples_internal_scripting_mechanical_force.py (..\\..\\examples\\internal_scripting\\mechanical_force.py)\n02:09.440\n0.0\nsphx_glr_examples_advanced_force_extraction.py (..\\..\\examples\\advanced\\force_extraction.py)\n02:07.002\n0.0\nsphx_glr_examples_basics_lab_basics.py (..\\..\\examples\\basics\\lab_basics.py)\n01:52.096\n0.0\nsphx_glr_examples_internal_scripting_thermal_transient.py (..\\..\\examples\\internal_scripting\\thermal_transient.py)\n01:42.377\n0.0\nsphx_glr_examples_adaptive_library_TrapezoidalDuct.py (..\\..\\examples\\adaptive_library\\TrapezoidalDuct.py)\n00:43.923\n0.0\nsphx_glr_examples_basics_thermal_basics.py (..\\..\\examples\\basics\\thermal_basics.py)\n00:42.798\n0.0\nsphx_glr_examples_basics_emag_basics.py (..\\..\\examples\\basics\\emag_basics.py)\n00:39.751\n0.0\nsphx_glr_examples_adaptive_library_RoundParallelSlotBttm.py (..\\..\\examples\\adaptive_library\\RoundParallelSlotBttm.py)\n00:33.688\n0.0\nsphx_glr_examples_adaptive_library_OblongStatorDuct.py (..\\..\\examples\\adaptive_library\\OblongStatorDuct.py)\n00:31.672\n0.0\nsphx_glr_examples_adaptive_library_BezierCurveRotorPockets.py (..\\..\\examples\\adaptive_library\\BezierCurveRotorPockets.py)\n00:31.657\n0.0\nsphx_glr_examples_internal_scripting_thermal_steady_state.py (..\\..\\examples\\internal_scripting\\thermal_steady_state.py)\n00:27.875\n0.0\nsphx_glr_examples_internal_scripting_emag.py (..\\..\\examples\\internal_scripting\\emag.py)\n00:26.079\n0.0\nsphx_glr_examples_adaptive_library_UShapeSYNCRELCurvedFluxBarriers.py (..\\..\\examples\\adaptive_library\\UShapeSYNCRELCurvedFluxBarriers.py)\n00:20.907\n0.0\nsphx_glr_examples_adaptive_library_DXFImport.py (..\\..\\examples\\adaptive_library\\DXFImport.py)\n00:20.532\n0.0\nsphx_glr_examples_internal_scripting_mechanical_stress.py (..\\..\\examples\\internal_scripting\\mechanical_stress.py)\n00:20.516\n0.0\nsphx_glr_examples_adaptive_library_BPMTriangularRotorNotches.py (..\\..\\examples\\adaptive_library\\BPMTriangularRotorNotches.py)\n00:20.016\n0.0\nsphx_glr_examples_adaptive_library_UpdateMaterialMesh.py (..\\..\\examples\\adaptive_library\\UpdateMaterialMesh.py)\n00:19.500\n0.0\nComputation times\n..\\..\\examples\\links\\thermal_twinbuilder.py\n..\\..\\examples\\links\\ece_export_for_twinbuilder.py\n..\\..\\examples\\internal_scripting\\mechanical_force.py\n..\\..\\examples\\advanced\\force_extraction.py\n..\\..\\examples\\basics\\lab_basics.py\n..\\..\\examples\\internal_scripting\\thermal_transient.py\n..\\..\\examples\\adaptive_library\\TrapezoidalDuct.py\n..\\..\\examples\\basics\\thermal_basics.py\n..\\..\\examples\\basics\\emag_basics.py\n..\\..\\examples\\adaptive_library\\RoundParallelSlotBttm.py\n..\\..\\examples\\adaptive_library\\OblongStatorDuct.py\n..\\..\\examples\\adaptive_library\\BezierCurveRotorPockets.py\n..\\..\\examples\\internal_scripting\\thermal_steady_state.py\n..\\..\\examples\\internal_scripting\\emag.py\n..\\..\\examples\\adaptive_library\\UShapeSYNCRELCurvedFluxBarriers.py\n..\\..\\examples\\adaptive_library\\DXFImport.py\n..\\..\\examples\\internal_scripting\\mechanical_stress.py\n..\\..\\examples\\adaptive_library\\BPMTriangularRotorNotches.py\n..\\..\\examples\\adaptive_library\\UpdateMaterialMesh.py"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.collides",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.collides.html#collides",
        "title": "collides",
        "section": "collides",
        "text": "Check whether any of the specified regions collide with self.\nMotor-CAD region object/list of objects\ncollides\nansys.motorcad.core.geometry.Region\npython:list\nof\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.collides",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.collides.html#ansys.motorcad.core.geometry.RegionMagnet.collides",
        "title": "collides > collides > collides",
        "section": "collides > collides",
        "text": "RegionMagnet.collides(regions)\n\nCheck whether any of the specified regions collide with self.\n\nParameters\n\nregions\n\nansys.motorcad.core.geometry.Region or python:list of ansys.motorcad.core.geometry.Region\n\nMotor-CAD region object/list of objects\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.is_closed",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.is_closed.html#is_closed",
        "title": "is_closed",
        "section": "is_closed",
        "text": "Check whether region entities create a closed region.\nWhether region is closed\nis_closed\nBoolean"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.is_closed",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.is_closed.html#ansys.motorcad.core.geometry.RegionMagnet.is_closed",
        "title": "is_closed > is_closed > is_closed",
        "section": "is_closed > is_closed",
        "text": "RegionMagnet.is_closed()\n\nCheck whether region entities create a closed region.\n\nReturns\n\nBoolean\n\nWhether region is closed\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_winding_coil",
        "href": "methods/_autosummary_Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_winding_coil.html#get_winding_coil",
        "title": "get_winding_coil",
        "section": "get_winding_coil",
        "text": "Get the go and return slots, positions, and turns for the winding coil.\nIn Motor-CAD, you can select Winding -> Pattern to see how phases, paths,\nand coils are indexed.\nget_winding_coil\npython:int\npython:int\npython:int\npython:int\npython:str\npython:int\npython:str\npython:int"
    },
    {
        "objectID": "methods/_autosummary_Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_winding_coil",
        "href": "methods/_autosummary_Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_winding_coil.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_winding_coil",
        "title": "get_winding_coil > get_winding_coil > get_winding_coil",
        "section": "get_winding_coil > get_winding_coil",
        "text": "MotorCAD.get_winding_coil(phase, path, coil)\n\nGet the go and return slots, positions, and turns for the winding coil.\n\nIn Motor-CAD, you can select Winding -> Pattern to see how phases, paths,\nand coils are indexed.\n\nParameters\n\nphase\n\npython:int\n\n\n\npath\n\npython:int\n\n\n\ncoil\n\npython:int\n\n\n\nReturns\n\nGoSlot\n\npython:int\n\n\n\nGoPosition\n\npython:str\n\n\n\nReturnSlot\n\npython:int\n\n\n\nReturnPosition\n\npython:str\n\n\n\nTurns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.brush",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.brush.html#brush",
        "title": "brush",
        "section": "brush",
        "text": "brush"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.brush",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.brush.html#ansys.motorcad.core.geometry.RegionType.brush",
        "title": "brush > brush > brush",
        "section": "brush > brush",
        "text": "RegionType.brush = 'Brush'\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.colour",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.colour.html#colour",
        "title": "colour",
        "section": "colour",
        "text": "Get or set region colour.\ncolour"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.colour",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.colour.html#ansys.motorcad.core.geometry.RegionMagnet.colour",
        "title": "colour > colour > colour",
        "section": "colour > colour",
        "text": "property RegionMagnet.colour\n\nGet or set region colour.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearExternalCircuit",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearExternalCircuit.html#clearexternalcircuit",
        "title": "ClearExternalCircuit",
        "section": "ClearExternalCircuit",
        "text": "Deprecated function. Replaced by MotorCAD.clear_external_circuit().\nClearExternalCircuit\nMotorCAD.clear_external_circuit()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearExternalCircuit",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearExternalCircuit.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearExternalCircuit",
        "title": "ClearExternalCircuit > ClearExternalCircuit > ClearExternalCircuit",
        "section": "ClearExternalCircuit > ClearExternalCircuit",
        "text": "MotorCADCompatibility.ClearExternalCircuit()\n\nDeprecated function. Replaced by MotorCAD.clear_external_circuit().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetModelBuilt_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetModelBuilt_Lab.html#getmodelbuilt_lab",
        "title": "GetModelBuilt_Lab",
        "section": "GetModelBuilt_Lab",
        "text": "Deprecated function. Replaced by MotorCAD.get_model_built_lab().\nGetModelBuilt_Lab\nMotorCAD.get_model_built_lab()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetModelBuilt_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetModelBuilt_Lab.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetModelBuilt_Lab",
        "title": "GetModelBuilt_Lab > GetModelBuilt_Lab > GetModelBuilt_Lab",
        "section": "GetModelBuilt_Lab > GetModelBuilt_Lab",
        "text": "MotorCADCompatibility.GetModelBuilt_Lab()\n\nDeprecated function. Replaced by MotorCAD.get_model_built_lab().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.translate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.translate.html#translate",
        "title": "translate",
        "section": "translate",
        "text": "Translate Entity by specified x,y distances.\nx distance.\ny distance.\ntranslate\npython:float\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.translate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.translate.html#ansys.motorcad.core.geometry.Entity.translate",
        "title": "translate > translate > translate",
        "section": "translate > translate",
        "text": "Entity.translate(x, y)\n\nTranslate Entity by specified x,y distances.\n\nParameters\n\nx\n\npython:float\n\nx distance.\n\ny\n\npython:float\n\ny distance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_area_stator_deprecated",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_area_stator_deprecated.html#slot_area_stator_deprecated",
        "title": "slot_area_stator_deprecated",
        "section": "slot_area_stator_deprecated",
        "text": "slot_area_stator_deprecated"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_area_stator_deprecated",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_area_stator_deprecated.html#ansys.motorcad.core.geometry.RegionType.slot_area_stator_deprecated",
        "title": "slot_area_stator_deprecated > slot_area_stator_deprecated > slot_area_stator_deprecated",
        "section": "slot_area_stator_deprecated > slot_area_stator_deprecated",
        "text": "RegionType.slot_area_stator_deprecated = 'Stator Slot'\n\n"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_model_build_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_model_build_lab.html#clear_model_build_lab",
        "title": "clear_model_build_lab",
        "section": "clear_model_build_lab",
        "text": "Clear the Lab model build.\nclear_model_build_lab"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_model_build_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_model_build_lab.html#ansys.motorcad.core.motorcad_methods.MotorCAD.clear_model_build_lab",
        "title": "clear_model_build_lab > clear_model_build_lab > clear_model_build_lab",
        "section": "clear_model_build_lab > clear_model_build_lab",
        "text": "MotorCAD.clear_model_build_lab()\n\nClear the Lab model build.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_magnetic_thermal_calculation",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_magnetic_thermal_calculation.html#do_magnetic_thermal_calculation",
        "title": "do_magnetic_thermal_calculation",
        "section": "do_magnetic_thermal_calculation",
        "text": "Run coupled e-magnetic and thermal calculations.\ndo_magnetic_thermal_calculation"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_magnetic_thermal_calculation",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_magnetic_thermal_calculation.html#ansys.motorcad.core.motorcad_methods.MotorCAD.do_magnetic_thermal_calculation",
        "title": "do_magnetic_thermal_calculation > do_magnetic_thermal_calculation > do_magnetic_thermal_calculation",
        "section": "do_magnetic_thermal_calculation > do_magnetic_thermal_calculation",
        "text": "MotorCAD.do_magnetic_thermal_calculation()\n\nRun coupled e-magnetic and thermal calculations.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.br_y",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.br_y.html#br_y",
        "title": "br_y",
        "section": "br_y",
        "text": "Y-axis component of the br value.\nbr_y\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.br_y",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.br_y.html#ansys.motorcad.core.geometry.RegionMagnet.br_y",
        "title": "br_y > br_y > br_y",
        "section": "br_y > br_y",
        "text": "property RegionMagnet.br_y\n\nY-axis component of the br value.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor.html#rotor",
        "title": "rotor",
        "section": "rotor",
        "text": "rotor"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor.html#ansys.motorcad.core.geometry.RegionType.rotor",
        "title": "rotor > rotor > rotor",
        "section": "rotor > rotor",
        "text": "RegionType.rotor = 'Rotor'\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetResistanceValue",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetResistanceValue.html#setresistancevalue",
        "title": "SetResistanceValue",
        "section": "SetResistanceValue",
        "text": "Deprecated function. Replaced by MotorCAD.set_resistance_value().\nSetResistanceValue\nMotorCAD.set_resistance_value()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetResistanceValue",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetResistanceValue.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetResistanceValue",
        "title": "SetResistanceValue > SetResistanceValue > SetResistanceValue",
        "section": "SetResistanceValue > SetResistanceValue",
        "text": "MotorCADCompatibility.SetResistanceValue(*args)\n\nDeprecated function. Replaced by MotorCAD.set_resistance_value().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.EditMagnetRegion",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.EditMagnetRegion.html#editmagnetregion",
        "title": "EditMagnetRegion",
        "section": "EditMagnetRegion",
        "text": "Deprecated function. Replaced by MotorCAD.edit_magnet_region().\nEditMagnetRegion\nMotorCAD.edit_magnet_region()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.EditMagnetRegion",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.EditMagnetRegion.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.EditMagnetRegion",
        "title": "EditMagnetRegion > EditMagnetRegion > EditMagnetRegion",
        "section": "EditMagnetRegion > EditMagnetRegion",
        "text": "MotorCADCompatibility.EditMagnetRegion(*args)\n\nDeprecated function. Replaced by MotorCAD.edit_magnet_region().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddLine_XY",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddLine_XY.html#addline_xy",
        "title": "AddLine_XY",
        "section": "AddLine_XY",
        "text": "Deprecated function. Replaced by MotorCAD.add_line_xy().\nAddLine_XY\nMotorCAD.add_line_xy()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddLine_XY",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddLine_XY.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddLine_XY",
        "title": "AddLine_XY > AddLine_XY > AddLine_XY",
        "section": "AddLine_XY > AddLine_XY",
        "text": "MotorCADCompatibility.AddLine_XY(*args)\n\nDeprecated function. Replaced by MotorCAD.add_line_xy().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.unite",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.unite.html#unite",
        "title": "unite",
        "section": "unite",
        "text": "Unite one or more other regions with self.\nMotor-CAD region object/list of objects\nunite\nansys.motorcad.core.geometry.Region\npython:list\nof\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.unite",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.unite.html#ansys.motorcad.core.geometry.Region.unite",
        "title": "unite > unite > unite",
        "section": "unite > unite",
        "text": "Region.unite(regions)\n\nUnite one or more other regions with self.\n\nParameters\n\nregions\n\nansys.motorcad.core.geometry.Region or python:list of ansys.motorcad.core.geometry.Region\n\nMotor-CAD region object/list of objects\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetPowerSourceValue",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetPowerSourceValue.html#setpowersourcevalue",
        "title": "SetPowerSourceValue",
        "section": "SetPowerSourceValue",
        "text": "Deprecated function. Replaced by MotorCAD.set_power_source_value().\nSetPowerSourceValue\nMotorCAD.set_power_source_value()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetPowerSourceValue",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetPowerSourceValue.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetPowerSourceValue",
        "title": "SetPowerSourceValue > SetPowerSourceValue > SetPowerSourceValue",
        "section": "SetPowerSourceValue > SetPowerSourceValue",
        "text": "MotorCADCompatibility.SetPowerSourceValue(*args)\n\nDeprecated function. Replaced by MotorCAD.set_power_source_value().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.add_entity",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.add_entity.html#add_entity",
        "title": "add_entity",
        "section": "add_entity",
        "text": "Add entity to list of region entities.\nLine/arc entity class instance\nadd_entity\nLine\nArc"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.add_entity",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.add_entity.html#ansys.motorcad.core.geometry.Region.add_entity",
        "title": "add_entity > add_entity > add_entity",
        "section": "add_entity > add_entity",
        "text": "Region.add_entity(entity)\n\nAdd entity to list of region entities.\n\nParameters\n\nentity\n\nLine or Arc\n\nLine/arc entity class instance\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.midpoint",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.midpoint.html#midpoint",
        "title": "midpoint",
        "section": "midpoint",
        "text": "Get midpoint of arc.\nmidpoint\nCoordinate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.midpoint",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.midpoint.html#ansys.motorcad.core.geometry.Arc.midpoint",
        "title": "midpoint > midpoint > midpoint",
        "section": "midpoint > midpoint",
        "text": "property Arc.midpoint\n\nGet midpoint of arc.\n\nReturns\n\nCoordinate\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_Boundary_RT",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_Boundary_RT.html#addarc_boundary_rt",
        "title": "AddArc_Boundary_RT",
        "section": "AddArc_Boundary_RT",
        "text": "Deprecated function. Replaced by MotorCAD.add_arc_boundary_rt().\nAddArc_Boundary_RT\nMotorCAD.add_arc_boundary_rt()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_Boundary_RT",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_Boundary_RT.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_Boundary_RT",
        "title": "AddArc_Boundary_RT > AddArc_Boundary_RT > AddArc_Boundary_RT",
        "section": "AddArc_Boundary_RT > AddArc_Boundary_RT",
        "text": "MotorCADCompatibility.AddArc_Boundary_RT(*args)\n\nDeprecated function. Replaced by MotorCAD.add_arc_boundary_rt().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.initiate_geometry_from_script",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.initiate_geometry_from_script.html#initiate_geometry_from_script",
        "title": "initiate_geometry_from_script",
        "section": "initiate_geometry_from_script",
        "text": "Initiate the geometry from scripting so Motor-CAD knows how to use it.\nThis method clears the current scripting geometry.\nThe clear_all_data method must be called before this method is called.\nDeprecated since version 0.6.0: initiate_geometry_from_script will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\ninitiate_geometry_from_script\nclear_all_data"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.initiate_geometry_from_script",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.initiate_geometry_from_script.html#ansys.motorcad.core.motorcad_methods.MotorCAD.initiate_geometry_from_script",
        "title": "initiate_geometry_from_script > initiate_geometry_from_script > initiate_geometry_from_script",
        "section": "initiate_geometry_from_script > initiate_geometry_from_script",
        "text": "MotorCAD.initiate_geometry_from_script()\n\nInitiate the geometry from scripting so Motor-CAD knows how to use it.\n\nThis method clears the current scripting geometry.\nThe clear_all_data method must be called before this method is called.\n\nDeprecated since version 0.6.0: initiate_geometry_from_script will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.limit_arc_chord",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.limit_arc_chord.html#limit_arc_chord",
        "title": "limit_arc_chord",
        "section": "limit_arc_chord",
        "text": "Limit the chord height for arcs in a region.\nSubdivide arcs if required to ensure the arc’s chord height (the distance between the arc\nmidpoint and the midpoint of a line between the start and end) is lower than the specified\nvalue. This can be used to force a fine FEA mesh around entities with high curvature.\nThe maximum chord height allowed.\nlimit_arc_chord"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.limit_arc_chord",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.limit_arc_chord.html#ansys.motorcad.core.geometry.RegionMagnet.limit_arc_chord",
        "title": "limit_arc_chord > limit_arc_chord > limit_arc_chord",
        "section": "limit_arc_chord > limit_arc_chord",
        "text": "RegionMagnet.limit_arc_chord(max_chord_height)\n\nLimit the chord height for arcs in a region.\n\nSubdivide arcs if required to ensure the arc’s chord height (the distance between the arc\nmidpoint and the midpoint of a line between the start and end) is lower than the specified\nvalue. This can be used to force a fine FEA mesh around entities with high curvature.\n\nParameters:\n\nmax_chord_height: float\n\nThe maximum chord height allowed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.save_transient_temperatures",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.save_transient_temperatures.html#save_transient_temperatures",
        "title": "save_transient_temperatures",
        "section": "save_transient_temperatures",
        "text": "Save transient temperature results to a text file.\nText file separator defined using the\n\"ExportTextSeparator\" parameter (default is semicolon).\nsave_transient_temperatures\n\"ExportTextSeparator\""
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.save_transient_temperatures",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.save_transient_temperatures.html#ansys.motorcad.core.motorcad_methods.MotorCAD.save_transient_temperatures",
        "title": "save_transient_temperatures > save_transient_temperatures > save_transient_temperatures",
        "section": "save_transient_temperatures > save_transient_temperatures",
        "text": "MotorCAD.save_transient_temperatures(file_name)\n\nSave transient temperature results to a text file.\n\nText file separator defined using the\n\"ExportTextSeparator\" parameter (default is semicolon).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.mirror",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.mirror.html#mirror",
        "title": "mirror",
        "section": "mirror",
        "text": "Mirror region along entity.\nLine entity to mirror region about\nWhether to apply a unique name to returned region\nmirror\nansys.motorcad.core.geometry.Line\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.mirror",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.mirror.html#ansys.motorcad.core.geometry.RegionMagnet.mirror",
        "title": "mirror > mirror > mirror",
        "section": "mirror > mirror",
        "text": "RegionMagnet.mirror(mirror_line, unique_name=True)\n\nMirror region along entity.\n\nParameters\n\nmirror_line\n\nansys.motorcad.core.geometry.Line\n\nLine entity to mirror region about\n\nunique_name\n\nbool\n\nWhether to apply a unique name to returned region\n\nReturns\n\nansys.motorcad.core.geometry.Region\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoMultiForceCalculation",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoMultiForceCalculation.html#domultiforcecalculation",
        "title": "DoMultiForceCalculation",
        "section": "DoMultiForceCalculation",
        "text": "Deprecated function. Replaced by MotorCAD.do_multi_force_calculation().\nDoMultiForceCalculation\nMotorCAD.do_multi_force_calculation()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoMultiForceCalculation",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoMultiForceCalculation.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoMultiForceCalculation",
        "title": "DoMultiForceCalculation > DoMultiForceCalculation > DoMultiForceCalculation",
        "section": "DoMultiForceCalculation > DoMultiForceCalculation",
        "text": "MotorCADCompatibility.DoMultiForceCalculation()\n\nDeprecated function. Replaced by MotorCAD.do_multi_force_calculation().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AvoidImmediateUpdate",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AvoidImmediateUpdate.html#avoidimmediateupdate",
        "title": "AvoidImmediateUpdate",
        "section": "AvoidImmediateUpdate",
        "text": "Deprecated function.\nAvoidImmediateUpdate"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AvoidImmediateUpdate",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AvoidImmediateUpdate.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AvoidImmediateUpdate",
        "title": "AvoidImmediateUpdate > AvoidImmediateUpdate > AvoidImmediateUpdate",
        "section": "AvoidImmediateUpdate > AvoidImmediateUpdate",
        "text": "MotorCADCompatibility.AvoidImmediateUpdate(*args)\n\nDeprecated function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateIronLossCoefficients",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateIronLossCoefficients.html#calculateironlosscoefficients",
        "title": "CalculateIronLossCoefficients",
        "section": "CalculateIronLossCoefficients",
        "text": "Deprecated function. Replaced by MotorCAD.calculate_iron_loss_coefficients().\nCalculateIronLossCoefficients\nMotorCAD.calculate_iron_loss_coefficients()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateIronLossCoefficients",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateIronLossCoefficients.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateIronLossCoefficients",
        "title": "CalculateIronLossCoefficients > CalculateIronLossCoefficients > CalculateIronLossCoefficients",
        "section": "CalculateIronLossCoefficients > CalculateIronLossCoefficients",
        "text": "MotorCADCompatibility.CalculateIronLossCoefficients(*args)\n\nDeprecated function. Replaced by MotorCAD.calculate_iron_loss_coefficients().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_multi_force_calculation",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_multi_force_calculation.html#do_multi_force_calculation",
        "title": "do_multi_force_calculation",
        "section": "do_multi_force_calculation",
        "text": "Run the multiforce operating point calculation.\ndo_multi_force_calculation"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_multi_force_calculation",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_multi_force_calculation.html#ansys.motorcad.core.motorcad_methods.MotorCAD.do_multi_force_calculation",
        "title": "do_multi_force_calculation > do_multi_force_calculation > do_multi_force_calculation",
        "section": "do_multi_force_calculation > do_multi_force_calculation",
        "text": "MotorCAD.do_multi_force_calculation()\n\nRun the multiforce operating point calculation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveFEAData",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveFEAData.html#savefeadata",
        "title": "SaveFEAData",
        "section": "SaveFEAData",
        "text": "Deprecated function. Replaced by MotorCAD.save_fea_data().\nSaveFEAData\nMotorCAD.save_fea_data()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveFEAData",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveFEAData.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveFEAData",
        "title": "SaveFEAData > SaveFEAData > SaveFEAData",
        "section": "SaveFEAData > SaveFEAData",
        "text": "MotorCADCompatibility.SaveFEAData(*args)\n\nDeprecated function. Replaced by MotorCAD.save_fea_data().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.set_array_variable_2d",
        "href": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.set_array_variable_2d.html#set_array_variable_2d",
        "title": "set_array_variable_2d",
        "section": "set_array_variable_2d",
        "text": "Set the value of a 2D array at element [array_index1,array_index2].\nName of the array.\nFirst index of the array.\nSecond index of the array.\nValue to set the Motor-CAD variable to.\nset_array_variable_2d\n[array_index1,array_index2]\npython:str\npython:int\npython:int"
    },
    {
        "objectID": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.set_array_variable_2d",
        "href": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.set_array_variable_2d.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_array_variable_2d",
        "title": "set_array_variable_2d > set_array_variable_2d > set_array_variable_2d",
        "section": "set_array_variable_2d > set_array_variable_2d",
        "text": "MotorCAD.set_array_variable_2d(array_name, array_index1, array_index2, new_value)\n\nSet the value of a 2D array at element [array_index1,array_index2].\n\nParameters\n\narray_name\n\npython:str\n\nName of the array.\n\narray_index1\n\npython:int\n\nFirst index of the array.\n\narray_index2\n\npython:int\n\nSecond index of the array.\n\nnew_value\n\nint|float|str|bool\n\nValue to set the Motor-CAD variable to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearModelBuild_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearModelBuild_Lab.html#clearmodelbuild_lab",
        "title": "ClearModelBuild_Lab",
        "section": "ClearModelBuild_Lab",
        "text": "Deprecated function. Replaced by MotorCAD.clear_model_build_lab().\nClearModelBuild_Lab\nMotorCAD.clear_model_build_lab()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearModelBuild_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearModelBuild_Lab.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearModelBuild_Lab",
        "title": "ClearModelBuild_Lab > ClearModelBuild_Lab > ClearModelBuild_Lab",
        "section": "ClearModelBuild_Lab > ClearModelBuild_Lab",
        "text": "MotorCADCompatibility.ClearModelBuild_Lab()\n\nDeprecated function. Replaced by MotorCAD.clear_model_build_lab().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/troubleshooting",
        "href": "user_guide/troubleshooting.html#troubleshooting",
        "title": "Troubleshooting",
        "section": "Troubleshooting",
        "text": "Solutions for common PyMotorCAD issues:\nTroubleshooting"
    },
    {
        "objectID": "user_guide/troubleshooting",
        "href": "user_guide/troubleshooting.html#the-ui-is-not-updated-when-a-parameter-is-changed-via-automation",
        "title": "Troubleshooting > The UI is not updated when a parameter is changed via automation",
        "section": "The UI is not updated when a parameter is changed via automation",
        "text": "When changing model parameters via automation, Motor-CAD does not update the user interface with the new parameter value\nat every step, to speed up the scripting.\nHowever, this means that you should never change a parameter which is shown on the currently displayed tab.\nBest practice is to view the Scripting tab when changing any parameters within Motor-CAD using the command:\nThe UI is not updated when a parameter is changed via automation"
    },
    {
        "objectID": "user_guide/troubleshooting",
        "href": "user_guide/troubleshooting.html#error-messages-from-motor-cad-keep-interrupting-the-script",
        "title": "Troubleshooting > Error messages from Motor-CAD keep interrupting the script",
        "section": "Error messages from Motor-CAD keep interrupting the script",
        "text": "To turn off popups in Motor-CAD, use the command:\nThis ensures that no dialogues are shown by Motor-CAD.\nNote that this turns off ‘crucial’ popups, for example: prompts to save data or overwrite data, or dialogues used to\nreconcile differences in material data between the database and .mot file. In each case the default action is\ntaken. This setting persists until Motor-CAD is closed.\nTo get the contents of the messages, use the command:\nThe retrieved messages can then be parsed and used by the user.\nUsing a num_messages value of 0 retrieves all messages in history, as detailed in the method’s description.\nTo simplify future calls to get_messages(), it is useful to clear the message history after getting the messages,\nby using the command:\nError messages from Motor-CAD keep interrupting the script\nnum_messages\nget_messages()"
    },
    {
        "objectID": "user_guide/troubleshooting",
        "href": "user_guide/troubleshooting.html#the-wrong-version-of-motor-cad-launches",
        "title": "Troubleshooting > The wrong version of Motor-CAD launches",
        "section": "The wrong version of Motor-CAD launches",
        "text": "Automation automatically launches whichever version of Motor-CAD is registered.\nCheck the registration form to see which version is registered.\nThe wrong version of Motor-CAD launches"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.export_figure_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.export_figure_lab.html#export_figure_lab",
        "title": "export_figure_lab",
        "section": "export_figure_lab",
        "text": "Export an image of the Lab results graph.\nType of calculation. Options are \"Electromagnetic\", \"Thermal\",\n\"Generator\", \"Duty Cycle\", and \"Calibration\".\nVariable to plot on the Y axis (2D graphs) or Z axis (3D graphs). For\nexample, \"Shaft Torque\".\nName of the image file.\nexport_figure_lab\npython:str\n\"Electromagnetic\"\n\"Thermal\"\n\"Generator\"\n\"Duty Cycle\"\n\"Calibration\"\npython:str\n\"Shaft Torque\"\npython:str"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.export_figure_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.export_figure_lab.html#ansys.motorcad.core.motorcad_methods.MotorCAD.export_figure_lab",
        "title": "export_figure_lab > export_figure_lab > export_figure_lab",
        "section": "export_figure_lab > export_figure_lab",
        "text": "MotorCAD.export_figure_lab(calculation_type, variable, file_name)\n\nExport an image of the Lab results graph.\n\nParameters\n\ncalculation_type\n\npython:str\n\nType of calculation. Options are \"Electromagnetic\", \"Thermal\",\n\"Generator\", \"Duty Cycle\", and \"Calibration\".\n\nvariable\n\npython:str\n\nVariable to plot on the Y axis (2D graphs) or Z axis (3D graphs). For\nexample, \"Shaft Torque\".\n\nfile_name\n\npython:str\n\nName of the image file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/internal_scripting",
        "href": "user_guide/internal_scripting.html#motor-cad-internal-scripting-tab",
        "title": "Motor-CAD internal Scripting tab",
        "section": "Motor-CAD internal Scripting tab",
        "text": "The Scripting tab in Motor-CAD facilitates creating, editing, loading, and\nsaving internal Python scripts within Motor-CAD.\nFrom the Scripting tab in Motor-CAD, you can connect from an internal script by\naccessing the MotorCAD() object with this code:\nWith the ref_MotorCAD_object, you can use PyMotorCAD methods to send commands\nto the current Motor-CAD instance. For example, you can set and get values before,\nduring, and after calculations. You can also create a script for Motor-CAD automation.\nIn the following image, the Scripting tab shows the demo script. You can use this\ndefault script as a starting point for scripting internally in Motor-CAD. However, you\ncan also add and run any Python script from this tab.\nMotor-CAD internal Scripting tab\nMotorCAD()"
    },
    {
        "objectID": "user_guide/internal_scripting",
        "href": "user_guide/internal_scripting.html#demo-script-example",
        "title": "Motor-CAD internal Scripting tab > Demo script example",
        "section": "Demo script example",
        "text": "The demo script is shown by default on the Scripting tab in Moto-CAD to\nproviding examples of how you use PyMotorCAD methods and Motor-CAD automation\nparameters.\nFor more information, see the Motor-CAD Automation tutorial (section 2.iii),\nprovided with the Motor-CAD installation.\nDemo script example"
    },
    {
        "objectID": "user_guide/internal_scripting",
        "href": "user_guide/internal_scripting.html#setup",
        "title": "Motor-CAD internal Scripting tab > Setup",
        "section": "Setup",
        "text": "Import pymotorcad to access Motor-CAD.\nConnect to Motor-CAD.\nSetup\npymotorcad"
    },
    {
        "objectID": "user_guide/internal_scripting",
        "href": "user_guide/internal_scripting.html#main-function",
        "title": "Motor-CAD internal Scripting tab > Main function",
        "section": "Main function",
        "text": "The main function is called when Run is pressed in the Motor-CAD GUI.\nYou can use the main function to test other functions before running a\ncalculation. For example, you can use it to run the thermal_steady() and\ninitial() functions. You can also use it to run calculations within another\ndefined function, such as the demo_func function.\nMain function\nmain\nmain\nthermal_steady()\ninitial()\ndemo_func"
    },
    {
        "objectID": "user_guide/internal_scripting",
        "href": "user_guide/internal_scripting.html#demo-function",
        "title": "Motor-CAD internal Scripting tab > Demo function",
        "section": "Demo function",
        "text": "The defined demo_func function sets the tooth_width function and\nruns thermal calculations.\nAll messages are set to display in a separate window using this PyMotorCAD method:\nmcApp.set_variable(\"MessageDisplayState\", 2)\nand overwrite data. Ensure that this is the desired behavior.\nThe demo_func function defines a range of values for the tooth_width\nfunction, runs a steady state thermal calculation, and gets the average winding\ntemperature for each. Results are shown in the message window.\nThe last line of the function resets the message window.\nDemo function\ndemo_func\ntooth_width\nmcApp.set_variable(\"MessageDisplayState\", 2)\ndemo_func\ntooth_width"
    },
    {
        "objectID": "user_guide/internal_scripting",
        "href": "user_guide/internal_scripting.html#functions-run-during-calculations",
        "title": "Motor-CAD internal Scripting tab > Functions run during calculations",
        "section": "Functions run during calculations",
        "text": "The previously described functions run only when the Run During Analysis option\nis selected from the Scripting -> Settings tab in Motor-CAD. (This option appears\nunder the Script Control heading.)\nIf the Run During Analysis option is selected, the script is imported.\nThis means that anything other than setting up the MotorCAD object should\nbe moved to a function or class to avoid unexpected behavior.\nFive classes are defined: thermal_steady, thermal_transient,\nemagnetic, mechanical_stress and mechanical_forces.\nEach of these classes contains the initial and final functions.\nThe thermal classes also contain the main function.\ninitial is called before the calculation.\nfinal is called after the calculation.\nmain is called before each time step in a calculation.\nThe thermal_steady class contains functions for steady-state\nthermal calculations:\nThe thermal_transient class contains functions for transient\nthermal calculations:\nThe emagnetic class contains functions for E-Magnetic calculations:\nThe mechanical_stress class contains functions for Mechanical stress calculations:\nThe mechanical_forces class contains functions for Mechanical force calculations:\nFor any scripts that are to be run before, during, or after a particular Motor-CAD\ncalculation, these functions can be added to the relevant functions.\nFunctions run during calculations\nMotorCAD\nthermal_steady\nthermal_transient\nemagnetic\nmechanical_stress\nmechanical_forces\ninitial\nfinal\nmain\ninitial\nfinal\nmain\nthermal_steady\nthermal_transient\nemagnetic\nmechanical_stress\nmechanical_forces"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetVisible",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetVisible.html#setvisible",
        "title": "SetVisible",
        "section": "SetVisible",
        "text": "Deprecated function. Replaced by MotorCAD.set_visible().\nSetVisible\nMotorCAD.set_visible()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetVisible",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetVisible.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetVisible",
        "title": "SetVisible > SetVisible > SetVisible",
        "section": "SetVisible > SetVisible",
        "text": "MotorCADCompatibility.SetVisible(*args)\n\nDeprecated function. Replaced by MotorCAD.set_visible().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.show_results_viewer_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.show_results_viewer_lab.html#show_results_viewer_lab",
        "title": "show_results_viewer_lab",
        "section": "show_results_viewer_lab",
        "text": "Load the results viewer for the specified Lab calculation type.\nType of calculation. Options are \"Electromagnetic\", \"Thermal\",\n\"Generator\", \"Duty Cycle\", and \"Calibration\".\nshow_results_viewer_lab\npython:str\n\"Electromagnetic\"\n\"Thermal\"\n\"Generator\"\n\"Duty Cycle\"\n\"Calibration\""
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.show_results_viewer_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.show_results_viewer_lab.html#ansys.motorcad.core.motorcad_methods.MotorCAD.show_results_viewer_lab",
        "title": "show_results_viewer_lab > show_results_viewer_lab > show_results_viewer_lab",
        "section": "show_results_viewer_lab > show_results_viewer_lab",
        "text": "MotorCAD.show_results_viewer_lab(calculation_type)\n\nLoad the results viewer for the specified Lab calculation type.\n\nParameters\n\ncalculation_type\n\npython:str\n\nType of calculation. Options are \"Electromagnetic\", \"Thermal\",\n\"Generator\", \"Duty Cycle\", and \"Calibration\".\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.create_report",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.create_report.html#create_report",
        "title": "create_report",
        "section": "create_report",
        "text": "Create a Word report of the report tree structure.\nFilepath for the Word report. Use the r'filepath'\nsyntax to force Python to ignore special characters.\nFilepath for the template file. Use the r'filepath'\nsyntax to force Python to ignore special characters.\ncreate_report\npython:str\nr'filepath'\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.create_report",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.create_report.html#ansys.motorcad.core.motorcad_methods.MotorCAD.create_report",
        "title": "create_report > create_report > create_report",
        "section": "create_report > create_report",
        "text": "MotorCAD.create_report(file_path, template_file_path)\n\nCreate a Word report of the report tree structure.\n\nParameters\n\nfile_path\n\npython:str\n\nFilepath for the Word report. Use the r'filepath'\nsyntax to force Python to ignore special characters.\n\ntemplate_file_path\n\npython:str\n\nFilepath for the template file. Use the r'filepath'\nsyntax to force Python to ignore special characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/internal_scripting/thermal_transient",
        "href": "examples/internal_scripting/thermal_transient.html#thermal-transient",
        "title": "Thermal transient",
        "section": "Thermal transient",
        "text": "This example demonstrates internal scripting thermal transient functionality\nPerform required imports\nLaunch Motor-CAD\nThermal transient"
    },
    {
        "objectID": "examples/internal_scripting/thermal_transient",
        "href": "examples/internal_scripting/thermal_transient.html#note",
        "title": "Thermal transient > Note",
        "section": "Note",
        "text": "For more information about transient thermal analysis, see the Scripting Control In\nDuty Cycle tutorial, installed under\nC:ANSYS_Motor-CADVersionNumberTutorialsScripting_Control_In_Duty_Cycle.\nNote"
    },
    {
        "objectID": "examples/internal_scripting/thermal_transient",
        "href": "examples/internal_scripting/thermal_transient.html#pymotorcad-documentation-example",
        "title": "Thermal transient > PyMotorCAD Documentation Example",
        "section": "PyMotorCAD Documentation Example",
        "text": "(Used for the PyMotorCAD Documentation Examples only)\nTotal running time of the script: (1 minutes 42.377 seconds)\nDownload Jupyter notebook: thermal_transient.ipynb\nDownload Python source code: thermal_transient.py\nDownload zipped: thermal_transient.zip\nGallery generated by Sphinx-Gallery\nPyMotorCAD Documentation Example\nDownload Jupyter notebook: thermal_transient.ipynb\nDownload Python source code: thermal_transient.py\nDownload zipped: thermal_transient.zip"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadExternalModel_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadExternalModel_Lab.html#loadexternalmodel_lab",
        "title": "LoadExternalModel_Lab",
        "section": "LoadExternalModel_Lab",
        "text": "Deprecated function. Replaced by MotorCAD.load_external_model_lab().\nLoadExternalModel_Lab\nMotorCAD.load_external_model_lab()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadExternalModel_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadExternalModel_Lab.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadExternalModel_Lab",
        "title": "LoadExternalModel_Lab > LoadExternalModel_Lab > LoadExternalModel_Lab",
        "section": "LoadExternalModel_Lab > LoadExternalModel_Lab",
        "text": "MotorCADCompatibility.LoadExternalModel_Lab(*args)\n\nDeprecated function. Replaced by MotorCAD.load_external_model_lab().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ModifyNode",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ModifyNode.html#modifynode",
        "title": "ModifyNode",
        "section": "ModifyNode",
        "text": "Deprecated function. Replaced by MotorCAD.modify_node().\nModifyNode\nMotorCAD.modify_node()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ModifyNode",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ModifyNode.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ModifyNode",
        "title": "ModifyNode > ModifyNode > ModifyNode",
        "section": "ModifyNode > ModifyNode",
        "text": "MotorCADCompatibility.ModifyNode(*args)\n\nDeprecated function. Replaced by MotorCAD.modify_node().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodePower",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodePower.html#getnodepower",
        "title": "GetNodePower",
        "section": "GetNodePower",
        "text": "Deprecated function. Replaced by MotorCAD.get_node_power().\nGetNodePower\nMotorCAD.get_node_power()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodePower",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodePower.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodePower",
        "title": "GetNodePower > GetNodePower > GetNodePower",
        "section": "GetNodePower > GetNodePower",
        "text": "MotorCADCompatibility.GetNodePower(*args)\n\nDeprecated function. Replaced by MotorCAD.get_node_power().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.geometry_export",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.geometry_export.html#geometry_export",
        "title": "geometry_export",
        "section": "geometry_export",
        "text": "Export the geometry to the file specified in the DXFFileName parameter.\ngeometry_export\nDXFFileName"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.geometry_export",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.geometry_export.html#ansys.motorcad.core.motorcad_methods.MotorCAD.geometry_export",
        "title": "geometry_export > geometry_export > geometry_export",
        "section": "geometry_export > geometry_export",
        "text": "MotorCAD.geometry_export()\n\nExport the geometry to the file specified in the DXFFileName parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.mirror",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.mirror.html#mirror",
        "title": "mirror",
        "section": "mirror",
        "text": "Mirror region along entity.\nLine entity to mirror region about\nWhether to apply a unique name to returned region\nmirror\nansys.motorcad.core.geometry.Line\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.mirror",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.mirror.html#ansys.motorcad.core.geometry.Region.mirror",
        "title": "mirror > mirror > mirror",
        "section": "mirror > mirror",
        "text": "Region.mirror(mirror_line, unique_name=True)\n\nMirror region along entity.\n\nParameters\n\nmirror_line\n\nansys.motorcad.core.geometry.Line\n\nLine entity to mirror region about\n\nunique_name\n\nbool\n\nWhether to apply a unique name to returned region\n\nReturns\n\nansys.motorcad.core.geometry.Region\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.singular",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.singular.html#singular",
        "title": "singular",
        "section": "singular",
        "text": "Get or set if region is singular.\nsingular"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.singular",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.singular.html#ansys.motorcad.core.geometry.RegionMagnet.singular",
        "title": "singular > singular > singular",
        "section": "singular > singular",
        "text": "property RegionMagnet.singular\n\nGet or set if region is singular.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveToFile",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveToFile.html#savetofile",
        "title": "SaveToFile",
        "section": "SaveToFile",
        "text": "Deprecated function. Replaced by MotorCAD.save_to_file().\nSaveToFile\nMotorCAD.save_to_file()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveToFile",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveToFile.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveToFile",
        "title": "SaveToFile > SaveToFile > SaveToFile",
        "section": "SaveToFile > SaveToFile",
        "text": "MotorCADCompatibility.SaveToFile(*args)\n\nDeprecated function. Replaced by MotorCAD.save_to_file().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.replace",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.replace.html#replace",
        "title": "replace",
        "section": "replace",
        "text": "Replace self with another region.\nThis method replaces region entities with entities from the replacement region object,\nsuch as an imported DXF region.\nMotor-CAD region object whose entities are to replace those of the\nexisting region.\nreplace\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.replace",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.replace.html#ansys.motorcad.core.geometry.RegionMagnet.replace",
        "title": "replace > replace > replace",
        "section": "replace > replace",
        "text": "RegionMagnet.replace(replacement_region)\n\nReplace self with another region.\n\nThis method replaces region entities with entities from the replacement region object,\nsuch as an imported DXF region.\n\nParameters\n\nreplacement_region\n\nansys.motorcad.core.geometry.Region\n\nMotor-CAD region object whose entities are to replace those of the\nexisting region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetArrayVariable",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetArrayVariable.html#getarrayvariable",
        "title": "GetArrayVariable",
        "section": "GetArrayVariable",
        "text": "Deprecated function. Replaced by MotorCAD.get_array_variable().\nGetArrayVariable\nMotorCAD.get_array_variable()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetArrayVariable",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetArrayVariable.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetArrayVariable",
        "title": "GetArrayVariable > GetArrayVariable > GetArrayVariable",
        "section": "GetArrayVariable > GetArrayVariable",
        "text": "MotorCADCompatibility.GetArrayVariable(*args)\n\nDeprecated function. Replaced by MotorCAD.get_array_variable().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.extend",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.extend.html#extend",
        "title": "extend",
        "section": "extend",
        "text": "Extend list by appending elements from the iterable.\nextend"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.extend",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.extend.html#ansys.motorcad.core.geometry.EntityList.extend",
        "title": "extend > extend > extend",
        "section": "extend > extend",
        "text": "EntityList.extend(iterable, /)\n\nExtend list by appending elements from the iterable.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.from_coordinates",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.from_coordinates.html#from_coordinates",
        "title": "from_coordinates",
        "section": "from_coordinates",
        "text": "Take three coordinates and converts to an arc.\nStart coordinate of Arc.\nCoordinate which arc will intersect.\nEnd coordinate of Arc.\nfrom_coordinates"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.from_coordinates",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.from_coordinates.html#ansys.motorcad.core.geometry.Arc.from_coordinates",
        "title": "from_coordinates > from_coordinates > from_coordinates",
        "section": "from_coordinates > from_coordinates",
        "text": "classmethod Arc.from_coordinates(start_point, intersection_point, end_point)\n\nTake three coordinates and converts to an arc.\n\nParameters\n\nstart_point: ansys.motorcad.core.geometry.Coordinate\n\nStart coordinate of Arc.\n\nintersection_point: ansys.motorcad.core.geometry.Coordinate\n\nCoordinate which arc will intersect.\n\nend_point: ansys.motorcad.core.geometry.Coordinate\n\nEnd coordinate of Arc.\n\nReturns\n\n\n\n——-\n\n\n\nansys.motorcad.core.geometry.Arc\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.RestoreCompatibilitySettings",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.RestoreCompatibilitySettings.html#restorecompatibilitysettings",
        "title": "RestoreCompatibilitySettings",
        "section": "RestoreCompatibilitySettings",
        "text": "Deprecated function. Replaced by MotorCAD.restore_compatibility_settings().\nRestoreCompatibilitySettings\nMotorCAD.restore_compatibility_settings()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.RestoreCompatibilitySettings",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.RestoreCompatibilitySettings.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.RestoreCompatibilitySettings",
        "title": "RestoreCompatibilitySettings > RestoreCompatibilitySettings > RestoreCompatibilitySettings",
        "section": "RestoreCompatibilitySettings > RestoreCompatibilitySettings",
        "text": "MotorCADCompatibility.RestoreCompatibilitySettings()\n\nDeprecated function. Replaced by MotorCAD.restore_compatibility_settings().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.insert",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.insert.html#insert",
        "title": "insert",
        "section": "insert",
        "text": "Insert object before index.\ninsert"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.insert",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.insert.html#ansys.motorcad.core.geometry.EntityList.insert",
        "title": "insert > insert > insert",
        "section": "insert > insert",
        "text": "EntityList.insert(index, object, /)\n\nInsert object before index.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.download_mot_file",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.download_mot_file.html#download_mot_file",
        "title": "download_mot_file",
        "section": "download_mot_file",
        "text": "Download the current .mot file from Motor-CAD and write it to a local directory.\nThis allows users to download .mot files to a local directory from a Motor-CAD instance\non a remote machine. Equivalent of save_file() for remote machines.\nFull path to the mot file, including the file name and .mot extension.\nUse the r'filepath' syntax to force Python to ignore special characters.\ndownload_mot_file\nsave_file()\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.download_mot_file",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.download_mot_file.html#ansys.motorcad.core.motorcad_methods.MotorCAD.download_mot_file",
        "title": "download_mot_file > download_mot_file > download_mot_file",
        "section": "download_mot_file > download_mot_file",
        "text": "MotorCAD.download_mot_file(file_path)\n\nDownload the current .mot file from Motor-CAD and write it to a local directory.\n\nThis allows users to download .mot files to a local directory from a Motor-CAD instance\non a remote machine. Equivalent of save_file() for remote machines.\n\nParameters\n\nfile_path\n\npython:str\n\nFull path to the mot file, including the file name and .mot extension.\nUse the r'filepath' syntax to force Python to ignore special characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetTemperatureGraphPoint",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetTemperatureGraphPoint.html#gettemperaturegraphpoint",
        "title": "GetTemperatureGraphPoint",
        "section": "GetTemperatureGraphPoint",
        "text": "Deprecated function. Replaced by MotorCAD.get_temperature_graph_point().\nGetTemperatureGraphPoint\nMotorCAD.get_temperature_graph_point()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetTemperatureGraphPoint",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetTemperatureGraphPoint.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetTemperatureGraphPoint",
        "title": "GetTemperatureGraphPoint > GetTemperatureGraphPoint > GetTemperatureGraphPoint",
        "section": "GetTemperatureGraphPoint > GetTemperatureGraphPoint",
        "text": "MotorCADCompatibility.GetTemperatureGraphPoint(*args)\n\nDeprecated function. Replaced by MotorCAD.get_temperature_graph_point().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.rotate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.rotate.html#rotate",
        "title": "rotate",
        "section": "rotate",
        "text": "Rotate Region around a point for a given angle.\npoint to rotate Coordinate around.\nAngle of rotation in degrees. Anticlockwise direction is positive.\nrotate\nCoordinate\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.rotate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.rotate.html#ansys.motorcad.core.geometry.Region.rotate",
        "title": "rotate > rotate > rotate",
        "section": "rotate > rotate",
        "text": "Region.rotate(centre_point, angle)\n\nRotate Region around a point for a given angle.\n\nParameters\n\ncentre_point\n\nCoordinate\n\npoint to rotate Coordinate around.\n\nangle\n\npython:float\n\nAngle of rotation in degrees. Anticlockwise direction is positive.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.disable_error_messages",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.disable_error_messages.html#disable_error_messages",
        "title": "disable_error_messages",
        "section": "disable_error_messages",
        "text": "Disable the display of error messages.\nWhether to disable the display of error message. If True,\nerror messages are hidden. If False, error messages are\nshown.\ndisable_error_messages\nTrue\nFalse"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.disable_error_messages",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.disable_error_messages.html#ansys.motorcad.core.motorcad_methods.MotorCAD.disable_error_messages",
        "title": "disable_error_messages > disable_error_messages > disable_error_messages",
        "section": "disable_error_messages > disable_error_messages",
        "text": "MotorCAD.disable_error_messages(active)\n\nDisable the display of error messages.\n\nParameters\n\nactive\n\nbool\n\nWhether to disable the display of error message. If True,\nerror messages are hidden. If False, error messages are\nshown.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DisableErrorMessages",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DisableErrorMessages.html#disableerrormessages",
        "title": "DisableErrorMessages",
        "section": "DisableErrorMessages",
        "text": "Deprecated function. Replaced by MotorCAD.disable_error_messages().\nDisableErrorMessages\nMotorCAD.disable_error_messages()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DisableErrorMessages",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DisableErrorMessages.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DisableErrorMessages",
        "title": "DisableErrorMessages > DisableErrorMessages > DisableErrorMessages",
        "section": "DisableErrorMessages > DisableErrorMessages",
        "text": "MotorCADCompatibility.DisableErrorMessages(*args)\n\nDeprecated function. Replaced by MotorCAD.disable_error_messages().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.html#regiontype",
        "title": "RegionType",
        "section": "RegionType",
        "text": "Provides an enumeration for storing Motor-CAD region types.\nRegionType.stator\n\nRegionType.rotor\n\nRegionType.slot_area_stator\n\nRegionType.slot_area_stator_deprecated\n\nRegionType.slot_area_rotor\n\nRegionType.slot_split\n\nRegionType.stator_liner\n\nRegionType.rotor_liner\n\nRegionType.wedge\n\nRegionType.stator_duct\n\nRegionType.housing\n\nRegionType.housing_magnetic\n\nRegionType.stator_impreg\n\nRegionType.impreg_gap\n\nRegionType.stator_copper\n\nRegionType.stator_copper_ins\n\nRegionType.stator_divider\n\nRegionType.stator_slot_spacer\n\nRegionType.stator_separator\n\nRegionType.coil_insulation\n\nRegionType.stator_air\n\nRegionType.rotor_hub\n\nRegionType.rotor_air\n\nRegionType.rotor_air_exc_liner\n\nRegionType.rotor_pocket\n\nRegionType.pole_spacer\n\nRegionType.rotor_slot\n\nRegionType.coil_separator\n\nRegionType.damper_bar\n\nRegionType.wedge_rotor\n\nRegionType.rotor_divider\n\nRegionType.rotor_copper_ins\n\nRegionType.rotor_copper\n\nRegionType.rotor_impreg\n\nRegionType.shaft\n\nRegionType.axle\n\nRegionType.rotor_duct\n\nRegionType.magnet\n\nRegionType.barrier\n\nRegionType.mounting_base\n\nRegionType.mounting_plate\n\nRegionType.banding\n\nRegionType.sleeve\n\nRegionType.rotor_cover\n\nRegionType.slot_wj_insulation\n\nRegionType.slot_wj_wall\n\nRegionType.slot_wj_duct\n\nRegionType.slot_wj_duct_no_detail\n\nRegionType.cowling\n\nRegionType.cowling_gril\n\nRegionType.brush\n\nRegionType.commutator\n\nRegionType.airgap\n\nRegionType.dxf_import\n\nRegionType.impreg_loss_lot_ac_loss\n\nRegionType.adaptive\n\nRegionType\nRegionType.stator\nRegionType.rotor\nRegionType.slot_area_stator\nRegionType.slot_area_stator_deprecated\nRegionType.slot_area_rotor\nRegionType.slot_split\nRegionType.stator_liner\nRegionType.rotor_liner\nRegionType.wedge\nRegionType.stator_duct\nRegionType.housing\nRegionType.housing_magnetic\nRegionType.stator_impreg\nRegionType.impreg_gap\nRegionType.stator_copper\nRegionType.stator_copper_ins\nRegionType.stator_divider\nRegionType.stator_slot_spacer\nRegionType.stator_separator\nRegionType.coil_insulation\nRegionType.stator_air\nRegionType.rotor_hub\nRegionType.rotor_air\nRegionType.rotor_air_exc_liner\nRegionType.rotor_pocket\nRegionType.pole_spacer\nRegionType.rotor_slot\nRegionType.coil_separator\nRegionType.damper_bar\nRegionType.wedge_rotor\nRegionType.rotor_divider\nRegionType.rotor_copper_ins\nRegionType.rotor_copper\nRegionType.rotor_impreg\nRegionType.shaft\nRegionType.axle\nRegionType.rotor_duct\nRegionType.magnet\nRegionType.barrier\nRegionType.mounting_base\nRegionType.mounting_plate\nRegionType.banding\nRegionType.sleeve\nRegionType.rotor_cover\nRegionType.slot_wj_insulation\nRegionType.slot_wj_wall\nRegionType.slot_wj_duct\nRegionType.slot_wj_duct_no_detail\nRegionType.cowling\nRegionType.cowling_gril\nRegionType.brush\nRegionType.commutator\nRegionType.airgap\nRegionType.dxf_import\nRegionType.impreg_loss_lot_ac_loss\nRegionType.adaptive"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.html#ansys.motorcad.core.geometry.RegionType",
        "title": "RegionType > RegionType > RegionType",
        "section": "RegionType > RegionType",
        "text": "class ansys.motorcad.core.geometry.RegionType(value)\n\nProvides an enumeration for storing Motor-CAD region types.\n\n!! processed by numpydoc !!\n\nAttributes\n\n\n\n\n\n\n\nRegionType.stator\n\n\n\nRegionType.rotor\n\n\n\nRegionType.slot_area_stator\n\n\n\nRegionType.slot_area_stator_deprecated\n\n\n\nRegionType.slot_area_rotor\n\n\n\nRegionType.slot_split\n\n\n\nRegionType.stator_liner\n\n\n\nRegionType.rotor_liner\n\n\n\nRegionType.wedge\n\n\n\nRegionType.stator_duct\n\n\n\nRegionType.housing\n\n\n\nRegionType.housing_magnetic\n\n\n\nRegionType.stator_impreg\n\n\n\nRegionType.impreg_gap\n\n\n\nRegionType.stator_copper\n\n\n\nRegionType.stator_copper_ins\n\n\n\nRegionType.stator_divider\n\n\n\nRegionType.stator_slot_spacer\n\n\n\nRegionType.stator_separator\n\n\n\nRegionType.coil_insulation\n\n\n\nRegionType.stator_air\n\n\n\nRegionType.rotor_hub\n\n\n\nRegionType.rotor_air\n\n\n\nRegionType.rotor_air_exc_liner\n\n\n\nRegionType.rotor_pocket\n\n\n\nRegionType.pole_spacer\n\n\n\nRegionType.rotor_slot\n\n\n\nRegionType.coil_separator\n\n\n\nRegionType.damper_bar\n\n\n\nRegionType.wedge_rotor\n\n\n\nRegionType.rotor_divider\n\n\n\nRegionType.rotor_copper_ins\n\n\n\nRegionType.rotor_copper\n\n\n\nRegionType.rotor_impreg\n\n\n\nRegionType.shaft\n\n\n\nRegionType.axle\n\n\n\nRegionType.rotor_duct\n\n\n\nRegionType.magnet\n\n\n\nRegionType.barrier\n\n\n\nRegionType.mounting_base\n\n\n\nRegionType.mounting_plate\n\n\n\nRegionType.banding\n\n\n\nRegionType.sleeve\n\n\n\nRegionType.rotor_cover\n\n\n\nRegionType.slot_wj_insulation\n\n\n\nRegionType.slot_wj_wall\n\n\n\nRegionType.slot_wj_duct\n\n\n\nRegionType.slot_wj_duct_no_detail\n\n\n\nRegionType.cowling\n\n\n\nRegionType.cowling_gril\n\n\n\nRegionType.brush\n\n\n\nRegionType.commutator\n\n\n\nRegionType.airgap\n\n\n\nRegionType.dxf_import\n\n\n\nRegionType.impreg_loss_lot_ac_loss\n\n\n\nRegionType.adaptive\n\n\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.parent_name",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.parent_name.html#parent_name",
        "title": "parent_name",
        "section": "parent_name",
        "text": "Get or set the region parent name.\nparent_name"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.parent_name",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.parent_name.html#ansys.motorcad.core.geometry.RegionMagnet.parent_name",
        "title": "parent_name > parent_name > parent_name",
        "section": "parent_name > parent_name",
        "text": "property RegionMagnet.parent_name\n\nGet or set the region parent name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_graph_point",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_graph_point.html#get_magnetic_graph_point",
        "title": "get_magnetic_graph_point",
        "section": "get_magnetic_graph_point",
        "text": "Get a point from a Motor-CAD magnetic graph.\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\nPoint number to retrieve the x and y coordinate values from.\nValue of the x coordinate from the graph.\nValue of the y coordinate from the graph.\nget_magnetic_graph_point\npython:str\npython:int\npython:int\npython:float\npython:float"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_graph_point",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_graph_point.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_graph_point",
        "title": "get_magnetic_graph_point > get_magnetic_graph_point > get_magnetic_graph_point",
        "section": "get_magnetic_graph_point > get_magnetic_graph_point",
        "text": "MotorCAD.get_magnetic_graph_point(graph_name, point_number)\n\nGet a point from a Motor-CAD magnetic graph.\n\nParameters\n\ngraph_name\n\npython:str, python:int\n\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\n\npoint_number\n\npython:int\n\nPoint number to retrieve the x and y coordinate values from.\n\nReturns\n\nxValue\n\npython:float\n\nValue of the x coordinate from the graph.\n\nyValue\n\npython:float\n\nValue of the y coordinate from the graph.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_3d_graph",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_3d_graph.html#get_magnetic_3d_graph",
        "title": "get_magnetic_3d_graph",
        "section": "get_magnetic_3d_graph",
        "text": "Get graph points from a Motor-CAD Magnetic 3d graph.\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\nWhich skew slice to get results from. Slice 1 is the first.\nClass containing x, y and data as lists\nget_magnetic_3d_graph\npython:str\npython:int\npython:int\nMagnetic3dGraph"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_3d_graph",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_3d_graph.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_3d_graph",
        "title": "get_magnetic_3d_graph > get_magnetic_3d_graph > get_magnetic_3d_graph",
        "section": "get_magnetic_3d_graph > get_magnetic_3d_graph",
        "text": "MotorCAD.get_magnetic_3d_graph(graph_name, slice_number)\n\nGet graph points from a Motor-CAD Magnetic 3d graph.\n\nParameters\n\ngraph_name\n\npython:str, python:int\n\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\n\nslice_number\n\npython:int\n\nWhich skew slice to get results from. Slice 1 is the first.\n\nReturns\n\nMagnetic3dGraph\n\nClass containing x, y and data as lists\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_divider",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_divider.html#stator_divider",
        "title": "stator_divider",
        "section": "stator_divider",
        "text": "stator_divider"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_divider",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_divider.html#ansys.motorcad.core.geometry.RegionType.stator_divider",
        "title": "stator_divider > stator_divider > stator_divider",
        "section": "stator_divider > stator_divider",
        "text": "RegionType.stator_divider = 'Stator Divider'\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.y_intercept",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.y_intercept.html#y_intercept",
        "title": "y_intercept",
        "section": "y_intercept",
        "text": "Get y intercept of line - B in equation (y = Ax + B).\ny_intercept\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.y_intercept",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.y_intercept.html#ansys.motorcad.core.geometry.Line.y_intercept",
        "title": "y_intercept > y_intercept > y_intercept",
        "section": "y_intercept > y_intercept",
        "text": "property Line.y_intercept\n\nGet y intercept of line - B in equation (y = Ax + B).\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetLicence",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetLicence.html#getlicence",
        "title": "GetLicence",
        "section": "GetLicence",
        "text": "Deprecated function. Replaced by MotorCAD.get_licence().\nGetLicence\nMotorCAD.get_licence()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetLicence",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetLicence.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetLicence",
        "title": "GetLicence > GetLicence > GetLicence",
        "section": "GetLicence > GetLicence",
        "text": "MotorCADCompatibility.GetLicence()\n\nDeprecated function. Replaced by MotorCAD.get_licence().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_drawing/ansys.motorcad.core.geometry_drawing.draw_objects_debug",
        "href": "methods/_autosummary_geometry_drawing/ansys.motorcad.core.geometry_drawing.draw_objects_debug.html#draw_objects_debug",
        "title": "draw_objects_debug",
        "section": "draw_objects_debug",
        "text": "Draw regions on plot if not being run in Motor-CAD.\nentities to draw\ndraw_objects_debug\nList\nof\nobjects"
    },
    {
        "objectID": "methods/_autosummary_geometry_drawing/ansys.motorcad.core.geometry_drawing.draw_objects_debug",
        "href": "methods/_autosummary_geometry_drawing/ansys.motorcad.core.geometry_drawing.draw_objects_debug.html#ansys.motorcad.core.geometry_drawing.draw_objects_debug",
        "title": "draw_objects_debug > draw_objects_debug > draw_objects_debug",
        "section": "draw_objects_debug > draw_objects_debug",
        "text": "ansys.motorcad.core.geometry_drawing.draw_objects_debug(objects)\n\nDraw regions on plot if not being run in Motor-CAD.\n\nParameters\n\nobjects\n\nList of objects\n\nentities to draw\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateMagnetic_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateMagnetic_Lab.html#calculatemagnetic_lab",
        "title": "CalculateMagnetic_Lab",
        "section": "CalculateMagnetic_Lab",
        "text": "Deprecated function. Replaced by MotorCAD.calculate_magnetic_lab().\nCalculateMagnetic_Lab\nMotorCAD.calculate_magnetic_lab()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateMagnetic_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateMagnetic_Lab.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateMagnetic_Lab",
        "title": "CalculateMagnetic_Lab > CalculateMagnetic_Lab > CalculateMagnetic_Lab",
        "section": "CalculateMagnetic_Lab > CalculateMagnetic_Lab",
        "text": "MotorCADCompatibility.CalculateMagnetic_Lab()\n\nDeprecated function. Replaced by MotorCAD.calculate_magnetic_lab().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_drawing/ansys.motorcad.core.geometry_drawing.draw_objects",
        "href": "methods/_autosummary_geometry_drawing/ansys.motorcad.core.geometry_drawing.draw_objects.html#draw_objects",
        "title": "draw_objects",
        "section": "draw_objects",
        "text": "Draw geometry objects on a plot.\ndraw_objects"
    },
    {
        "objectID": "methods/_autosummary_geometry_drawing/ansys.motorcad.core.geometry_drawing.draw_objects",
        "href": "methods/_autosummary_geometry_drawing/ansys.motorcad.core.geometry_drawing.draw_objects.html#ansys.motorcad.core.geometry_drawing.draw_objects",
        "title": "draw_objects > draw_objects > draw_objects",
        "section": "draw_objects > draw_objects",
        "text": "ansys.motorcad.core.geometry_drawing.draw_objects(objects)\n\nDraw geometry objects on a plot.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GeometryExport",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GeometryExport.html#geometryexport",
        "title": "GeometryExport",
        "section": "GeometryExport",
        "text": "Deprecated function. Replaced by MotorCAD.geometry_export().\nGeometryExport\nMotorCAD.geometry_export()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GeometryExport",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GeometryExport.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GeometryExport",
        "title": "GeometryExport > GeometryExport > GeometryExport",
        "section": "GeometryExport > GeometryExport",
        "text": "MotorCADCompatibility.GeometryExport()\n\nDeprecated function. Replaced by MotorCAD.geometry_export().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.pole_spacer",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.pole_spacer.html#pole_spacer",
        "title": "pole_spacer",
        "section": "pole_spacer",
        "text": "pole_spacer"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.pole_spacer",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.pole_spacer.html#ansys.motorcad.core.geometry.RegionType.pole_spacer",
        "title": "pole_spacer > pole_spacer > pole_spacer",
        "section": "pole_spacer > pole_spacer",
        "text": "RegionType.pole_spacer = 'Pole Spacer'\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ResetRegions",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ResetRegions.html#resetregions",
        "title": "ResetRegions",
        "section": "ResetRegions",
        "text": "Deprecated function. Replaced by MotorCAD.reset_regions().\nResetRegions\nMotorCAD.reset_regions()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ResetRegions",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ResetRegions.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ResetRegions",
        "title": "ResetRegions > ResetRegions > ResetRegions",
        "section": "ResetRegions > ResetRegions",
        "text": "MotorCADCompatibility.ResetRegions()\n\nDeprecated function. Replaced by MotorCAD.reset_regions().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Internal Scripting/ansys.motorcad.core.motorcad_methods.MotorCAD.save_script",
        "href": "methods/_autosummary_Internal Scripting/ansys.motorcad.core.motorcad_methods.MotorCAD.save_script.html#save_script",
        "title": "save_script",
        "section": "save_script",
        "text": "Save the internal Python script to a Python file.\nAbsolute filepath for the Python file, including the file\nname and a PY extension. The default filepath is the\nWindows directory on the C: drive. Use the r'filepath'\nsyntax to force Python to ignore special characters.\nsave_script\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_Internal Scripting/ansys.motorcad.core.motorcad_methods.MotorCAD.save_script",
        "href": "methods/_autosummary_Internal Scripting/ansys.motorcad.core.motorcad_methods.MotorCAD.save_script.html#ansys.motorcad.core.motorcad_methods.MotorCAD.save_script",
        "title": "save_script > save_script > save_script",
        "section": "save_script > save_script",
        "text": "MotorCAD.save_script(file_path)\n\nSave the internal Python script to a Python file.\n\nParameters\n\nfile_path\n\npython:str\n\nAbsolute filepath for the Python file, including the file\nname and a PY extension. The default filepath is the\nWindows directory on the C: drive. Use the r'filepath'\nsyntax to force Python to ignore special characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_copper_ins",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_copper_ins.html#rotor_copper_ins",
        "title": "rotor_copper_ins",
        "section": "rotor_copper_ins",
        "text": "rotor_copper_ins"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_copper_ins",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_copper_ins.html#ansys.motorcad.core.geometry.RegionType.rotor_copper_ins",
        "title": "rotor_copper_ins > rotor_copper_ins > rotor_copper_ins",
        "section": "rotor_copper_ins > rotor_copper_ins",
        "text": "RegionType.rotor_copper_ins = 'Rotor Copper Insulation'\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowResultsViewer_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowResultsViewer_Lab.html#showresultsviewer_lab",
        "title": "ShowResultsViewer_Lab",
        "section": "ShowResultsViewer_Lab",
        "text": "Deprecated function. Replaced by MotorCAD.show_results_viewer_lab().\nShowResultsViewer_Lab\nMotorCAD.show_results_viewer_lab()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowResultsViewer_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowResultsViewer_Lab.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowResultsViewer_Lab",
        "title": "ShowResultsViewer_Lab > ShowResultsViewer_Lab > ShowResultsViewer_Lab",
        "section": "ShowResultsViewer_Lab > ShowResultsViewer_Lab",
        "text": "MotorCADCompatibility.ShowResultsViewer_Lab(*args)\n\nDeprecated function. Replaced by MotorCAD.show_results_viewer_lab().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_shapes/ansys.motorcad.core.geometry_shapes.eq_triangle_w",
        "href": "methods/_autosummary_geometry_shapes/ansys.motorcad.core.geometry_shapes.eq_triangle_w.html#eq_triangle_w",
        "title": "eq_triangle_w",
        "section": "eq_triangle_w",
        "text": "Create an equilateral triangle of given width at a given set of coordinates.\nWidth value.\nRadial coordinate of the triangle centre.\nAngular coordinate of the triangle centre.\nRegion type with three Line entity types.\neq_triangle_w\npython:float\npython:float\npython:float\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_geometry_shapes/ansys.motorcad.core.geometry_shapes.eq_triangle_w",
        "href": "methods/_autosummary_geometry_shapes/ansys.motorcad.core.geometry_shapes.eq_triangle_w.html#ansys.motorcad.core.geometry_shapes.eq_triangle_w",
        "title": "eq_triangle_w > eq_triangle_w > eq_triangle_w",
        "section": "eq_triangle_w > eq_triangle_w",
        "text": "ansys.motorcad.core.geometry_shapes.eq_triangle_w(width, r_O, th_O)\n\nCreate an equilateral triangle of given width at a given set of coordinates.\n\nParameters\n\nwidth\n\npython:float\n\nWidth value.\n\nr_O\n\npython:float\n\nRadial coordinate of the triangle centre.\n\nth_O\n\npython:float\n\nAngular coordinate of the triangle centre.\n\nReturns\n\nthis_triangle\n\nansys.motorcad.core.geometry.Region\n\nRegion type with three Line entity types.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportMultiForceData",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportMultiForceData.html#exportmultiforcedata",
        "title": "ExportMultiForceData",
        "section": "ExportMultiForceData",
        "text": "Deprecated function. Replaced by MotorCAD.export_multi_force_data().\nExportMultiForceData\nMotorCAD.export_multi_force_data()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportMultiForceData",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportMultiForceData.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportMultiForceData",
        "title": "ExportMultiForceData > ExportMultiForceData > ExportMultiForceData",
        "section": "ExportMultiForceData > ExportMultiForceData",
        "text": "MotorCADCompatibility.ExportMultiForceData(*args)\n\nDeprecated function. Replaced by MotorCAD.export_multi_force_data().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetAllEmagCalculations",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetAllEmagCalculations.html#setallemagcalculations",
        "title": "SetAllEmagCalculations",
        "section": "SetAllEmagCalculations",
        "text": "Deprecated function.\nSetAllEmagCalculations"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetAllEmagCalculations",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetAllEmagCalculations.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetAllEmagCalculations",
        "title": "SetAllEmagCalculations > SetAllEmagCalculations > SetAllEmagCalculations",
        "section": "SetAllEmagCalculations > SetAllEmagCalculations",
        "text": "MotorCADCompatibility.SetAllEmagCalculations(*args)\n\nDeprecated function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_adaptive_parameter_value",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_adaptive_parameter_value.html#get_adaptive_parameter_value",
        "title": "get_adaptive_parameter_value",
        "section": "get_adaptive_parameter_value",
        "text": "Get adaptive parameter.\nname of parameter.\nvalue of parameter.\nget_adaptive_parameter_value\npython:str\npython:float"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_adaptive_parameter_value",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_adaptive_parameter_value.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_adaptive_parameter_value",
        "title": "get_adaptive_parameter_value > get_adaptive_parameter_value > get_adaptive_parameter_value",
        "section": "get_adaptive_parameter_value > get_adaptive_parameter_value",
        "text": "MotorCAD.get_adaptive_parameter_value(name)\n\nGet adaptive parameter.\n\nParameters\n\nname\n\npython:str\n\nname of parameter.\n\nReturns\n\npython:float\n\nvalue of parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.get_intersection",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.get_intersection.html#get_intersection",
        "title": "get_intersection",
        "section": "get_intersection",
        "text": "Get intersection Coordinate of entity with another entity.\nReturns None if intersection not found.\nget_intersection\nansys.motorcad.core.geometry.Line\nansys.motorcad.core.geometry.Arc\nansys.motorcad.core.geometry.Coordinate\npython:list\nof\nCoordinate\npython:None"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.get_intersection",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.get_intersection.html#ansys.motorcad.core.geometry.Entity.get_intersection",
        "title": "get_intersection > get_intersection > get_intersection",
        "section": "get_intersection > get_intersection",
        "text": "Entity.get_intersection(entity)\n\nGet intersection Coordinate of entity with another entity.\n\nReturns None if intersection not found.\n\nParameters\n\nentity\n\nansys.motorcad.core.geometry.Line or ansys.motorcad.core.geometry.Arc\n\n\n\nReturns\n\nansys.motorcad.core.geometry.Coordinate or python:list of Coordinate or python:None\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.save_fea_data",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.save_fea_data.html#save_fea_data",
        "title": "save_fea_data",
        "section": "save_fea_data",
        "text": "Save raw data for the current FEA solution.\nFile location to write to.\nFirst step of results required (for transient calculation).\nFinal step of results required (for transient calculation).\nFEA data requested, for example RegCode, B, Pt. Multiple outputs be passed as a\ncomma-separated string, for example ‘RegCode,B,Pt’.\nFEA region names that data is wanted for, for example L1_1Magnet1N1, Rotor,\nArmatureSlotR2. Multiple regions must be passed as a comma-separated string,\nfor example ‘L1_1Magnet1N1,Rotor,ArmatureSlotR2’.\nAn empty string will include all FEA regions.\nSeparator used in writing the output file.\nsave_fea_data\npython:str\npython:int\npython:int\npython:str\npython:str\npython:str"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.save_fea_data",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.save_fea_data.html#ansys.motorcad.core.motorcad_methods.MotorCAD.save_fea_data",
        "title": "save_fea_data > save_fea_data > save_fea_data",
        "section": "save_fea_data > save_fea_data",
        "text": "MotorCAD.save_fea_data(file, first_step, final_step, outputs, regions, separator)\n\nSave raw data for the current FEA solution.\n\nParameters\n\nfile\n\npython:str\n\nFile location to write to.\n\nfirst_step\n\npython:int\n\nFirst step of results required (for transient calculation).\n\nfinal_step\n\npython:int\n\nFinal step of results required (for transient calculation).\n\noutputs\n\npython:str\n\nFEA data requested, for example RegCode, B, Pt. Multiple outputs be passed as a\ncomma-separated string, for example ‘RegCode,B,Pt’.\n\nregions\n\npython:str\n\nFEA region names that data is wanted for, for example L1_1Magnet1N1, Rotor,\nArmatureSlotR2. Multiple regions must be passed as a comma-separated string,\nfor example ‘L1_1Magnet1N1,Rotor,ArmatureSlotR2’.\nAn empty string will include all FEA regions.\n\nseparator\n\npython:str\n\nSeparator used in writing the output file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.magnet",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.magnet.html#magnet",
        "title": "magnet",
        "section": "magnet",
        "text": "magnet"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.magnet",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.magnet.html#ansys.motorcad.core.geometry.RegionType.magnet",
        "title": "magnet > magnet > magnet",
        "section": "magnet > magnet",
        "text": "RegionType.magnet = 'Magnet'\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_split",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_split.html#slot_split",
        "title": "slot_split",
        "section": "slot_split",
        "text": "slot_split"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_split",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_split.html#ansys.motorcad.core.geometry.RegionType.slot_split",
        "title": "slot_split > slot_split > slot_split",
        "section": "slot_split > slot_split",
        "text": "RegionType.slot_split = 'Split Slot'\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadWindingPattern",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadWindingPattern.html#loadwindingpattern",
        "title": "LoadWindingPattern",
        "section": "LoadWindingPattern",
        "text": "Deprecated function. Replaced by MotorCAD.load_winding_pattern().\nLoadWindingPattern\nMotorCAD.load_winding_pattern()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadWindingPattern",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadWindingPattern.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadWindingPattern",
        "title": "LoadWindingPattern > LoadWindingPattern > LoadWindingPattern",
        "section": "LoadWindingPattern > LoadWindingPattern",
        "text": "MotorCADCompatibility.LoadWindingPattern(*args)\n\nDeprecated function. Replaced by MotorCAD.load_winding_pattern().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoSlotFiniteElement",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoSlotFiniteElement.html#doslotfiniteelement",
        "title": "DoSlotFiniteElement",
        "section": "DoSlotFiniteElement",
        "text": "Deprecated function. Replaced by MotorCAD.do_slot_finite_element().\nDoSlotFiniteElement\nMotorCAD.do_slot_finite_element()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoSlotFiniteElement",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoSlotFiniteElement.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoSlotFiniteElement",
        "title": "DoSlotFiniteElement > DoSlotFiniteElement > DoSlotFiniteElement",
        "section": "DoSlotFiniteElement > DoSlotFiniteElement",
        "text": "MotorCADCompatibility.DoSlotFiniteElement()\n\nDeprecated function. Replaced by MotorCAD.do_slot_finite_element().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodeToNodeResistance",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodeToNodeResistance.html#getnodetonoderesistance",
        "title": "GetNodeToNodeResistance",
        "section": "GetNodeToNodeResistance",
        "text": "Deprecated function. Replaced by MotorCAD.get_node_to_node_resistance().\nGetNodeToNodeResistance\nMotorCAD.get_node_to_node_resistance()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodeToNodeResistance",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodeToNodeResistance.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodeToNodeResistance",
        "title": "GetNodeToNodeResistance > GetNodeToNodeResistance > GetNodeToNodeResistance",
        "section": "GetNodeToNodeResistance > GetNodeToNodeResistance",
        "text": "MotorCADCompatibility.GetNodeToNodeResistance(*args)\n\nDeprecated function. Replaced by MotorCAD.get_node_to_node_resistance().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadFromFile",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadFromFile.html#loadfromfile",
        "title": "LoadFromFile",
        "section": "LoadFromFile",
        "text": "Deprecated function. Replaced by MotorCAD.load_from_file().\nLoadFromFile\nMotorCAD.load_from_file()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadFromFile",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadFromFile.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadFromFile",
        "title": "LoadFromFile > LoadFromFile > LoadFromFile",
        "section": "LoadFromFile > LoadFromFile",
        "text": "MotorCADCompatibility.LoadFromFile(*args)\n\nDeprecated function. Replaced by MotorCAD.load_from_file().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.region_type",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.region_type.html#region_type",
        "title": "region_type",
        "section": "region_type",
        "text": "Get region type.\nregion_type\nRegionType"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.region_type",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.region_type.html#ansys.motorcad.core.geometry.Region.region_type",
        "title": "region_type > region_type > region_type",
        "section": "region_type > region_type",
        "text": "property Region.region_type\n\nGet region type.\n\nReturns\n\nRegionType\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_copper_ins",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_copper_ins.html#stator_copper_ins",
        "title": "stator_copper_ins",
        "section": "stator_copper_ins",
        "text": "stator_copper_ins"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_copper_ins",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_copper_ins.html#ansys.motorcad.core.geometry.RegionType.stator_copper_ins",
        "title": "stator_copper_ins > stator_copper_ins > stator_copper_ins",
        "section": "stator_copper_ins > stator_copper_ins",
        "text": "RegionType.stator_copper_ins = 'Stator Copper Insulation'\n\n"
    },
    {
        "objectID": "user_guide/Motor-CAD_setup",
        "href": "user_guide/Motor-CAD_setup.html#motor-cad-setup",
        "title": "Motor-CAD setup",
        "section": "Motor-CAD setup",
        "text": "This section covers PyMotor-CAD options which are accessed from the Motor-CAD UI.\nMotor-CAD setup"
    },
    {
        "objectID": "user_guide/Motor-CAD_setup",
        "href": "user_guide/Motor-CAD_setup.html#registering-motor-cad-for-automation",
        "title": "Motor-CAD setup > Registering Motor-CAD for automation",
        "section": "Registering Motor-CAD for automation",
        "text": "Before you can run any scripts to interact with Motor-CAD, you must first verify the current version of Motor-CAD is\nregistered for automation.\nTo do this, select Defaults -> Automation to open the registration window and click Update to current version.\nIf the current version is already registered, this is greyed out as in the image below. Click OK.\nPyMotorCAD creates and runs from a new instance of Motor-CAD unless otherwise specified in the creation of the\nMotor-CAD object. If the Motor-CAD object is set to not open a new instance, then it connects with any open\nMotor-CAD window regardless of version number and without preference for any particular one.\nRegistering Motor-CAD for automation"
    },
    {
        "objectID": "user_guide/Motor-CAD_setup",
        "href": "user_guide/Motor-CAD_setup.html#automation-parameter-names",
        "title": "Motor-CAD setup > Automation parameter names",
        "section": "Automation parameter names",
        "text": "Scripting in Motor-CAD usually involves setting parameters (for example: geometry, operating point definition, cooling,\ncalculation options), running calculations, and then retrieving results (for example: torque, efficiency, losses).\nTo do this, the correct Motor-CAD parameter name must be known.\nA list of all Motor-CAD parameters available via automation can be found under Help -> automation Parameter Names.\nThe list can be filtered to find the required parameter. Typically, the automation parameter names are the same as\nthe displayed name in the Motor-CAD interface, with spaces replaced by underscores for example: for Pole Number the\nautomation name is Pole_Number.\nFor most parameters, the automation name can also be found by hovering the mouse over the input control or the parameter\nrow in the output data sheet. The status bar shows a description of the parameter, followed by its automation name\nin curly brackets.\nFor example, here the mouse is hovered over the magnetization radio group in the calculation tab,\nshowing that the parameter name is Magnetization.\nYou can also press F2 with the control in focus and the automation parameter list is shown with\nthe correct parameter name automatically entered in the search box.\nCtrl + F2 copies the automation name of the control which is currently selected.\nIf a parameter cannot be found in this way, an alternative method is to set the parameter to a distinctive value\nthrough the user interface, for example: 1234. You can then find the parameter by filtering the Automation Parameters\nlist by this value.\nAutomation parameter names\nPole_Number\nMagnetization\nF2\nCtrl + F2"
    },
    {
        "objectID": "user_guide/Motor-CAD_setup",
        "href": "user_guide/Motor-CAD_setup.html#gui-in-automation",
        "title": "Motor-CAD setup > GUI in automation",
        "section": "GUI in automation",
        "text": "If Motor-CAD is launched by an external script then by default the GUI is not shown. This improves the speed of startup\nand decrease the memory usage while scripting. If the GUI is required during scripting, for example for troubleshooting\nor to script UI commands (for example: taking screenshots from Motor-CAD), this option can be enabled.\nThis setting applies to all instances of this Motor-CAD version.\nRegardless of this option, during a script the Motor-CAD GUI can be shown or hidden at any time using the\ncommand set_visible().\nSome scripting commands require the GUI to be shown, for example display_screen(), save_screen_to_file()\nWhen changing model parameters via automation with the GUI visible, Motor-CAD does not update the user interface\nwith the new parameter value at every step, to speed up the scripting. However, this means that you should\nnever change a parameter which is shown on the currently displayed tab. It is best practice to run all scripts with\nthe Scripting tab visible. This should be set before changing any parameters with the command\nThis needS to be called after loading any files or setting context, before any calls to set_variable().\nGUI in automation\nset_visible()\ndisplay_screen()\nsave_screen_to_file()\nset_variable()"
    },
    {
        "objectID": "user_guide/Motor-CAD_setup",
        "href": "user_guide/Motor-CAD_setup.html#units",
        "title": "Motor-CAD setup > Units",
        "section": "Units",
        "text": "In Motor-CAD, the units can be changed under Defaults -> Units, this displays values in the interface in the\nselected units.\nHowever, variables are not be converted for use in automation and so values are always given in the Motor-CAD default\nunits. This applies both when setting input variables and retrieving output results. To see what these default values\nare, navigate to Help -> Automation Parameter Names (or press F2) where the parameters are displayed with their\ndefault units.\nAs an example, go the thermal context and navigate to Input Data -> Cooling\nChange the default temperature units in the interface to Fahrenheit:\nSearch for T_ambient in the Automation Parameters list and change the value to 100:\nIt can be seen that the current value is given in the units specified in the automation parameters list and not the\ndefault units selected in the GUI. The displayed interface value is in ℉ and the set value in the list is in ℃.\nUnits\nT_ambient"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_to_file",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_to_file.html#save_to_file",
        "title": "save_to_file",
        "section": "save_to_file",
        "text": "Save the MOT file.\nFull path to file, including file name. Use the r'filepath'\nsyntax to force Python to ignore special characters.\nsave_to_file\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_to_file",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_to_file.html#ansys.motorcad.core.motorcad_methods.MotorCAD.save_to_file",
        "title": "save_to_file > save_to_file > save_to_file",
        "section": "save_to_file > save_to_file",
        "text": "MotorCAD.save_to_file(mot_file)\n\nSave the MOT file.\n\nParameters\n\nmot_file\n\npython:str\n\nFull path to file, including file name. Use the r'filepath'\nsyntax to force Python to ignore special characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.commutator",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.commutator.html#commutator",
        "title": "commutator",
        "section": "commutator",
        "text": "commutator"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.commutator",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.commutator.html#ansys.motorcad.core.geometry.RegionType.commutator",
        "title": "commutator > commutator > commutator",
        "section": "commutator > commutator",
        "text": "RegionType.commutator = 'Commutator'\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetMagnetic3DGraphPoint",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetMagnetic3DGraphPoint.html#getmagnetic3dgraphpoint",
        "title": "GetMagnetic3DGraphPoint",
        "section": "GetMagnetic3DGraphPoint",
        "text": "Deprecated function. Replaced by MotorCAD.get_magnetic_3d_graph_point().\nGetMagnetic3DGraphPoint\nMotorCAD.get_magnetic_3d_graph_point()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetMagnetic3DGraphPoint",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetMagnetic3DGraphPoint.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetMagnetic3DGraphPoint",
        "title": "GetMagnetic3DGraphPoint > GetMagnetic3DGraphPoint > GetMagnetic3DGraphPoint",
        "section": "GetMagnetic3DGraphPoint > GetMagnetic3DGraphPoint",
        "text": "MotorCADCompatibility.GetMagnetic3DGraphPoint(*args)\n\nDeprecated function. Replaced by MotorCAD.get_magnetic_3d_graph_point().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator.html#stator",
        "title": "stator",
        "section": "stator",
        "text": "stator"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator.html#ansys.motorcad.core.geometry.RegionType.stator",
        "title": "stator > stator > stator",
        "section": "stator > stator",
        "text": "RegionType.stator = 'Stator'\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.add_entity",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.add_entity.html#add_entity",
        "title": "add_entity",
        "section": "add_entity",
        "text": "Add entity to list of region entities.\nLine/arc entity class instance\nadd_entity\nLine\nArc"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.add_entity",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.add_entity.html#ansys.motorcad.core.geometry.RegionMagnet.add_entity",
        "title": "add_entity > add_entity > add_entity",
        "section": "add_entity > add_entity",
        "text": "RegionMagnet.add_entity(entity)\n\nAdd entity to list of region entities.\n\nParameters\n\nentity\n\nLine or Arc\n\nLine/arc entity class instance\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateTorqueEnvelope",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateTorqueEnvelope.html#calculatetorqueenvelope",
        "title": "CalculateTorqueEnvelope",
        "section": "CalculateTorqueEnvelope",
        "text": "Deprecated function. Replaced by MotorCAD.calculate_torque_envelope().\nCalculateTorqueEnvelope\nMotorCAD.calculate_torque_envelope()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateTorqueEnvelope",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateTorqueEnvelope.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateTorqueEnvelope",
        "title": "CalculateTorqueEnvelope > CalculateTorqueEnvelope > CalculateTorqueEnvelope",
        "section": "CalculateTorqueEnvelope > CalculateTorqueEnvelope",
        "text": "MotorCADCompatibility.CalculateTorqueEnvelope()\n\nDeprecated function. Replaced by MotorCAD.calculate_torque_envelope().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/internal_scripting/index",
        "href": "examples/internal_scripting/index.html#internal-scripting-examples",
        "title": "Internal scripting examples",
        "section": "Internal scripting examples",
        "text": "These examples show you how to use the internal scripting functionality of PyMotorCAD.\nsphx_glr_examples_internal_scripting_emag.py\nsphx_glr_examples_internal_scripting_mechanical_force.py\nsphx_glr_examples_internal_scripting_mechanical_stress.py\nsphx_glr_examples_internal_scripting_thermal_steady_state.py\nsphx_glr_examples_internal_scripting_thermal_transient.py\nInternal scripting examples"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.mounting_base",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.mounting_base.html#mounting_base",
        "title": "mounting_base",
        "section": "mounting_base",
        "text": "mounting_base"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.mounting_base",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.mounting_base.html#ansys.motorcad.core.geometry.RegionType.mounting_base",
        "title": "mounting_base > mounting_base > mounting_base",
        "section": "mounting_base > mounting_base",
        "text": "RegionType.mounting_base = 'Base Mount'\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadDutyCycle",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadDutyCycle.html#loaddutycycle",
        "title": "LoadDutyCycle",
        "section": "LoadDutyCycle",
        "text": "Deprecated function. Replaced by MotorCAD.load_duty_cycle().\nLoadDutyCycle\nMotorCAD.load_duty_cycle()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadDutyCycle",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadDutyCycle.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadDutyCycle",
        "title": "LoadDutyCycle > LoadDutyCycle > LoadDutyCycle",
        "section": "LoadDutyCycle > LoadDutyCycle",
        "text": "MotorCADCompatibility.LoadDutyCycle(*args)\n\nDeprecated function. Replaced by MotorCAD.load_duty_cycle().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#contribute",
        "title": "Contribute",
        "section": "Contribute",
        "text": "Overall guidance on contributing to a PyAnsys library appears in the\nContributing topic\nin the PyAnsys Developer’s Guide. Ensure that you are thoroughly familiar\nwith this guide before attempting to contribute to PyMotorCAD.\nThe following contribution information is specific to PyMotorCAD.\nContribute"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#clone-the-repository",
        "title": "Contribute > Clone the repository",
        "section": "Clone the repository",
        "text": "Run this code to clone and install the latest version of PyMotorCAD in development mode:\nClone the repository"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#post-issues",
        "title": "Contribute > Post issues",
        "section": "Post issues",
        "text": "Use the PyMotorCAD Issues\npage to submit questions, report bugs, and request new features. When possible,\nuse these issue templates:\nBug report template\nFeature request template\nDocumentation issue template\nIf your issue does not fit into one of these categories, create your own issue.\nTo reach the project support team, email pyansys.core@ansys.com.\nPost issues"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#view-pymotorcad-documentation",
        "title": "Contribute > View PyMotorCAD documentation",
        "section": "View PyMotorCAD documentation",
        "text": "Documentation for the latest stable release of PyMotorCAD is hosted at\nPyMotorCAD Documentation.\nIn the upper right corner of the documentation’s title bar, there is an option\nfor switching from viewing the documentation for the latest stable release\nto viewing the documentation for the development version or previously\nreleased versions.\nView PyMotorCAD documentation"
    },
    {
        "objectID": "contributing",
        "href": "contributing.html#adhere-to-code-style",
        "title": "Contribute > Adhere to code style",
        "section": "Adhere to code style",
        "text": "PyMotorCAD is compliant with the PyAnsys code style. it\nuses the tool pre-commit to enforce the code style.\nYou can install and activate this tool with this code:\nYou can also install this tool as a pre-commit hook by running this command:\nThis way, it’s not possible for you to push code that fails the style checks. For example:\nAdhere to code style"
    },
    {
        "objectID": "examples/basics/thermal_basics",
        "href": "examples/basics/thermal_basics.html#motor-cad-thermal-example-script",
        "title": "Motor-CAD thermal example script",
        "section": "Motor-CAD thermal example script",
        "text": "This example provides a Motor-CAD thermal script.\nMotor-CAD thermal example script"
    },
    {
        "objectID": "examples/basics/thermal_basics",
        "href": "examples/basics/thermal_basics.html#set-up-example",
        "title": "Motor-CAD thermal example script > Set up example",
        "section": "Set up example",
        "text": "Setting up this example consists of performing imports, launching\nMotor-CAD, disabling all popup messages from Motor-CAD, and\nopening the file for the thermal analysis.\nSet up example"
    },
    {
        "objectID": "examples/basics/thermal_basics",
        "href": "examples/basics/thermal_basics.html#launch-motor-cad",
        "title": "Motor-CAD thermal example script > Launch Motor-CAD",
        "section": "Launch Motor-CAD",
        "text": "Initialize ActiveX automation and launch Motor-CAD.\nLaunch Motor-CAD"
    },
    {
        "objectID": "examples/basics/thermal_basics",
        "href": "examples/basics/thermal_basics.html#disable-popup-messages",
        "title": "Motor-CAD thermal example script > Disable popup messages",
        "section": "Disable popup messages",
        "text": "Disable all popup messages from Motor-CAD.\nDisable popup messages"
    },
    {
        "objectID": "examples/basics/thermal_basics",
        "href": "examples/basics/thermal_basics.html#open-relevant-file",
        "title": "Motor-CAD thermal example script > Open relevant file",
        "section": "Open relevant file",
        "text": "Specify the working directory and open the relevant file for the\nthermal analysis.\nOpen relevant file"
    },
    {
        "objectID": "examples/basics/thermal_basics",
        "href": "examples/basics/thermal_basics.html#create-analysis",
        "title": "Motor-CAD thermal example script > Create analysis",
        "section": "Create analysis",
        "text": "Creating the analysis consists of showing the thermal context, displaying\nthe Scripting tab, setting parameters, and saving the file.\nDisplay the Scripting tab.\nChange the housing diameter.\nSet the flow rate of the WJ fluid volume.\nSet the temperature of the WJ fluid inlet.\nChange the cooling fluid.\nSet the heat transfer correlation.\nSave the file.\nCreate analysis"
    },
    {
        "objectID": "examples/basics/thermal_basics",
        "href": "examples/basics/thermal_basics.html#calculate-steady-state",
        "title": "Motor-CAD thermal example script > Calculate steady state",
        "section": "Calculate steady state",
        "text": "Calculate the steady state.\nRetrieve the magnet temperature.\nRetrieve the minimum, maximum, and average winding temperatures.\nCalculate steady state"
    },
    {
        "objectID": "examples/basics/thermal_basics",
        "href": "examples/basics/thermal_basics.html#run-simulation",
        "title": "Motor-CAD thermal example script > Run simulation",
        "section": "Run simulation",
        "text": "Run the transient simulation.\nGet the transient results.\nRun simulation"
    },
    {
        "objectID": "examples/basics/thermal_basics",
        "href": "examples/basics/thermal_basics.html#plot-results",
        "title": "Motor-CAD thermal example script > Plot results",
        "section": "Plot results",
        "text": "Plot results from the simulation.\nPlot results"
    },
    {
        "objectID": "examples/basics/thermal_basics",
        "href": "examples/basics/thermal_basics.html#exit-motor-cad",
        "title": "Motor-CAD thermal example script > Exit Motor-CAD",
        "section": "Exit Motor-CAD",
        "text": "Exit Motor-CAD.\nTotal running time of the script: (0 minutes 42.798 seconds)\nDownload Jupyter notebook: thermal_basics.ipynb\nDownload Python source code: thermal_basics.py\nDownload zipped: thermal_basics.zip\nGallery generated by Sphinx-Gallery\nExit Motor-CAD\nDownload Jupyter notebook: thermal_basics.ipynb\nDownload Python source code: thermal_basics.py\nDownload zipped: thermal_basics.zip"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportForceAnimation",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportForceAnimation.html#exportforceanimation",
        "title": "ExportForceAnimation",
        "section": "ExportForceAnimation",
        "text": "Deprecated function. Replaced by MotorCAD.export_force_animation().\nExportForceAnimation\nMotorCAD.export_force_animation()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportForceAnimation",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportForceAnimation.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportForceAnimation",
        "title": "ExportForceAnimation > ExportForceAnimation > ExportForceAnimation",
        "section": "ExportForceAnimation > ExportForceAnimation",
        "text": "MotorCADCompatibility.ExportForceAnimation(*args)\n\nDeprecated function. Replaced by MotorCAD.export_force_animation().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.name",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.name.html#name",
        "title": "name",
        "section": "name",
        "text": "Get or set region name.\nname"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.name",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.name.html#ansys.motorcad.core.geometry.Region.name",
        "title": "name > name > name",
        "section": "name > name",
        "text": "property Region.name\n\nGet or set region name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.area",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.area.html#area",
        "title": "area",
        "section": "area",
        "text": "Get the region area.\narea"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.area",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.area.html#ansys.motorcad.core.geometry.RegionMagnet.area",
        "title": "area > area > area",
        "section": "area > area",
        "text": "property RegionMagnet.area\n\nGet the region area.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.points",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.points.html#points",
        "title": "points",
        "section": "points",
        "text": "Get points that exist in region.\npoints\nList\nof\nCoordinate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.points",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.points.html#ansys.motorcad.core.geometry.RegionMagnet.points",
        "title": "points > points > points",
        "section": "points > points",
        "text": "property RegionMagnet.points\n\nGet points that exist in region.\n\nReturns\n\nList of Coordinate\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveTransientTemperatures",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveTransientTemperatures.html#savetransienttemperatures",
        "title": "SaveTransientTemperatures",
        "section": "SaveTransientTemperatures",
        "text": "Deprecated function. Replaced by MotorCAD.save_transient_temperatures().\nSaveTransientTemperatures\nMotorCAD.save_transient_temperatures()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveTransientTemperatures",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveTransientTemperatures.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveTransientTemperatures",
        "title": "SaveTransientTemperatures > SaveTransientTemperatures > SaveTransientTemperatures",
        "section": "SaveTransientTemperatures > SaveTransientTemperatures",
        "text": "MotorCADCompatibility.SaveTransientTemperatures(*args)\n\nDeprecated function. Replaced by MotorCAD.save_transient_temperatures().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_offset_node_number",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_offset_node_number.html#get_offset_node_number",
        "title": "get_offset_node_number",
        "section": "get_offset_node_number",
        "text": "Get the offset node number.\nNumber of the node.\nNumber of the slice.\nNumber of the cuboid.\nOffset node number.\nget_offset_node_number\npython:int\npython:int\npython:int\npython:int"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_offset_node_number",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_offset_node_number.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_offset_node_number",
        "title": "get_offset_node_number > get_offset_node_number > get_offset_node_number",
        "section": "get_offset_node_number > get_offset_node_number",
        "text": "MotorCAD.get_offset_node_number(node_number, slice_number, cuboid_number)\n\nGet the offset node number.\n\nParameters\n\nnode_number\n\npython:int\n\nNumber of the node.\n\nslice_number\n\npython:int\n\nNumber of the slice.\n\ncuboid_number\n\npython:int\n\nNumber of the cuboid.\n\nReturns\n\npython:int\n\nOffset node number.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.rotate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.rotate.html#rotate",
        "title": "rotate",
        "section": "rotate",
        "text": "Rotate Region around a point for a given angle.\npoint to rotate Coordinate around.\nAngle of rotation in degrees. Anticlockwise direction is positive.\nrotate\nCoordinate\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.rotate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.rotate.html#ansys.motorcad.core.geometry.RegionMagnet.rotate",
        "title": "rotate > rotate > rotate",
        "section": "rotate > rotate",
        "text": "RegionMagnet.rotate(centre_point, angle)\n\nRotate Region around a point for a given angle.\n\nParameters\n\ncentre_point\n\nCoordinate\n\npoint to rotate Coordinate around.\n\nangle\n\npython:float\n\nAngle of rotation in degrees. Anticlockwise direction is positive.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_fea_path_point",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_fea_path_point.html#set_fea_path_point",
        "title": "set_fea_path_point",
        "section": "set_fea_path_point",
        "text": "Add or edit a point in the path editor.\nset_fea_path_point"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_fea_path_point",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_fea_path_point.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_fea_path_point",
        "title": "set_fea_path_point > set_fea_path_point > set_fea_path_point",
        "section": "set_fea_path_point > set_fea_path_point",
        "text": "MotorCAD.set_fea_path_point(path_name, path_location, coord_system, ror_x, tor_y, calculation, expression)\n\nAdd or edit a point in the path editor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.barrier",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.barrier.html#barrier",
        "title": "barrier",
        "section": "barrier",
        "text": "barrier"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.barrier",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.barrier.html#ansys.motorcad.core.geometry.RegionType.barrier",
        "title": "barrier > barrier > barrier",
        "section": "barrier > barrier",
        "text": "RegionType.barrier = 'Barrier'\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_functions/ansys.motorcad.core.geometry.xy_to_rt",
        "href": "methods/_autosummary_geometry_functions/ansys.motorcad.core.geometry.xy_to_rt.html#xy_to_rt",
        "title": "xy_to_rt",
        "section": "xy_to_rt",
        "text": "Convert Motor-CAD Cartesian coordinates to polar coordinates in degrees.\nX coordinate value.\nY coordinate value.\nRadial coordinate value.\nAngular coordinate value.\nxy_to_rt\npython:float\npython:float\npython:float\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_functions/ansys.motorcad.core.geometry.xy_to_rt",
        "href": "methods/_autosummary_geometry_functions/ansys.motorcad.core.geometry.xy_to_rt.html#ansys.motorcad.core.geometry.xy_to_rt",
        "title": "xy_to_rt > xy_to_rt > xy_to_rt",
        "section": "xy_to_rt > xy_to_rt",
        "text": "ansys.motorcad.core.geometry.xy_to_rt(x, y)\n\nConvert Motor-CAD Cartesian coordinates to polar coordinates in degrees.\n\nParameters\n\nx\n\npython:float\n\nX coordinate value.\n\ny\n\npython:float\n\nY coordinate value.\n\nReturns\n\nradius\n\npython:float\n\nRadial coordinate value.\n\ntheta\n\npython:float\n\nAngular coordinate value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_XY",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_XY.html#addarc_xy",
        "title": "AddArc_XY",
        "section": "AddArc_XY",
        "text": "Deprecated function. Replaced by MotorCAD.add_arc_xy().\nAddArc_XY\nMotorCAD.add_arc_xy()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_XY",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_XY.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_XY",
        "title": "AddArc_XY > AddArc_XY > AddArc_XY",
        "section": "AddArc_XY > AddArc_XY",
        "text": "MotorCADCompatibility.AddArc_XY(*args)\n\nDeprecated function. Replaced by MotorCAD.add_arc_xy().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetPointValue",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetPointValue.html#getpointvalue",
        "title": "GetPointValue",
        "section": "GetPointValue",
        "text": "Deprecated function. Replaced by MotorCAD.get_point_value().\nGetPointValue\nMotorCAD.get_point_value()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetPointValue",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetPointValue.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetPointValue",
        "title": "GetPointValue > GetPointValue > GetPointValue",
        "section": "GetPointValue > GetPointValue",
        "text": "MotorCADCompatibility.GetPointValue(*args)\n\nDeprecated function. Replaced by MotorCAD.get_point_value().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_utility_functions/ansys.motorcad.core.rpc_client_core.set_motorcad_exe",
        "href": "methods/_autosummary_utility_functions/ansys.motorcad.core.rpc_client_core.set_motorcad_exe.html#set_motorcad_exe",
        "title": "set_motorcad_exe",
        "section": "set_motorcad_exe",
        "text": "Set the path of the Motor-CAD executable file to launch.\nPath of the Motor-CAD executable file to launch.\nset_motorcad_exe\npython:str"
    },
    {
        "objectID": "methods/_autosummary_utility_functions/ansys.motorcad.core.rpc_client_core.set_motorcad_exe",
        "href": "methods/_autosummary_utility_functions/ansys.motorcad.core.rpc_client_core.set_motorcad_exe.html#ansys.motorcad.core.rpc_client_core.set_motorcad_exe",
        "title": "set_motorcad_exe > set_motorcad_exe > set_motorcad_exe",
        "section": "set_motorcad_exe > set_motorcad_exe",
        "text": "ansys.motorcad.core.rpc_client_core.set_motorcad_exe(exe_location)\n\nSet the path of the Motor-CAD executable file to launch.\n\nParameters\n\nexe_location\n\npython:str\n\nPath of the Motor-CAD executable file to launch.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_report_structure",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_report_structure.html#load_report_structure",
        "title": "load_report_structure",
        "section": "load_report_structure",
        "text": "Load the tree structure of the report from a file.\nFilepath for the file with the tree structure of the\nreport. Use the r'filepath' syntax to force Python\nto ignore special characters.\nload_report_structure\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_report_structure",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_report_structure.html#ansys.motorcad.core.motorcad_methods.MotorCAD.load_report_structure",
        "title": "load_report_structure > load_report_structure > load_report_structure",
        "section": "load_report_structure > load_report_structure",
        "text": "MotorCAD.load_report_structure(file_path)\n\nLoad the tree structure of the report from a file.\n\nParameters\n\nfile_path\n\npython:str\n\nFilepath for the file with the tree structure of the\nreport. Use the r'filepath' syntax to force Python\nto ignore special characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_CentreStartEnd_RT",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_CentreStartEnd_RT.html#addarc_centrestartend_rt",
        "title": "AddArc_CentreStartEnd_RT",
        "section": "AddArc_CentreStartEnd_RT",
        "text": "Deprecated function. Replaced by MotorCAD.add_arc_centre_start_end_rt().\nAddArc_CentreStartEnd_RT\nMotorCAD.add_arc_centre_start_end_rt()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_CentreStartEnd_RT",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_CentreStartEnd_RT.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_CentreStartEnd_RT",
        "title": "AddArc_CentreStartEnd_RT > AddArc_CentreStartEnd_RT > AddArc_CentreStartEnd_RT",
        "section": "AddArc_CentreStartEnd_RT > AddArc_CentreStartEnd_RT",
        "text": "MotorCADCompatibility.AddArc_CentreStartEnd_RT(*args)\n\nDeprecated function. Replaced by MotorCAD.add_arc_centre_start_end_rt().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoSteadyStateAnalysis",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoSteadyStateAnalysis.html#dosteadystateanalysis",
        "title": "DoSteadyStateAnalysis",
        "section": "DoSteadyStateAnalysis",
        "text": "Deprecated function. Replaced by MotorCAD.do_steady_state_analysis().\nDoSteadyStateAnalysis\nMotorCAD.do_steady_state_analysis()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoSteadyStateAnalysis",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoSteadyStateAnalysis.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoSteadyStateAnalysis",
        "title": "DoSteadyStateAnalysis > DoSteadyStateAnalysis > DoSteadyStateAnalysis",
        "section": "DoSteadyStateAnalysis > DoSteadyStateAnalysis",
        "text": "MotorCADCompatibility.DoSteadyStateAnalysis()\n\nDeprecated function. Replaced by MotorCAD.do_steady_state_analysis().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadExternalCircuit",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadExternalCircuit.html#loadexternalcircuit",
        "title": "LoadExternalCircuit",
        "section": "LoadExternalCircuit",
        "text": "Deprecated function. Replaced by MotorCAD.load_external_circuit().\nLoadExternalCircuit\nMotorCAD.load_external_circuit()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadExternalCircuit",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadExternalCircuit.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadExternalCircuit",
        "title": "LoadExternalCircuit > LoadExternalCircuit > LoadExternalCircuit",
        "section": "LoadExternalCircuit > LoadExternalCircuit",
        "text": "MotorCADCompatibility.LoadExternalCircuit(*args)\n\nDeprecated function. Replaced by MotorCAD.load_external_circuit().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.points",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.points.html#points",
        "title": "points",
        "section": "points",
        "text": "Get points of shape/region from Entity list.\npoints\nList\nof\nCoordinate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.points",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.points.html#ansys.motorcad.core.geometry.EntityList.points",
        "title": "points > points > points",
        "section": "points > points",
        "text": "property EntityList.points\n\nGet points of shape/region from Entity list.\n\nReturns\n\nList of Coordinate\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/adaptive_templates",
        "href": "user_guide/adaptive_templates.html#motor-cad-adaptive-templates-scripting",
        "title": "Motor-CAD adaptive templates scripting",
        "section": "Motor-CAD adaptive templates scripting",
        "text": "Adaptive Templates in Motor-CAD require v2024.1.2 (Motor-CAD 2024 R1 Update) or later and\nPyMotorCAD v0.4.1. To update PyMotorCAD in Motor-CAD, go to Scripting -> Settings -> PyMotorCAD\nupdates and select ‘Update to Latest Release’.\nThis guide describes the Adaptive Templates feature. Motor-CAD provides the Adaptive Templates\nfeature for the design of models with geometries that cannot be modelled using the standard template\ngeometries. By using the Adaptive Templates feature, users can generate their own geometric\nparameterisations from scratch or based on the Standard Templates.\nUsing Adaptive Templates, custom geometric parameterisations are set up using a Python script.\nAdaptive Templates examples are available in the PyMotorCAD Documentation under\nref_examples_adaptive_templates_library. For the examples shown in this user guide, see\nref_BPM_Triangular_Rotor_Notches and ref_SYNC_Curve_Flux_Barriers.\nThose who are new to Motor-CAD Adaptive Templates should work through the tutorial supplied with\nMotor-CAD. The tutorial contains additional information and full workflow examples.\nMotor-CAD adaptive templates scripting"
    },
    {
        "objectID": "user_guide/adaptive_templates",
        "href": "user_guide/adaptive_templates.html#geometry-editor",
        "title": "Motor-CAD adaptive templates scripting > Geometry editor",
        "section": "Geometry editor",
        "text": "The Geometry -> Editor tab in Ansys Motor-CAD shows each geometry region currently in use in the\nmodel.\nThe interface is fully interactive. Individual geometry regions can be selected from the region tree\nor the diagram.\nMotor geometry components are grouped by Armature and Field and represented by regions. The Editor\ndisplays the geometry regions based on their spatial locations, such that a region’s sub-regions are\nshown as a descendant/child of their parent region.\nThe e9 IPM template in Motor-CAD is shown. In this example, the Magnet and Rotor Pocket regions\n(L1_1Magnet1, L2_1Magnet2, Rotor Pocket and Rotor Pocket_1) are shown in a branch\nunderneath the Rotor region. When a region is selected, region properties are displayed at the\nbottom-left of the screen and region entities at the bottom-right.\nRegion properties include the Name, Type, Material, Area (base and actual), Position (Centroid,\nRegion Coordinate) and Symmetry of the region. Region entities include all the Lines and Arcs that\ndefine the region. The Rotor region in the e9 IPM template is defined by two lines and two arcs.\nIf an individual entity is selected from the table, it is highlighted in the diagram.\nEither Cartesian or Polar coordinate systems can be used. The coordinate system can be changed by\ngoing to Input Data -> Settings -> Geometry.\nGeometry editor"
    },
    {
        "objectID": "user_guide/adaptive_templates",
        "href": "user_guide/adaptive_templates.html#adaptive-templates-script",
        "title": "Motor-CAD adaptive templates scripting > Adaptive templates script",
        "section": "Adaptive templates script",
        "text": "Adaptive Templates can be enabled by going to the Geometry -> Editor -> Adaptive Templates tab\nand setting the Geometry Templates Type from Standard to Adaptive. This means that the\nAdaptive Templates script is run every time the Motor-CAD geometry is created, and the scripting\ninterface enabled, which allows editing of the script.\nTo set an adaptive geometry for a Motor-CAD file, a script must be loaded in to the\nAdaptive Templates tab and run. Adaptive Templates Python scripts can also be executed\nexternally, but unless the script is loaded in to the Adaptive Templates tab in Motor-CAD, the\ngeometry is only defined temporarily.\nAdaptive Templates Scripts require PyMotorCAD to be imported. This Python package provides access to\nMotor-CAD.\nansys.motorcad.core provides access to the Motor-CAD geometry, such as the existing regions in\nthe model. It can be used to get an existing region from the Motor-CAD model (such as the Rotor)\nas an object in Python (rotor = mc.get_region(\"Rotor\")). It can also be used to set a Motor-CAD\nregion object in the Motor-CAD model (mc.set_region(rotor)).\nFor a Motor-CAD region object that has been obtained using PyMotorCAD, the region properties are\naccessible via Python. The region object created in Python contains all of the region properties\nshown in the Motor-CAD UI and all of the geometry entities that make up the region.\nProperties such as the material and colour can be edited with an Adaptive Templates Script:\nDetails on the Adaptive Geometry functions within ansys.motorcad.core that provide access to the\nMotor-CAD geometry are available in the ref_MotorCAD_object under\nref_Adaptive Geometry_API.\nAdaptive templates script\nansys.motorcad.core\nrotor = mc.get_region(\"Rotor\")\nmc.set_region(rotor)\nansys.motorcad.core"
    },
    {
        "objectID": "user_guide/adaptive_templates",
        "href": "user_guide/adaptive_templates.html#using-the-geometry-objects-and-functions-library",
        "title": "Motor-CAD adaptive templates scripting > Using the geometry objects and functions library",
        "section": "Using the geometry objects and functions library",
        "text": "Adaptive scripts also require the ansys.motorcad.core.geometry library to modify the model\ngeometry. This provides geometry capability in Python, such as regions and entities. It is required\nso that Lines and Arcs can be defined or modified by the script, and so that regions can be created\nfrom these entities.\nThe geometry package can be imported:\nAlternatively, specific functions (for example Line and Arc) can be imported from the package:\nansys.motorcad.core.geometry is required to edit the entities that belong to a region, such as\nchanging the Lines or Arcs that define the region geometry.\nDetails on the full list of Geometry objects and functions are available in the\nref_API_Reference under ref_geometry_functions. For examples on modifying a Motor-CAD\nmodel geometry, see ref_examples_adaptive_templates_library.\nUsing the geometry objects and functions library\nansys.motorcad.core.geometry\nansys.motorcad.core.geometry"
    },
    {
        "objectID": "user_guide/adaptive_templates",
        "href": "user_guide/adaptive_templates.html#adaptive-parameters",
        "title": "Motor-CAD adaptive templates scripting > Adaptive parameters",
        "section": "Adaptive parameters",
        "text": "An Adaptive Templates script can be set based on the Standard Template parameters or based on custom\nAdaptive Parameters. Adaptive Parameters are shown in the\nGeometry -> Editor -> Adaptive Parameters tab.\nAny parameter can be defined, with a name, value, and description. Parameters can be added within\nthe Motor-CAD interface, or with a Python script by using the set_adaptive_parameter_value()\nmethod from ansys.motorcad.core:\nAdaptive Parameters also appear in the Geometry -> Radial tab, alongside the Standard Template\nparameters.\nAdaptive Parameters can be accessed with the Adaptive Templates script using the\nget_adaptive_parameter_value() method from ansys.motorcad.core, so that the geometry can be\ndefined by these Adaptive Parameters:\nAdaptive parameters\nset_adaptive_parameter_value()\nansys.motorcad.core\nget_adaptive_parameter_value()\nansys.motorcad.core"
    },
    {
        "objectID": "user_guide/adaptive_templates",
        "href": "user_guide/adaptive_templates.html#scripting-workflow",
        "title": "Motor-CAD adaptive templates scripting > Scripting workflow",
        "section": "Scripting workflow",
        "text": "As well as the defined Adaptive Parameters, any parameter from Motor-CAD can be used in the Adaptive\nTemplates script by using the get_variable() method from PyMotorCAD. Any Motor-CAD API\naccessible by PyMotorCAD is available.\nFor example, when modifying the rotor geometry, it is often necessary to retrieve the rotor radius:\nScripting workflow\nget_variable()"
    },
    {
        "objectID": "user_guide/adaptive_templates",
        "href": "user_guide/adaptive_templates.html#adding-a-region-to-the-geometry",
        "title": "Motor-CAD adaptive templates scripting > Adding a region to the geometry",
        "section": "Adding a region to the geometry",
        "text": "To add a new geometry feature to the Motor-CAD model, such as a notch, the workflow is as follows:\nA new region is created to represent the notch.\nThe region properties are defined (material, colour etc.).\nEntities are added to the region to define the geometry (shape and position).\nThe parent region is defined for the new region (for a rotor duct example, the parent would be\nset to the rotor region).\nThe new region is set in Motor-CAD.\nAdding a region to the geometry"
    },
    {
        "objectID": "user_guide/adaptive_templates",
        "href": "user_guide/adaptive_templates.html#creating-a-region",
        "title": "Motor-CAD adaptive templates scripting > Creating a region",
        "section": "Creating a region",
        "text": "To create a new region to represent the notch, use the Region object from\nansys.motorcad.core.geometry:\nCreating a region\nansys.motorcad.core.geometry"
    },
    {
        "objectID": "user_guide/adaptive_templates",
        "href": "user_guide/adaptive_templates.html#defining-region-properties-and-parent",
        "title": "Motor-CAD adaptive templates scripting > Defining region properties and parent",
        "section": "Defining region properties and parent",
        "text": "Region properties can be set using the appropriate field/property:\nIf the region object of the rotor has been created in Python (rotor = mc.get_region(\"Rotor\")),\nthe rotor region object’s properties can be obtained and set for the rotor notch.\nThe Region.duplications property represents the symmetry of the region. In the example shown\nusing the e9 IPM template, duplications = 8 because there are 8 rotor poles of 45 ° symmetry.\nIn this example, the notch would have the same symmetry as the rotor.\nThe parent region of the notch can be set to the rotor region so that the notch is set as a\nsub-region. Motor-CAD uses implicit subtractions so that the notch subtraction is handled\nautomatically. The notch appears as a sub-region of the rotor in tree shown in the\nGeometry -> Editor tab in Motor-CAD.\nDefining region properties and parent\nrotor = mc.get_region(\"Rotor\")\nRegion.duplications\nduplications = 8"
    },
    {
        "objectID": "user_guide/adaptive_templates",
        "href": "user_guide/adaptive_templates.html#adding-entities-to-a-region",
        "title": "Motor-CAD adaptive templates scripting > Adding entities to a region",
        "section": "Adding entities to a region",
        "text": "To add two Lines line_1, line_2 and an Arc airgap_arc to the notch region, use the\nRegion.add_entity() function from ansys.motorcad.core.geometry:\nLine and Arc entities can be defined using Motor-CAD Coordinate objects.\nAdding entities to a region\nline_1, line_2\nairgap_arc\nRegion.add_entity()\nansys.motorcad.core.geometry"
    },
    {
        "objectID": "user_guide/adaptive_templates",
        "href": "user_guide/adaptive_templates.html#setting-a-region-in-motor-cad",
        "title": "Motor-CAD adaptive templates scripting > Setting a region in Motor-CAD",
        "section": "Setting a region in Motor-CAD",
        "text": "To set the notch in the Motor-CAD model, the notch region is sent to Motor-CAD using the\nset_region() function from ansys.motorcad.core.\nRegion.is_closed() can be used to ensure that the entities that were added to the region create\na closed region.\nSetting a region in Motor-CAD\nset_region()\nansys.motorcad.core\nRegion.is_closed()"
    },
    {
        "objectID": "user_guide/adaptive_templates",
        "href": "user_guide/adaptive_templates.html#using-the-geometry-shapes-library",
        "title": "Motor-CAD adaptive templates scripting > Using the geometry shapes library",
        "section": "Using the geometry shapes library",
        "text": "Line and Arc entities are defined using Motor-CAD Coordinate objects. Calculating the coordinate\npositions can be time-consuming and can require many lines of Python script.\nFor commonly used shapes, ready made functions can be used to create a region, based on a few\nrequired parameters. These functions can be imported from the\nansys.motorcad.core.geometry_shapes library.\nA function for creating a triangular notch region can be imported:\nThe triangular_notch() function requires four arguments:\nradius: Radial position of the notch outer edge. (For a rotor notch, this is the rotor\nradius.)\nsweep - Sweep of the notch along the rotor airgap, in degrees. (This parameter defines the\nnotch width.)\ncentre_angle - Angular position of the notch centre.\ndepth - Depth of the notch\nA rotor notch can be defined using this function so that the coordinates for the notch entities do\nnot need to be calculated.\nTo use the triangular_notch() function to create a triangular rotor notch region:\nThe arguments, rotor_radius, notch_angular_width, notch_centre_angle and\nnotch_depth must be calculated in the Adaptive Templates script and specified.\nThe notch region properties can then be defined and the region can be set in Motor-CAD, as described\nearlier.\nFor a full Adaptive Templates example using the workflow described here, see\nref_BPM_Triangular_Rotor_Notches.\nDetails on the Geometry Shapes functions within ansys.motorcad.core.geometry_shapes are\navailable in the ref_API_Reference under ref_geometry_shapes.\nUsing the geometry shapes library\nansys.motorcad.core.geometry_shapes\ntriangular_notch()\nradius\nsweep\ncentre_angle\ndepth\ntriangular_notch()\ntriangular_notch()\nrotor_radius\nnotch_angular_width\nnotch_centre_angle\nnotch_depth\nansys.motorcad.core.geometry_shapes"
    },
    {
        "objectID": "user_guide/adaptive_templates",
        "href": "user_guide/adaptive_templates.html#create-and-modify-adaptive-templates-scripts",
        "title": "Motor-CAD adaptive templates scripting > Create and modify adaptive templates scripts",
        "section": "Create and modify adaptive templates scripts",
        "text": "Adaptive Template Scripts should be created outside Motor-CAD, using a Python Integrated Development\nEnvironment (IDE) (such as PyCharm). Using an IDE allows for faster creation of the script, allowing\naccess to autocompletion, code correction and other features which are not available in the\nMotor-CAD scripting interface.\nThis is essential when writing complex scripts, allowing issues with the script to be fixed and the\ninspection of Python objects, such as geometry regions from Motor-CAD.\nFor more information on the Synchronous Reluctance machine geometry with curved flux barriers used\nfor this example, see ref_SYNC_Curve_Flux_Barriers.\nCreate and modify adaptive templates scripts"
    },
    {
        "objectID": "user_guide/adaptive_templates",
        "href": "user_guide/adaptive_templates.html#working-on-the-adaptive-templates-script",
        "title": "Motor-CAD adaptive templates scripting > Working on the adaptive templates script",
        "section": "Working on the adaptive templates script",
        "text": "Adaptive Templates scripts can be edited from an external IDE (for example PyCharm, VSCode). When\nusing an external IDE, it is important to ensure that the script contains this method before\ngetting or setting any Motor-CAD geometry:\nWorking on the adaptive templates script"
    },
    {
        "objectID": "user_guide/adaptive_templates",
        "href": "user_guide/adaptive_templates.html#drawing-geometry-objects",
        "title": "Motor-CAD adaptive templates scripting > Drawing geometry objects",
        "section": "Drawing geometry objects",
        "text": "When working on and debugging Adaptive Templates scripts, it is useful to use the geometry drawing\nfeature to plot the geometry objects and regions. ansys.motorcad.core.geometry_drawing contains\nthe draw_objects_debug() function, which can be used to plot any region that has been defined in\nPython. This function only plots regions when called from an external IDE to assist with debugging\nscripts. To plot regions from the Motor-CAD scripting interface, use the draw_objects()\nfunction.\nThe geometry drawing package can be imported:\nIn the ref_SYNC_Curve_Flux_Barriers example, curved flux barrier (rotor pockets) region\nobjects are added to a list, pockets_all_layers. The draw_objects_debug() function can be\nused to plot the regions:\nDrawing geometry objects\nansys.motorcad.core.geometry_drawing\ndraw_objects_debug()\ndraw_objects()\npockets_all_layers\ndraw_objects_debug()\ndraw_objects()"
    },
    {
        "objectID": "user_guide/adaptive_templates",
        "href": "user_guide/adaptive_templates.html#add-imported-dxf-geometries-to-adaptive-templates",
        "title": "Motor-CAD adaptive templates scripting > Add imported DXF geometries to adaptive templates",
        "section": "Add imported DXF geometries to adaptive templates",
        "text": "Custom geometry can be imported to Motor-CAD from a DXF file. For information on how to import\ncustom geometry from a DXF file, see the “Custom Machine Geometries” tutorial supplied with\nMotor-CAD.\nOnce a custom geometry is imported, it is automatically separated into regions, which appear under\nImport in the Geometry -> Editor tab. These imported geometry regions are accessed using\nthe get_region_dxf() method from the ansys.motorcad.core API. The geometry regions that are\ncurrently set in the Motor-CAD model are shown under Template in the tree.\nBy default, the imported regions are not displayed. To display an imported region, select the\ncheckbox.\nImported regions are not automatically set in the Motor-CAD model or used by the Motor-CAD\ncalculations. To customise the Motor-CAD template geometry with the imported geometry, use Adaptive\nTemplates.\nUse the get_region_dxf() method in an adaptive templates script to access an imported region.\nYou can then modify and interact with the region in the same way as for any other region object.\nThe name, properties, and parent regions of the imported region can be defined.\nTo replace an existing region with an imported DXF region, use the Region.replace() method.\nAs with any region object, it is set in the Motor-CAD model using the set_region() method. The\nimported region then appears under Template in the Geometry tree shown in the\nGeometry -> Editor -> Geometry tab in Motor-CAD.\nAdd imported DXF geometries to adaptive templates\nget_region_dxf()\nansys.motorcad.core\nget_region_dxf()\nRegion.replace()\nset_region()"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_transient_analysis",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_transient_analysis.html#do_transient_analysis",
        "title": "do_transient_analysis",
        "section": "do_transient_analysis",
        "text": "Run the thermal transient analysis.\ndo_transient_analysis"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_transient_analysis",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_transient_analysis.html#ansys.motorcad.core.motorcad_methods.MotorCAD.do_transient_analysis",
        "title": "do_transient_analysis > do_transient_analysis > do_transient_analysis",
        "section": "do_transient_analysis > do_transient_analysis",
        "text": "MotorCAD.do_transient_analysis()\n\nRun the thermal transient analysis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/advanced/force_extraction",
        "href": "examples/advanced/force_extraction.html#motor-cad-force-extraction-example-script",
        "title": "Motor-CAD force extraction example script",
        "section": "Motor-CAD force extraction example script",
        "text": "todo: expand this…\nPerform required imports\nLaunch Motor-CAD\nDisable pop-up messages\nLoad a baseline model - in this case a template.\nFor users, this would normally be a baseline model\nSet up the point we want to extract\nRun the calculation (Assume that it has already been set up as required)\nHow many cycles have been run\nExtract max space order that exists in the calculation\nGet the indexes to use in querying the force:\nrequired_time_order should always be 0 or positive. This is the order of\nthe number of cycles run, which will be the same as electrical order if\nelectrical_cycles = 1\nResults stored with negative space orders at the end, so apply offset\nFind the force density using GetMagnetic3DGraphPoint:\nNote the use of _Th1 for the 1st operating point in the name.\nApply 2x factor due to FFT symmetry, unless 0th time order (mean)\nThis is equivalent to showing results with ‘Positive time only’\nMotor-CAD force extraction example script"
    },
    {
        "objectID": "examples/advanced/force_extraction",
        "href": "examples/advanced/force_extraction.html#results",
        "title": "Motor-CAD force extraction example script > Results",
        "section": "Results",
        "text": "Total running time of the script: (2 minutes 7.002 seconds)\nDownload Jupyter notebook: force_extraction.ipynb\nDownload Python source code: force_extraction.py\nDownload zipped: force_extraction.zip\nGallery generated by Sphinx-Gallery\nResults\nDownload Jupyter notebook: force_extraction.ipynb\nDownload Python source code: force_extraction.py\nDownload zipped: force_extraction.zip"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.mirror",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.mirror.html#mirror",
        "title": "mirror",
        "section": "mirror",
        "text": "Mirror Coordinate about a line entity.\nLine entity to mirror coordinate about\nmirror\nansys.motorcad.core.geometry.Line\nansys.motorcad.core.geometry.Coordinate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.mirror",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.mirror.html#ansys.motorcad.core.geometry.Coordinate.mirror",
        "title": "mirror > mirror > mirror",
        "section": "mirror > mirror",
        "text": "Coordinate.mirror(mirror_line)\n\nMirror Coordinate about a line entity.\n\nParameters\n\nmirror_line\n\nansys.motorcad.core.geometry.Line\n\nLine entity to mirror coordinate about\n\nReturns\n\nansys.motorcad.core.geometry.Coordinate\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/advanced/index",
        "href": "examples/advanced/index.html#advanced-examples",
        "title": "Advanced examples",
        "section": "Advanced examples",
        "text": "These examples show you how to use the basic functionality of PyMotorCAD.\nsphx_glr_examples_advanced_force_extraction.py\nAdvanced examples"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.Add_Region_Thermal",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.Add_Region_Thermal.html#add_region_thermal",
        "title": "Add_Region_Thermal",
        "section": "Add_Region_Thermal",
        "text": "Deprecated function.\nAdd_Region_Thermal"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.Add_Region_Thermal",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.Add_Region_Thermal.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.Add_Region_Thermal",
        "title": "Add_Region_Thermal > Add_Region_Thermal > Add_Region_Thermal",
        "section": "Add_Region_Thermal > Add_Region_Thermal",
        "text": "MotorCADCompatibility.Add_Region_Thermal(*args)\n\nDeprecated function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.InitialiseTabNames",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.InitialiseTabNames.html#initialisetabnames",
        "title": "InitialiseTabNames",
        "section": "InitialiseTabNames",
        "text": "Deprecated function. Replaced by MotorCAD.initialise_tab_names().\nInitialiseTabNames\nMotorCAD.initialise_tab_names()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.InitialiseTabNames",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.InitialiseTabNames.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.InitialiseTabNames",
        "title": "InitialiseTabNames > InitialiseTabNames > InitialiseTabNames",
        "section": "InitialiseTabNames > InitialiseTabNames",
        "text": "MotorCADCompatibility.InitialiseTabNames()\n\nDeprecated function. Replaced by MotorCAD.initialise_tab_names().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.html#entitylist",
        "title": "EntityList",
        "section": "EntityList",
        "text": "Generic class for list of Entities.\nEntityList.append(object, /)\nAppend object to the end of the list.\nEntityList.clear(/)\nRemove all items from list.\nEntityList.copy(/)\nReturn a shallow copy of the list.\nEntityList.count(value, /)\nReturn number of occurrences of value.\nEntityList.extend(iterable, /)\nExtend list by appending elements from the iterable.\nEntityList.index(value[, start, stop])\nReturn first index of value.\nEntityList.insert(index, object, /)\nInsert object before index.\nEntityList.pop([index])\nRemove and return item at index (default last).\nEntityList.remove(value, /)\nRemove first occurrence of value.\nEntityList.reverse()\nReverse EntityList, including entity start end coordinates.\nEntityList.sort(*[, key, reverse])\nSort the list in ascending order and return None.\nEntityList.points\nGet points of shape/region from Entity list.\nEntityList\nEntityList.append\nEntityList.clear\nEntityList.copy\nEntityList.count\nEntityList.extend\nEntityList.index\nEntityList.insert\nEntityList.pop\nEntityList.remove\nEntityList.reverse\nEntityList.sort\nEntityList.points"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.html#ansys.motorcad.core.geometry.EntityList",
        "title": "EntityList > EntityList > EntityList",
        "section": "EntityList > EntityList",
        "text": "class ansys.motorcad.core.geometry.EntityList(iterable=(), /)\n\nGeneric class for list of Entities.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nEntityList.append(object, /)\n\nAppend object to the end of the list.\n\nEntityList.clear(/)\n\nRemove all items from list.\n\nEntityList.copy(/)\n\nReturn a shallow copy of the list.\n\nEntityList.count(value, /)\n\nReturn number of occurrences of value.\n\nEntityList.extend(iterable, /)\n\nExtend list by appending elements from the iterable.\n\nEntityList.index(value[, start, stop])\n\nReturn first index of value.\n\nEntityList.insert(index, object, /)\n\nInsert object before index.\n\nEntityList.pop([index])\n\nRemove and return item at index (default last).\n\nEntityList.remove(value, /)\n\nRemove first occurrence of value.\n\nEntityList.reverse()\n\nReverse EntityList, including entity start end coordinates.\n\nEntityList.sort(*[, key, reverse])\n\nSort the list in ascending order and return None.\n\n\n\nAttributes\n\n\n\n\n\n\n\nEntityList.points\n\nGet points of shape/region from Entity list.\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.shaft",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.shaft.html#shaft",
        "title": "shaft",
        "section": "shaft",
        "text": "shaft"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.shaft",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.shaft.html#ansys.motorcad.core.geometry.RegionType.shaft",
        "title": "shaft > shaft > shaft",
        "section": "shaft > shaft",
        "text": "RegionType.shaft = 'Shaft'\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.coil_separator",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.coil_separator.html#coil_separator",
        "title": "coil_separator",
        "section": "coil_separator",
        "text": "coil_separator"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.coil_separator",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.coil_separator.html#ansys.motorcad.core.geometry.RegionType.coil_separator",
        "title": "coil_separator > coil_separator > coil_separator",
        "section": "coil_separator > coil_separator",
        "text": "RegionType.coil_separator = 'Coil Separator'\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.edit_point",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.edit_point.html#edit_point",
        "title": "edit_point",
        "section": "edit_point",
        "text": "Edit a point in the region and update entities.\nPosition of point to edit\nPosition to move the point to\nedit_point\nCoordinate\nCoordinate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.edit_point",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.edit_point.html#ansys.motorcad.core.geometry.Region.edit_point",
        "title": "edit_point > edit_point > edit_point",
        "section": "edit_point > edit_point",
        "text": "Region.edit_point(old_coordinates, new_coordinates)\n\nEdit a point in the region and update entities.\n\nParameters\n\nold_coordinates\n\nCoordinate\n\nPosition of point to edit\n\nnew_coordinates\n\nCoordinate\n\nPosition to move the point to\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Utility/ansys.motorcad.core.motorcad_methods.MotorCAD.is_open",
        "href": "methods/_autosummary_Utility/ansys.motorcad.core.motorcad_methods.MotorCAD.is_open.html#is_open",
        "title": "is_open",
        "section": "is_open",
        "text": "Check if the Motor-CAD executable file is running.\nTrue if the Motor-CAD executable file is still running,\nFalse if this file is not running.\nis_open\nTrue\nFalse"
    },
    {
        "objectID": "methods/_autosummary_Utility/ansys.motorcad.core.motorcad_methods.MotorCAD.is_open",
        "href": "methods/_autosummary_Utility/ansys.motorcad.core.motorcad_methods.MotorCAD.is_open.html#ansys.motorcad.core.motorcad_methods.MotorCAD.is_open",
        "title": "is_open > is_open > is_open",
        "section": "is_open > is_open",
        "text": "MotorCAD.is_open()\n\nCheck if the Motor-CAD executable file is running.\n\nReturns\n\nbool\n\nTrue if the Motor-CAD executable file is still running,\nFalse if this file is not running.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.material",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.material.html#material",
        "title": "material",
        "section": "material",
        "text": "Get or set region material name.\nmaterial"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.material",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.material.html#ansys.motorcad.core.geometry.Region.material",
        "title": "material > material > material",
        "section": "material > material",
        "text": "property Region.material\n\nGet or set region material name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.translate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.translate.html#translate",
        "title": "translate",
        "section": "translate",
        "text": "Translate Entity by specified x,y distances.\nx distance.\ny distance.\ntranslate\npython:float\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.translate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.translate.html#ansys.motorcad.core.geometry.Line.translate",
        "title": "translate > translate > translate",
        "section": "translate > translate",
        "text": "Line.translate(x, y)\n\nTranslate Entity by specified x,y distances.\n\nParameters\n\nx\n\npython:float\n\nx distance.\n\ny\n\npython:float\n\ny distance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_slot_spacer",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_slot_spacer.html#stator_slot_spacer",
        "title": "stator_slot_spacer",
        "section": "stator_slot_spacer",
        "text": "stator_slot_spacer"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_slot_spacer",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_slot_spacer.html#ansys.motorcad.core.geometry.RegionType.stator_slot_spacer",
        "title": "stator_slot_spacer > stator_slot_spacer > stator_slot_spacer",
        "section": "stator_slot_spacer > stator_slot_spacer",
        "text": "RegionType.stator_slot_spacer = 'Stator Slot Spacer'\n\n"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.update_force_analysis_results",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.update_force_analysis_results.html#update_force_analysis_results",
        "title": "update_force_analysis_results",
        "section": "update_force_analysis_results",
        "text": "Update force analysis results for the multiforce operating point.\nFFT data type. Options are:\n0: 1D Temporal Harmonics\n1: 1D Spatial Harmonics\nupdate_force_analysis_results\npython:int"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.update_force_analysis_results",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.update_force_analysis_results.html#ansys.motorcad.core.motorcad_methods.MotorCAD.update_force_analysis_results",
        "title": "update_force_analysis_results > update_force_analysis_results > update_force_analysis_results",
        "section": "update_force_analysis_results > update_force_analysis_results",
        "text": "MotorCAD.update_force_analysis_results(fft_data_type)\n\nUpdate force analysis results for the multiforce operating point.\n\nParameters\n\nfft_data_type\n\npython:int\n\nFFT data type. Options are:\n\n0: 1D Temporal Harmonics\n\n1: 1D Spatial Harmonics\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/internal_scripting/mechanical_force",
        "href": "examples/internal_scripting/mechanical_force.html#mechanical-force",
        "title": "Mechanical force",
        "section": "Mechanical force",
        "text": "This example demonstrates internal scripting mechanical force functionality\nThis will compute the operating conditions for some requested torque values\nand display the natural frequencies for the 0th and 8th modes.\nPerform required imports\nLaunch Motor-CAD\nCreate internal script.\nThis could also be saved in a separate file\nMechanical force"
    },
    {
        "objectID": "examples/internal_scripting/mechanical_force",
        "href": "examples/internal_scripting/mechanical_force.html#note",
        "title": "Mechanical force > Note",
        "section": "Note",
        "text": "For further details, please see the E-NVH tutorial.\nNote"
    },
    {
        "objectID": "examples/internal_scripting/mechanical_force",
        "href": "examples/internal_scripting/mechanical_force.html#pymotorcad-documentation-example",
        "title": "Mechanical force > PyMotorCAD Documentation Example",
        "section": "PyMotorCAD Documentation Example",
        "text": "(Used for the PyMotorCAD Documentation Examples only)\nTotal running time of the script: (2 minutes 9.440 seconds)\nDownload Jupyter notebook: mechanical_force.ipynb\nDownload Python source code: mechanical_force.py\nDownload zipped: mechanical_force.zip\nGallery generated by Sphinx-Gallery\nPyMotorCAD Documentation Example\nDownload Jupyter notebook: mechanical_force.ipynb\nDownload Python source code: mechanical_force.py\nDownload zipped: mechanical_force.zip"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateGenerator_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateGenerator_Lab.html#calculategenerator_lab",
        "title": "CalculateGenerator_Lab",
        "section": "CalculateGenerator_Lab",
        "text": "Deprecated function. Replaced by MotorCAD.calculate_generator_lab().\nCalculateGenerator_Lab\nMotorCAD.calculate_generator_lab()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateGenerator_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateGenerator_Lab.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateGenerator_Lab",
        "title": "CalculateGenerator_Lab > CalculateGenerator_Lab > CalculateGenerator_Lab",
        "section": "CalculateGenerator_Lab > CalculateGenerator_Lab",
        "text": "MotorCADCompatibility.CalculateGenerator_Lab()\n\nDeprecated function. Replaced by MotorCAD.calculate_generator_lab().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.mirror",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.mirror.html#mirror",
        "title": "mirror",
        "section": "mirror",
        "text": "Mirror entity about a line.\nLine entity to mirror entity about\nmirror\nansys.motorcad.core.geometry.Line\nansys.motorcad.core.geometry.Entity"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.mirror",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.mirror.html#ansys.motorcad.core.geometry.Entity.mirror",
        "title": "mirror > mirror > mirror",
        "section": "mirror > mirror",
        "text": "Entity.mirror(mirror_line)\n\nMirror entity about a line.\n\nParameters\n\nmirror_line\n\nansys.motorcad.core.geometry.Line\n\nLine entity to mirror entity about\n\nReturns\n\nansys.motorcad.core.geometry.Entity\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.translate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.translate.html#translate",
        "title": "translate",
        "section": "translate",
        "text": "Translate Coordinate by specified x,y distances.\nx distance.\ny distance.\ntranslate\npython:float\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.translate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.translate.html#ansys.motorcad.core.geometry.Coordinate.translate",
        "title": "translate > translate > translate",
        "section": "translate > translate",
        "text": "Coordinate.translate(x, y)\n\nTranslate Coordinate by specified x,y distances.\n\nParameters\n\nx\n\npython:float\n\nx distance.\n\ny\n\npython:float\n\ny distance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.modify_node",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.modify_node.html#modify_node",
        "title": "modify_node",
        "section": "modify_node",
        "text": "Modify an existing node.\nmodify_node"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.modify_node",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.modify_node.html#ansys.motorcad.core.motorcad_methods.MotorCAD.modify_node",
        "title": "modify_node > modify_node > modify_node",
        "section": "modify_node > modify_node",
        "text": "MotorCAD.modify_node(name, node1, row, column, colour, description)\n\nModify an existing node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.Add_Region_Thermal_A",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.Add_Region_Thermal_A.html#add_region_thermal_a",
        "title": "Add_Region_Thermal_A",
        "section": "Add_Region_Thermal_A",
        "text": "Deprecated function.\nAdd_Region_Thermal_A"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.Add_Region_Thermal_A",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.Add_Region_Thermal_A.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.Add_Region_Thermal_A",
        "title": "Add_Region_Thermal_A > Add_Region_Thermal_A > Add_Region_Thermal_A",
        "section": "Add_Region_Thermal_A > Add_Region_Thermal_A",
        "text": "MotorCADCompatibility.Add_Region_Thermal_A(*args)\n\nDeprecated function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_area_rotor",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_area_rotor.html#slot_area_rotor",
        "title": "slot_area_rotor",
        "section": "slot_area_rotor",
        "text": "slot_area_rotor"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_area_rotor",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_area_rotor.html#ansys.motorcad.core.geometry.RegionType.slot_area_rotor",
        "title": "slot_area_rotor > slot_area_rotor > slot_area_rotor",
        "section": "slot_area_rotor > slot_area_rotor",
        "text": "RegionType.slot_area_rotor = 'Rotor Slot Area'\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.round_corner",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.round_corner.html#round_corner",
        "title": "round_corner",
        "section": "round_corner",
        "text": "Round the corner of a region.\nThe corner coordinates must already exist on two entities belonging to the region.\nThe two entities adjacent to the corner are shortened, and an arc is created between\nthem.\nCoordinate of the corner to round.\nRadius to round the corner by.\nround_corner\nansys.motorcad.core.geometry.Coordinate\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.round_corner",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.round_corner.html#ansys.motorcad.core.geometry.RegionMagnet.round_corner",
        "title": "round_corner > round_corner > round_corner",
        "section": "round_corner > round_corner",
        "text": "RegionMagnet.round_corner(corner_coordinate, radius)\n\nRound the corner of a region.\n\nThe corner coordinates must already exist on two entities belonging to the region.\nThe two entities adjacent to the corner are shortened, and an arc is created between\nthem.\n\nParameters\n\ncorner_coordinate\n\nansys.motorcad.core.geometry.Coordinate\n\nCoordinate of the corner to round.\n\nradius\n\npython:float\n\nRadius to round the corner by.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.add_external_custom_loss",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.add_external_custom_loss.html#add_external_custom_loss",
        "title": "add_external_custom_loss",
        "section": "add_external_custom_loss",
        "text": "Add an external custom loss.\nName of lab external custom loss\nPower function for lab external custom loss\nFunction for voltage drop for lab external custom loss\nadd_external_custom_loss\npython:str\npython:str\npython:str"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.add_external_custom_loss",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.add_external_custom_loss.html#ansys.motorcad.core.motorcad_methods.MotorCAD.add_external_custom_loss",
        "title": "add_external_custom_loss > add_external_custom_loss > add_external_custom_loss",
        "section": "add_external_custom_loss > add_external_custom_loss",
        "text": "MotorCAD.add_external_custom_loss(name, power_function, voltage_function)\n\nAdd an external custom loss.\n\nParameters\n\nname\n\npython:str\n\nName of lab external custom loss\n\npower_function\n\npython:str\n\nPower function for lab external custom loss\n\nvoltage_function\n\npython:str\n\nFunction for voltage drop for lab external custom loss\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.html#region",
        "title": "Region",
        "section": "Region",
        "text": "Python representation of Motor-CAD geometry region.\nRegion.add_entity(entity)\nAdd entity to list of region entities.\nRegion.add_point(point)\nAdd a new point into region on an existing Line/Arc.\nRegion.collides(regions)\nCheck whether any of the specified regions collide with self.\nRegion.edit_point(old_coordinates, ...)\nEdit a point in the region and update entities.\nRegion.find_entity_from_coordinates(...)\nSearch through region to find an entity with start and end coordinates.\nRegion.from_coordinate_list()\nWork in progress.\nRegion.insert_entity(index, entity)\nInsert entity to list of region entities at given index.\nRegion.insert_polyline(index, polyline)\nInsert polyline at given index, polyline can be made up of line/arc entities.\nRegion.is_closed()\nCheck whether region entities create a closed region.\nRegion.limit_arc_chord(max_chord_height)\nLimit the chord height for arcs in a region.\nRegion.mirror(mirror_line[, unique_name])\nMirror region along entity.\nRegion.remove_entity(entity_remove)\nRemove the entity from the region.\nRegion.replace(replacement_region)\nReplace self with another region.\nRegion.rotate(centre_point, angle)\nRotate Region around a point for a given angle.\nRegion.round_corner(corner_coordinate, radius)\nRound the corner of a region.\nRegion.round_corners(corner_coordinates, radius)\nRound multiple corners of a region.\nRegion.subtract(region)\nSubtract region from self, returning any additional regions.\nRegion.translate(x, y)\nTranslate Region by specified x,y distances.\nRegion.unite(regions)\nUnite one or more other regions with self.\nRegion.update(region)\nUpdate class fields from another region.\nRegion.area\nGet the region area.\nRegion.centroid\nGet the region centroid.\nRegion.child_names\nGet child names list.\nRegion.children\nReturn list of child regions from Motor-CAD.\nRegion.colour\nGet or set region colour.\nRegion.duplications\nGet or set number of region duplications for the full machine.\nRegion.entities\nGet or set the list of entities in the region.\nRegion.lamination_type\nGet or set lamination type of region from Motor-CAD.\nRegion.linked_region\nGet or set linked duplication/unite region.\nRegion.material\nGet or set region material name.\nRegion.mesh_length\nGet or set the mesh length to use, or 0 for default.\nRegion.motorcad_instance\nGet or set the linked Motor-CAD instance.\nRegion.name\nGet or set region name.\nRegion.parent\nGet or set parent region from Motor-CAD.\nRegion.parent_name\nGet or set the region parent name.\nRegion.points\nGet points that exist in region.\nRegion.region_coordinate\nGet the reference coordinate within the region.\nRegion.region_type\nGet region type.\nRegion.singular\nGet or set if region is singular.\nRegion\nRegion.add_entity\nRegion.add_point\nRegion.collides\nRegion.edit_point\nRegion.find_entity_from_coordinates\nRegion.from_coordinate_list\nRegion.insert_entity\nRegion.insert_polyline\nRegion.is_closed\nRegion.limit_arc_chord\nRegion.mirror\nRegion.remove_entity\nRegion.replace\nRegion.rotate\nRegion.round_corner\nRegion.round_corners\nRegion.subtract\nRegion.translate\nRegion.unite\nRegion.update\nRegion.area\nRegion.centroid\nRegion.child_names\nRegion.children\nRegion.colour\nRegion.duplications\nRegion.entities\nRegion.lamination_type\nRegion.linked_region\nRegion.material\nRegion.mesh_length\nRegion.motorcad_instance\nRegion.name\nRegion.parent\nRegion.parent_name\nRegion.points\nRegion.region_coordinate\nRegion.region_type\nRegion.singular"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.html#ansys.motorcad.core.geometry.Region",
        "title": "Region > Region > Region",
        "section": "Region > Region",
        "text": "class ansys.motorcad.core.geometry.Region(motorcad_instance=None)\n\nPython representation of Motor-CAD geometry region.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nRegion.add_entity(entity)\n\nAdd entity to list of region entities.\n\nRegion.add_point(point)\n\nAdd a new point into region on an existing Line/Arc.\n\nRegion.collides(regions)\n\nCheck whether any of the specified regions collide with self.\n\nRegion.edit_point(old_coordinates, ...)\n\nEdit a point in the region and update entities.\n\nRegion.find_entity_from_coordinates(...)\n\nSearch through region to find an entity with start and end coordinates.\n\nRegion.from_coordinate_list()\n\nWork in progress.\n\nRegion.insert_entity(index, entity)\n\nInsert entity to list of region entities at given index.\n\nRegion.insert_polyline(index, polyline)\n\nInsert polyline at given index, polyline can be made up of line/arc entities.\n\nRegion.is_closed()\n\nCheck whether region entities create a closed region.\n\nRegion.limit_arc_chord(max_chord_height)\n\nLimit the chord height for arcs in a region.\n\nRegion.mirror(mirror_line[, unique_name])\n\nMirror region along entity.\n\nRegion.remove_entity(entity_remove)\n\nRemove the entity from the region.\n\nRegion.replace(replacement_region)\n\nReplace self with another region.\n\nRegion.rotate(centre_point, angle)\n\nRotate Region around a point for a given angle.\n\nRegion.round_corner(corner_coordinate, radius)\n\nRound the corner of a region.\n\nRegion.round_corners(corner_coordinates, radius)\n\nRound multiple corners of a region.\n\nRegion.subtract(region)\n\nSubtract region from self, returning any additional regions.\n\nRegion.translate(x, y)\n\nTranslate Region by specified x,y distances.\n\nRegion.unite(regions)\n\nUnite one or more other regions with self.\n\nRegion.update(region)\n\nUpdate class fields from another region.\n\n\n\nAttributes\n\n\n\n\n\n\n\nRegion.area\n\nGet the region area.\n\nRegion.centroid\n\nGet the region centroid.\n\nRegion.child_names\n\nGet child names list.\n\nRegion.children\n\nReturn list of child regions from Motor-CAD.\n\nRegion.colour\n\nGet or set region colour.\n\nRegion.duplications\n\nGet or set number of region duplications for the full machine.\n\nRegion.entities\n\nGet or set the list of entities in the region.\n\nRegion.lamination_type\n\nGet or set lamination type of region from Motor-CAD.\n\nRegion.linked_region\n\nGet or set linked duplication/unite region.\n\nRegion.material\n\nGet or set region material name.\n\nRegion.mesh_length\n\nGet or set the mesh length to use, or 0 for default.\n\nRegion.motorcad_instance\n\nGet or set the linked Motor-CAD instance.\n\nRegion.name\n\nGet or set region name.\n\nRegion.parent\n\nGet or set parent region from Motor-CAD.\n\nRegion.parent_name\n\nGet or set the region parent name.\n\nRegion.points\n\nGet points that exist in region.\n\nRegion.region_coordinate\n\nGet the reference coordinate within the region.\n\nRegion.region_type\n\nGet region type.\n\nRegion.singular\n\nGet or set if region is singular.\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.edit_point",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.edit_point.html#edit_point",
        "title": "edit_point",
        "section": "edit_point",
        "text": "Edit a point in the region and update entities.\nPosition of point to edit\nPosition to move the point to\nedit_point\nCoordinate\nCoordinate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.edit_point",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.edit_point.html#ansys.motorcad.core.geometry.RegionMagnet.edit_point",
        "title": "edit_point > edit_point > edit_point",
        "section": "edit_point > edit_point",
        "text": "RegionMagnet.edit_point(old_coordinates, new_coordinates)\n\nEdit a point in the region and update entities.\n\nParameters\n\nold_coordinates\n\nCoordinate\n\nPosition of point to edit\n\nnew_coordinates\n\nCoordinate\n\nPosition to move the point to\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.quit",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.quit.html#quit",
        "title": "quit",
        "section": "quit",
        "text": "Quit Motor-CAD.\nquit"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.quit",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.quit.html#ansys.motorcad.core.motorcad_methods.MotorCAD.quit",
        "title": "quit > quit > quit",
        "section": "quit > quit",
        "text": "MotorCAD.quit()\n\nQuit Motor-CAD.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_region_value",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_region_value.html#get_region_value",
        "title": "get_region_value",
        "section": "get_region_value",
        "text": "Calculate the integral value for an expression of a region.\nget_region_value"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_region_value",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_region_value.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_region_value",
        "title": "get_region_value > get_region_value > get_region_value",
        "section": "get_region_value > get_region_value",
        "text": "MotorCAD.get_region_value(expression, region_name)\n\nCalculate the integral value for an expression of a region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.get_coordinate_from_percentage_distance",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.get_coordinate_from_percentage_distance.html#get_coordinate_from_percentage_distance",
        "title": "get_coordinate_from_percentage_distance",
        "section": "get_coordinate_from_percentage_distance",
        "text": "Get the coordinate at a fractional distance along the arc from the reference coord.\nThis method is deprecated. Use the Arc.get_coordinate_from_distance()\nmethod with the fraction = ` or `percentage = argument.\nEntity reference coordinate.\nFractional distance along Arc.\nCoordinate at fractional distance along Arc.\nget_coordinate_from_percentage_distance\nArc.get_coordinate_from_distance()\nCoordinate\npython:float\nCoordinate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.get_coordinate_from_percentage_distance",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.get_coordinate_from_percentage_distance.html#ansys.motorcad.core.geometry.Arc.get_coordinate_from_percentage_distance",
        "title": "get_coordinate_from_percentage_distance > get_coordinate_from_percentage_distance > get_coordinate_from_percentage_distance",
        "section": "get_coordinate_from_percentage_distance > get_coordinate_from_percentage_distance",
        "text": "Arc.get_coordinate_from_percentage_distance(ref_coordinate, fraction)\n\nGet the coordinate at a fractional distance along the arc from the reference coord.\n\nThis method is deprecated. Use the Arc.get_coordinate_from_distance()\nmethod with the fraction = ` or `percentage = argument.\n\nParameters\n\nref_coordinate\n\nCoordinate\n\nEntity reference coordinate.\n\nfraction\n\npython:float\n\nFractional distance along Arc.\n\nReturns\n\nCoordinate\n\nCoordinate at fractional distance along Arc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_results",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_results.html#save_results",
        "title": "save_results",
        "section": "save_results",
        "text": "Save the output results from an \"EMagnetic\" or \"Thermal\" solution.\nThis method supports only \"EMagnetic\" or \"Thermal\" solutions.\nSolution type, which must be \"EMagnetic\" or \"Thermal\".\nsave_results\n\"EMagnetic\"\n\"Thermal\"\n\"EMagnetic\"\n\"Thermal\"\npython:str\n\"EMagnetic\"\n\"Thermal\""
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_results",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_results.html#ansys.motorcad.core.motorcad_methods.MotorCAD.save_results",
        "title": "save_results > save_results > save_results",
        "section": "save_results > save_results",
        "text": "MotorCAD.save_results(solution_type)\n\nSave the output results from an \"EMagnetic\" or \"Thermal\" solution.\n\nThis method supports only \"EMagnetic\" or \"Thermal\" solutions.\n\nParameters\n\nsolution_type\n\npython:str\n\nSolution type, which must be \"EMagnetic\" or \"Thermal\".\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autogen_Adaptive Geometry",
        "href": "methods/_autogen_Adaptive Geometry.html#adaptive-geometry",
        "title": "Adaptive Geometry",
        "section": "Adaptive Geometry",
        "text": "check_closed_region(region)\nCheck region is closed using region detection.\ncheck_collisions(region, regions_to_check)\nCheck region does not collide with other geometry regions.\ndelete_region(region[, remove_children])\nDelete region from Motor-CAD geometry engine.\nget_adaptive_parameter_value(name)\nGet adaptive parameter.\nget_region(name)\nGet Motor-CAD geometry region.\nget_region_dxf(name)\nGet Motor-CAD dxf geometry region.\nload_adaptive_script(filepath)\nLoad adaptive templates script file to Motor-CAD.\nreset_adaptive_geometry()\nReset geometry to default.\nsave_adaptive_script(filepath)\nSave adaptive templates script from Motor-CAD to file.\nset_adaptive_parameter_default(name, value)\nSet default value for an adaptive parameter, if the parameter does not already exist.\nset_adaptive_parameter_value(name, value)\nSet adaptive parameter, if parameter does not exist then add it.\nset_region(region)\nSet Motor-CAD geometry region.\nsubtract_region(region, region_subtract)\nSubtract Motor-CAD region (region_subtract) from another Motor-CAD region (region).\nunite_regions(region, regions)\nUnite region with two or more other regions.\nAdaptive Geometry\ncheck_closed_region\ncheck_collisions\ndelete_region\nget_adaptive_parameter_value\nget_region\nget_region_dxf\nload_adaptive_script\nreset_adaptive_geometry\nsave_adaptive_script\nset_adaptive_parameter_default\nset_adaptive_parameter_value\nset_region\nsubtract_region\nunite_regions"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFEAPathLine",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFEAPathLine.html#setfeapathline",
        "title": "SetFEAPathLine",
        "section": "SetFEAPathLine",
        "text": "Deprecated function. Replaced by MotorCAD.set_fea_path_line().\nSetFEAPathLine\nMotorCAD.set_fea_path_line()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFEAPathLine",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFEAPathLine.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFEAPathLine",
        "title": "SetFEAPathLine > SetFEAPathLine > SetFEAPathLine",
        "section": "SetFEAPathLine > SetFEAPathLine",
        "text": "MotorCADCompatibility.SetFEAPathLine(*args)\n\nDeprecated function. Replaced by MotorCAD.set_fea_path_line().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_temperature_graph",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_temperature_graph.html#get_temperature_graph",
        "title": "get_temperature_graph",
        "section": "get_temperature_graph",
        "text": "Get graph points from a Motor-CAD transient temperature graph.\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\nvalue of x coordinates from graph\nvalue of y coordinates from graph\nget_temperature_graph\npython:str\npython:int\npython:list\npython:list"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_temperature_graph",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_temperature_graph.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_temperature_graph",
        "title": "get_temperature_graph > get_temperature_graph > get_temperature_graph",
        "section": "get_temperature_graph > get_temperature_graph",
        "text": "MotorCAD.get_temperature_graph(graph_name)\n\nGet graph points from a Motor-CAD transient temperature graph.\n\nParameters\n\ngraph_name\n\npython:str, python:int\n\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\n\nReturns\n\n\n\n——-\n\n\n\nx_values\n\npython:list\n\nvalue of x coordinates from graph\n\ny_values\n\npython:list\n\nvalue of y coordinates from graph\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_Magnetic_XY",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_Magnetic_XY.html#addpoint_magnetic_xy",
        "title": "AddPoint_Magnetic_XY",
        "section": "AddPoint_Magnetic_XY",
        "text": "Deprecated function. Replaced by MotorCAD.add_point_magnetic_xy().\nAddPoint_Magnetic_XY\nMotorCAD.add_point_magnetic_xy()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_Magnetic_XY",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_Magnetic_XY.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_Magnetic_XY",
        "title": "AddPoint_Magnetic_XY > AddPoint_Magnetic_XY > AddPoint_Magnetic_XY",
        "section": "AddPoint_Magnetic_XY > AddPoint_Magnetic_XY",
        "text": "MotorCADCompatibility.AddPoint_Magnetic_XY(*args)\n\nDeprecated function. Replaced by MotorCAD.add_point_magnetic_xy().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/basics/emag_basics",
        "href": "examples/basics/emag_basics.html#motor-cad-e-magnetic-example-script",
        "title": "Motor-CAD E-magnetic example script",
        "section": "Motor-CAD E-magnetic example script",
        "text": "This example provides a Motor-CAD E-magnetic script. This script\ncreates a partial custom winding pattern to change\nparameter values, run the analysis, and plot results. To create\na full winding pattern, parameters must be specified\nfor all coils.\nMotor-CAD E-magnetic example script"
    },
    {
        "objectID": "examples/basics/emag_basics",
        "href": "examples/basics/emag_basics.html#set-up-example",
        "title": "Motor-CAD E-magnetic example script > Set up example",
        "section": "Set up example",
        "text": "Setting up this example consists of performing imports, specifying the\nworking directory, launching Motor-CAD, and disabling all popup\nmessages from Motor-CAD.\nSet up example"
    },
    {
        "objectID": "examples/basics/emag_basics",
        "href": "examples/basics/emag_basics.html#perform-required-imports",
        "title": "Motor-CAD E-magnetic example script > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform required imports"
    },
    {
        "objectID": "examples/basics/emag_basics",
        "href": "examples/basics/emag_basics.html#specify-working-directory",
        "title": "Motor-CAD E-magnetic example script > Specify working directory",
        "section": "Specify working directory",
        "text": "Specify working directory"
    },
    {
        "objectID": "examples/basics/emag_basics",
        "href": "examples/basics/emag_basics.html#launch-motor-cad",
        "title": "Motor-CAD E-magnetic example script > Launch Motor-CAD",
        "section": "Launch Motor-CAD",
        "text": "Launch Motor-CAD"
    },
    {
        "objectID": "examples/basics/emag_basics",
        "href": "examples/basics/emag_basics.html#disable-popup-messages",
        "title": "Motor-CAD E-magnetic example script > Disable popup messages",
        "section": "Disable popup messages",
        "text": "Disable popup messages"
    },
    {
        "objectID": "examples/basics/emag_basics",
        "href": "examples/basics/emag_basics.html#create-analysis",
        "title": "Motor-CAD E-magnetic example script > Create analysis",
        "section": "Create analysis",
        "text": "Creating the analysis consists of showing the magnetic context, displaying\nthe Scripting tab, setting the geometry and parameters, and saving\nthe file.\nShow the magnetic context.\nDisplay the Scripting tab.\nSet the geometry.\nSet parameters for creating the custom winding pattern.\nThe following code creates only a partial winding pattern.\nSet the winding type to custom:\nmcad.set_variable('MagWindingType', 1)\nSet the path type to upper and lower:\nmcad.set_variable('MagPathType', 1)\nSet the number of phases:\nmcad.set_variable('MagPhases', 3)\nSet the number of parallel paths:\nmcad.set_variable('ParallelPaths', 1)\nSet the number of winding layers:\nmcad.set_variable('WindingLayers', 2)\nDefine a coil’s parameters:\nset_winding_coil(phase,\npath, coil, go_slot, go_position, return_slot, return_position, turns)\nSet the stator/rotor lamination materials.\nSet the torque calculation options.\nDisable all performance tests except the ones for transient torque.\nEnable transient torque.\nSet the operating point.\nSave the file.\nCreate analysis\nmcad.set_variable('MagWindingType', 1)\nmcad.set_variable('MagPathType', 1)\nmcad.set_variable('MagPhases', 3)\nmcad.set_variable('ParallelPaths', 1)\nmcad.set_variable('WindingLayers', 2)\nset_winding_coil(phase,\npath, coil, go_slot, go_position, return_slot, return_position, turns)"
    },
    {
        "objectID": "examples/basics/emag_basics",
        "href": "examples/basics/emag_basics.html#run-simulation",
        "title": "Motor-CAD E-magnetic example script > Run simulation",
        "section": "Run simulation",
        "text": "Run the simulation.\nRun simulation"
    },
    {
        "objectID": "examples/basics/emag_basics",
        "href": "examples/basics/emag_basics.html#export-results-to-csv-file",
        "title": "Motor-CAD E-magnetic example script > Export results to CSV file",
        "section": "Export results to CSV file",
        "text": "Export results to a CSV file.\nExport results to CSV file"
    },
    {
        "objectID": "examples/basics/emag_basics",
        "href": "examples/basics/emag_basics.html#get-and-analyze-results",
        "title": "Motor-CAD E-magnetic example script > Get and analyze results",
        "section": "Get and analyze results",
        "text": "Get torque and voltage data.\nGraph the torque data.\nGraph the airgap flux density data.\nKeep looking until you cannot find the point.\nGraph the harmonic data.\nGet and analyze results"
    },
    {
        "objectID": "examples/basics/emag_basics",
        "href": "examples/basics/emag_basics.html#plot-results",
        "title": "Motor-CAD E-magnetic example script > Plot results",
        "section": "Plot results",
        "text": "Plot results from the simulation.\nPlot results"
    },
    {
        "objectID": "examples/basics/emag_basics",
        "href": "examples/basics/emag_basics.html#exit-motor-cad",
        "title": "Motor-CAD E-magnetic example script > Exit Motor-CAD",
        "section": "Exit Motor-CAD",
        "text": "Exit Motor-CAD.\nIf you want to continue working with this instance of Motor-CAD, rather\nthan using the preceding command, use this command:\nmcad.set_variable('MessageDisplayState', 0)\nTotal running time of the script: (0 minutes 39.751 seconds)\nDownload Jupyter notebook: emag_basics.ipynb\nDownload Python source code: emag_basics.py\nDownload zipped: emag_basics.zip\nGallery generated by Sphinx-Gallery\nExit Motor-CAD\nmcad.set_variable('MessageDisplayState', 0)\nDownload Jupyter notebook: emag_basics.ipynb\nDownload Python source code: emag_basics.py\nDownload zipped: emag_basics.zip"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.mesh_length",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.mesh_length.html#mesh_length",
        "title": "mesh_length",
        "section": "mesh_length",
        "text": "Get or set the mesh length to use, or 0 for default.\nmesh_length"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.mesh_length",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.mesh_length.html#ansys.motorcad.core.geometry.Region.mesh_length",
        "title": "mesh_length > mesh_length > mesh_length",
        "section": "mesh_length > mesh_length",
        "text": "property Region.mesh_length\n\nGet or set the mesh length to use, or 0 for default.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportToAnsysElectronicsDesktop",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportToAnsysElectronicsDesktop.html#exporttoansyselectronicsdesktop",
        "title": "ExportToAnsysElectronicsDesktop",
        "section": "ExportToAnsysElectronicsDesktop",
        "text": "Deprecated function. Replaced by MotorCAD.export_to_ansys_electronics_desktop().\nExportToAnsysElectronicsDesktop\nMotorCAD.export_to_ansys_electronics_desktop()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportToAnsysElectronicsDesktop",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportToAnsysElectronicsDesktop.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportToAnsysElectronicsDesktop",
        "title": "ExportToAnsysElectronicsDesktop > ExportToAnsysElectronicsDesktop > ExportToAnsysElectronicsDesktop",
        "section": "ExportToAnsysElectronicsDesktop > ExportToAnsysElectronicsDesktop",
        "text": "MotorCADCompatibility.ExportToAnsysElectronicsDesktop(*args)\n\nDeprecated function. Replaced by MotorCAD.export_to_ansys_electronics_desktop().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.reverse",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.reverse.html#reverse",
        "title": "reverse",
        "section": "reverse",
        "text": "Reverse EntityList, including entity start end coordinates.\nreverse"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.reverse",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.reverse.html#ansys.motorcad.core.geometry.EntityList.reverse",
        "title": "reverse > reverse > reverse",
        "section": "reverse > reverse",
        "text": "EntityList.reverse()\n\nReverse EntityList, including entity start end coordinates.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_3d_graph_point",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_3d_graph_point.html#get_magnetic_3d_graph_point",
        "title": "get_magnetic_3d_graph_point",
        "section": "get_magnetic_3d_graph_point",
        "text": "Get a point from a Motor-CAD magnetic 3D graph.\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\nWhich skew slice to get results from. Slice 1 is the first.\nPoint number to get x and y coordinate values from.\nValue of the x coordinate from the graph.\nValue of the y coordinate from the graph.\nget_magnetic_3d_graph_point\npython:str\npython:int\npython:int\npython:int\npython:float\npython:float"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_3d_graph_point",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_3d_graph_point.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_3d_graph_point",
        "title": "get_magnetic_3d_graph_point > get_magnetic_3d_graph_point > get_magnetic_3d_graph_point",
        "section": "get_magnetic_3d_graph_point > get_magnetic_3d_graph_point",
        "text": "MotorCAD.get_magnetic_3d_graph_point(graph_name, slice_number, point_number, time_step_number)\n\nGet a point from a Motor-CAD magnetic 3D graph.\n\nParameters\n\ngraph_name\n\npython:str, python:int\n\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\n\nslice_number\n\npython:int\n\nWhich skew slice to get results from. Slice 1 is the first.\n\npoint_number\n\npython:int\n\nPoint number to get x and y coordinate values from.\n\ntime_step_number\n\n\n\nReturns\n\nxValue\n\npython:float\n\nValue of the x coordinate from the graph.\n\nyValue\n\npython:float\n\nValue of the y coordinate from the graph.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.magnet_polarity",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.magnet_polarity.html#magnet_polarity",
        "title": "magnet_polarity",
        "section": "magnet_polarity",
        "text": "Polarity of the magnet.\nmagnet_polarity\npython:str"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.magnet_polarity",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.magnet_polarity.html#ansys.motorcad.core.geometry.RegionMagnet.magnet_polarity",
        "title": "magnet_polarity > magnet_polarity > magnet_polarity",
        "section": "magnet_polarity > magnet_polarity",
        "text": "property RegionMagnet.magnet_polarity\n\nPolarity of the magnet.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodeCapacitance",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodeCapacitance.html#getnodecapacitance",
        "title": "GetNodeCapacitance",
        "section": "GetNodeCapacitance",
        "text": "Deprecated function. Replaced by MotorCAD.get_node_capacitance().\nGetNodeCapacitance\nMotorCAD.get_node_capacitance()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodeCapacitance",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodeCapacitance.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodeCapacitance",
        "title": "GetNodeCapacitance > GetNodeCapacitance > GetNodeCapacitance",
        "section": "GetNodeCapacitance > GetNodeCapacitance",
        "text": "MotorCADCompatibility.GetNodeCapacitance(*args)\n\nDeprecated function. Replaced by MotorCAD.get_node_capacitance().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.gradient",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.gradient.html#gradient",
        "title": "gradient",
        "section": "gradient",
        "text": "Get gradient of line - A in equation (y = Ax + B).\nUndefined for vertical lines.\ngradient\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.gradient",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.gradient.html#ansys.motorcad.core.geometry.Line.gradient",
        "title": "gradient > gradient > gradient",
        "section": "gradient > gradient",
        "text": "property Line.gradient\n\nGet gradient of line - A in equation (y = Ax + B).\n\nUndefined for vertical lines.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.housing",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.housing.html#housing",
        "title": "housing",
        "section": "housing",
        "text": "housing"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.housing",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.housing.html#ansys.motorcad.core.geometry.RegionType.housing",
        "title": "housing > housing > housing",
        "section": "housing > housing",
        "text": "RegionType.housing = 'Housing'\n\n"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.save_adaptive_script",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.save_adaptive_script.html#save_adaptive_script",
        "title": "save_adaptive_script",
        "section": "save_adaptive_script",
        "text": "Save adaptive templates script from Motor-CAD to file.\nfull file path of script\nsave_adaptive_script\npython:str"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.save_adaptive_script",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.save_adaptive_script.html#ansys.motorcad.core.motorcad_methods.MotorCAD.save_adaptive_script",
        "title": "save_adaptive_script > save_adaptive_script > save_adaptive_script",
        "section": "save_adaptive_script > save_adaptive_script",
        "text": "MotorCAD.save_adaptive_script(filepath)\n\nSave adaptive templates script from Motor-CAD to file.\n\nParameters\n\nfilepath\n\npython:str\n\nfull file path of script\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.centre",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.centre.html#centre",
        "title": "centre",
        "section": "centre",
        "text": "Get centre point of circle defining arc.\ncentre\nCoordinate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.centre",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.centre.html#ansys.motorcad.core.geometry.Arc.centre",
        "title": "centre > centre > centre",
        "section": "centre > centre",
        "text": "property Arc.centre\n\nGet centre point of circle defining arc.\n\nReturns\n\nCoordinate\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/internal_scripting/thermal_steady_state",
        "href": "examples/internal_scripting/thermal_steady_state.html#thermal-steady-state",
        "title": "Thermal steady-state",
        "section": "Thermal steady-state",
        "text": "This example demonstrates internal scripting thermal steady-state functionality\nPerform required imports\nLaunch Motor-CAD\nWe will update the resistance between nodes with the following equation:\nresistance = (0.01 × ambient_temp) + 1\nThis function is called when “Run” is pressed\nThermal steady-state"
    },
    {
        "objectID": "examples/internal_scripting/thermal_steady_state",
        "href": "examples/internal_scripting/thermal_steady_state.html#pymotorcad-documentation-example",
        "title": "Thermal steady-state > PyMotorCAD Documentation Example",
        "section": "PyMotorCAD Documentation Example",
        "text": "(Used for the PyMotorCAD Documentation Examples only)\nTotal running time of the script: (0 minutes 27.875 seconds)\nDownload Jupyter notebook: thermal_steady_state.ipynb\nDownload Python source code: thermal_steady_state.py\nDownload zipped: thermal_steady_state.zip\nGallery generated by Sphinx-Gallery\nPyMotorCAD Documentation Example\nDownload Jupyter notebook: thermal_steady_state.ipynb\nDownload Python source code: thermal_steady_state.py\nDownload zipped: thermal_steady_state.zip"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_fea_result",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_fea_result.html#load_fea_result",
        "title": "load_fea_result",
        "section": "load_fea_result",
        "text": "Load an existing FEA solution to allow viewing of FEA results.\nFilepath for loading the file with the existing FEA solution.\nUse the r'filepath' syntax to force Python to ignore\nspecial characters.\nload_fea_result\npython:str\nr'filepath'\npython:int"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_fea_result",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_fea_result.html#ansys.motorcad.core.motorcad_methods.MotorCAD.load_fea_result",
        "title": "load_fea_result > load_fea_result > load_fea_result",
        "section": "load_fea_result > load_fea_result",
        "text": "MotorCAD.load_fea_result(file_path, solution_number)\n\nLoad an existing FEA solution to allow viewing of FEA results.\n\nParameters\n\nfile_path\n\npython:str\n\nFilepath for loading the file with the existing FEA solution.\nUse the r'filepath' syntax to force Python to ignore\nspecial characters.\n\nsolution_number\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.UpdateForceAnalysisResults",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.UpdateForceAnalysisResults.html#updateforceanalysisresults",
        "title": "UpdateForceAnalysisResults",
        "section": "UpdateForceAnalysisResults",
        "text": "Deprecated function. Replaced by MotorCAD.update_force_analysis_results().\nUpdateForceAnalysisResults\nMotorCAD.update_force_analysis_results()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.UpdateForceAnalysisResults",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.UpdateForceAnalysisResults.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.UpdateForceAnalysisResults",
        "title": "UpdateForceAnalysisResults > UpdateForceAnalysisResults > UpdateForceAnalysisResults",
        "section": "UpdateForceAnalysisResults > UpdateForceAnalysisResults",
        "text": "MotorCADCompatibility.UpdateForceAnalysisResults(*args)\n\nDeprecated function. Replaced by MotorCAD.update_force_analysis_results().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.display_screen",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.display_screen.html#display_screen",
        "title": "display_screen",
        "section": "display_screen",
        "text": "Display a screen within Motor-CAD.\nPath of the screen to display. The path must be in this format:\n\"tabName;tabName;tabName\". For example,\n\"Geometry;Axial\".\ndisplay_screen\npython:str\n\"tabName;tabName;tabName\"\n\"Geometry;Axial\""
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.display_screen",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.display_screen.html#ansys.motorcad.core.motorcad_methods.MotorCAD.display_screen",
        "title": "display_screen > display_screen > display_screen",
        "section": "display_screen > display_screen",
        "text": "MotorCAD.display_screen(screen_name)\n\nDisplay a screen within Motor-CAD.\n\nParameters\n\nscreen_name\n\npython:str\n\nPath of the screen to display. The path must be in this format:\n\"tabName;tabName;tabName\". For example,\n\"Geometry;Axial\".\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_message_log",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_message_log.html#clear_message_log",
        "title": "clear_message_log",
        "section": "clear_message_log",
        "text": "Clear the message log file for the model.\nclear_message_log"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_message_log",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_message_log.html#ansys.motorcad.core.motorcad_methods.MotorCAD.clear_message_log",
        "title": "clear_message_log > clear_message_log > clear_message_log",
        "section": "clear_message_log > clear_message_log",
        "text": "MotorCAD.clear_message_log()\n\nClear the message log file for the model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_wj_insulation",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_wj_insulation.html#slot_wj_insulation",
        "title": "slot_wj_insulation",
        "section": "slot_wj_insulation",
        "text": "slot_wj_insulation"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_wj_insulation",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_wj_insulation.html#ansys.motorcad.core.geometry.RegionType.slot_wj_insulation",
        "title": "slot_wj_insulation > slot_wj_insulation > slot_wj_insulation",
        "section": "slot_wj_insulation > slot_wj_insulation",
        "text": "RegionType.slot_wj_insulation = 'Slot Water Jacket Insulation'\n\n"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_power_graph",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_power_graph.html#get_power_graph",
        "title": "get_power_graph",
        "section": "get_power_graph",
        "text": "Get graph points from a Motor-CAD transient power loss graph.\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\nvalue of x coordinates from graph\nvalue of y coordinates from graph\nget_power_graph\npython:str\npython:int\npython:list\npython:list"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_power_graph",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_power_graph.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_power_graph",
        "title": "get_power_graph > get_power_graph > get_power_graph",
        "section": "get_power_graph > get_power_graph",
        "text": "MotorCAD.get_power_graph(graph_name)\n\nGet graph points from a Motor-CAD transient power loss graph.\n\nParameters\n\ngraph_name\n\npython:str, python:int\n\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\n\nReturns\n\n\n\n——-\n\n\n\nx_values\n\npython:list\n\nvalue of x coordinates from graph\n\ny_values\n\npython:list\n\nvalue of y coordinates from graph\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_Magnetic_RT",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_Magnetic_RT.html#addpoint_magnetic_rt",
        "title": "AddPoint_Magnetic_RT",
        "section": "AddPoint_Magnetic_RT",
        "text": "Deprecated function. Replaced by MotorCAD.add_point_magnetic_rt().\nAddPoint_Magnetic_RT\nMotorCAD.add_point_magnetic_rt()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_Magnetic_RT",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_Magnetic_RT.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_Magnetic_RT",
        "title": "AddPoint_Magnetic_RT > AddPoint_Magnetic_RT > AddPoint_Magnetic_RT",
        "section": "AddPoint_Magnetic_RT > AddPoint_Magnetic_RT",
        "text": "MotorCADCompatibility.AddPoint_Magnetic_RT(*args)\n\nDeprecated function. Replaced by MotorCAD.add_point_magnetic_rt().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_report_tree",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_report_tree.html#load_report_tree",
        "title": "load_report_tree",
        "section": "load_report_tree",
        "text": "Load the report with the tree structure of the modules and components.\nload_report_tree"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_report_tree",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_report_tree.html#ansys.motorcad.core.motorcad_methods.MotorCAD.load_report_tree",
        "title": "load_report_tree > load_report_tree > load_report_tree",
        "section": "load_report_tree > load_report_tree",
        "text": "MotorCAD.load_report_tree()\n\nLoad the report with the tree structure of the modules and components.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_adaptive_parameter_value",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_adaptive_parameter_value.html#set_adaptive_parameter_value",
        "title": "set_adaptive_parameter_value",
        "section": "set_adaptive_parameter_value",
        "text": "Set adaptive parameter, if parameter does not exist then add it.\nname of parameter.\nvalue of parameter.\nset_adaptive_parameter_value\npython:str\npython:float"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_adaptive_parameter_value",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_adaptive_parameter_value.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_adaptive_parameter_value",
        "title": "set_adaptive_parameter_value > set_adaptive_parameter_value > set_adaptive_parameter_value",
        "section": "set_adaptive_parameter_value > set_adaptive_parameter_value",
        "text": "MotorCAD.set_adaptive_parameter_value(name, value)\n\nSet adaptive parameter, if parameter does not exist then add it.\n\nParameters\n\nname\n\npython:str\n\nname of parameter.\n\nvalue\n\npython:float\n\nvalue of parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateDutyCycle_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateDutyCycle_Lab.html#calculatedutycycle_lab",
        "title": "CalculateDutyCycle_Lab",
        "section": "CalculateDutyCycle_Lab",
        "text": "Deprecated function. Replaced by MotorCAD.calculate_duty_cycle_lab().\nCalculateDutyCycle_Lab\nMotorCAD.calculate_duty_cycle_lab()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateDutyCycle_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateDutyCycle_Lab.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateDutyCycle_Lab",
        "title": "CalculateDutyCycle_Lab > CalculateDutyCycle_Lab > CalculateDutyCycle_Lab",
        "section": "CalculateDutyCycle_Lab > CalculateDutyCycle_Lab",
        "text": "MotorCADCompatibility.CalculateDutyCycle_Lab()\n\nDeprecated function. Replaced by MotorCAD.calculate_duty_cycle_lab().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearAllData",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearAllData.html#clearalldata",
        "title": "ClearAllData",
        "section": "ClearAllData",
        "text": "Deprecated function. Replaced by MotorCAD.clear_all_data().\nClearAllData\nMotorCAD.clear_all_data()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearAllData",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearAllData.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearAllData",
        "title": "ClearAllData > ClearAllData > ClearAllData",
        "section": "ClearAllData > ClearAllData",
        "text": "MotorCADCompatibility.ClearAllData()\n\nDeprecated function. Replaced by MotorCAD.clear_all_data().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.start_angle",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.start_angle.html#start_angle",
        "title": "start_angle",
        "section": "start_angle",
        "text": "Get angle of start point from centre point coordinates.\nstart_angle\nreal"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.start_angle",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.start_angle.html#ansys.motorcad.core.geometry.Arc.start_angle",
        "title": "start_angle > start_angle > start_angle",
        "section": "start_angle > start_angle",
        "text": "property Arc.start_angle\n\nGet angle of start point from centre point coordinates.\n\nReturns\n\nreal\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.coordinate_on_entity",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.coordinate_on_entity.html#coordinate_on_entity",
        "title": "coordinate_on_entity",
        "section": "coordinate_on_entity",
        "text": "Get if a coordinate exists on this line.\nCheck if this coordinate is on the line\ncoordinate_on_entity\nCoordinate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.coordinate_on_entity",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.coordinate_on_entity.html#ansys.motorcad.core.geometry.Line.coordinate_on_entity",
        "title": "coordinate_on_entity > coordinate_on_entity > coordinate_on_entity",
        "section": "coordinate_on_entity > coordinate_on_entity",
        "text": "Line.coordinate_on_entity(coordinate)\n\nGet if a coordinate exists on this line.\n\nParameters\n\ncoordinate\n\nCoordinate\n\nCheck if this coordinate is on the line\n\nReturns\n\n\n\n——-\n\n\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.parent_name",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.parent_name.html#parent_name",
        "title": "parent_name",
        "section": "parent_name",
        "text": "Get or set the region parent name.\nparent_name"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.parent_name",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.parent_name.html#ansys.motorcad.core.geometry.Region.parent_name",
        "title": "parent_name > parent_name > parent_name",
        "section": "parent_name > parent_name",
        "text": "property Region.parent_name\n\nGet or set the region parent name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.set_free",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.set_free.html#set_free",
        "title": "set_free",
        "section": "set_free",
        "text": "Free the Motor-CAD instance.\nset_free"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.set_free",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.set_free.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_free",
        "title": "set_free > set_free > set_free",
        "section": "set_free > set_free",
        "text": "MotorCAD.set_free()\n\nFree the Motor-CAD instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_liner",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_liner.html#rotor_liner",
        "title": "rotor_liner",
        "section": "rotor_liner",
        "text": "rotor_liner"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_liner",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_liner.html#ansys.motorcad.core.geometry.RegionType.rotor_liner",
        "title": "rotor_liner > rotor_liner > rotor_liner",
        "section": "rotor_liner > rotor_liner",
        "text": "RegionType.rotor_liner = 'Rotor Liner'\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.rotate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.rotate.html#rotate",
        "title": "rotate",
        "section": "rotate",
        "text": "Rotate entity around a point for a given angle.\nCoordinate to rotate line around.\nAngle of rotation in degrees. Anticlockwise direction is positive.\nrotate\nCoordinate\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.rotate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.rotate.html#ansys.motorcad.core.geometry.Entity.rotate",
        "title": "rotate > rotate > rotate",
        "section": "rotate > rotate",
        "text": "Entity.rotate(centre_point, angle)\n\nRotate entity around a point for a given angle.\n\nParameters\n\ncentre_point\n\nCoordinate\n\nCoordinate to rotate line around.\n\nangle\n\npython:float\n\nAngle of rotation in degrees. Anticlockwise direction is positive.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CheckIfGeometryIsValid",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CheckIfGeometryIsValid.html#checkifgeometryisvalid",
        "title": "CheckIfGeometryIsValid",
        "section": "CheckIfGeometryIsValid",
        "text": "Deprecated function. Replaced by MotorCAD.check_if_geometry_is_valid().\nCheckIfGeometryIsValid\nMotorCAD.check_if_geometry_is_valid()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CheckIfGeometryIsValid",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CheckIfGeometryIsValid.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CheckIfGeometryIsValid",
        "title": "CheckIfGeometryIsValid > CheckIfGeometryIsValid > CheckIfGeometryIsValid",
        "section": "CheckIfGeometryIsValid > CheckIfGeometryIsValid",
        "text": "MotorCADCompatibility.CheckIfGeometryIsValid(*args)\n\nDeprecated function. Replaced by MotorCAD.check_if_geometry_is_valid().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DeleteSolidMaterial",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DeleteSolidMaterial.html#deletesolidmaterial",
        "title": "DeleteSolidMaterial",
        "section": "DeleteSolidMaterial",
        "text": "Deprecated function. Replaced by MotorCAD.delete_solid_material().\nDeleteSolidMaterial\nMotorCAD.delete_solid_material()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DeleteSolidMaterial",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DeleteSolidMaterial.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DeleteSolidMaterial",
        "title": "DeleteSolidMaterial > DeleteSolidMaterial > DeleteSolidMaterial",
        "section": "DeleteSolidMaterial > DeleteSolidMaterial",
        "text": "MotorCADCompatibility.DeleteSolidMaterial(*args)\n\nDeprecated function. Replaced by MotorCAD.delete_solid_material().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.get_coordinate_from_distance",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.get_coordinate_from_distance.html#get_coordinate_from_distance",
        "title": "get_coordinate_from_distance",
        "section": "get_coordinate_from_distance",
        "text": "Get the coordinate at the specified distance along the line from the reference.\nEntity reference coordinate.\nDistance along Line.\nFractional distance along Line.\nPercentage distance along Line.\nCoordinate at distance along Line.\nget_coordinate_from_distance\nCoordinate\npython:float\noptional\npython:float\noptional\npython:float\noptional\nCoordinate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.get_coordinate_from_distance",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.get_coordinate_from_distance.html#ansys.motorcad.core.geometry.Line.get_coordinate_from_distance",
        "title": "get_coordinate_from_distance > get_coordinate_from_distance > get_coordinate_from_distance",
        "section": "get_coordinate_from_distance > get_coordinate_from_distance",
        "text": "Line.get_coordinate_from_distance(ref_coordinate, distance=None, fraction=None, percentage=None)\n\nGet the coordinate at the specified distance along the line from the reference.\n\nParameters\n\nref_coordinate\n\nCoordinate\n\nEntity reference coordinate.\n\ndistance\n\npython:float, optional\n\nDistance along Line.\n\nfraction\n\npython:float, optional\n\nFractional distance along Line.\n\npercentage\n\npython:float, optional\n\nPercentage distance along Line.\n\nReturns\n\nCoordinate\n\nCoordinate at distance along Line.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetArrayVariable",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetArrayVariable.html#setarrayvariable",
        "title": "SetArrayVariable",
        "section": "SetArrayVariable",
        "text": "Deprecated function. Replaced by MotorCAD.set_array_variable().\nSetArrayVariable\nMotorCAD.set_array_variable()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetArrayVariable",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetArrayVariable.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetArrayVariable",
        "title": "SetArrayVariable > SetArrayVariable > SetArrayVariable",
        "section": "SetArrayVariable > SetArrayVariable",
        "text": "MotorCADCompatibility.SetArrayVariable(*args)\n\nDeprecated function. Replaced by MotorCAD.set_array_variable().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.upload_mot_file",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.upload_mot_file.html#upload_mot_file",
        "title": "upload_mot_file",
        "section": "upload_mot_file",
        "text": "Upload a .mot file to Motor-CAD instance from local directory.\nThis allows users to send .mot files from a local directory to a Motor-CAD instance\non a remote machine. Equivalent of load_file() for remote machines.\nFull path to the mot file, including the file name and .mot extension.\nUse the r'filepath' syntax to force Python to ignore special characters.\nupload_mot_file\nload_file()\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.upload_mot_file",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.upload_mot_file.html#ansys.motorcad.core.motorcad_methods.MotorCAD.upload_mot_file",
        "title": "upload_mot_file > upload_mot_file > upload_mot_file",
        "section": "upload_mot_file > upload_mot_file",
        "text": "MotorCAD.upload_mot_file(file_path)\n\nUpload a .mot file to Motor-CAD instance from local directory.\n\nThis allows users to send .mot files from a local directory to a Motor-CAD instance\non a remote machine. Equivalent of load_file() for remote machines.\n\nParameters\n\nfile_path\n\npython:str\n\nFull path to the mot file, including the file name and .mot extension.\nUse the r'filepath' syntax to force Python to ignore special characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportDutyCycle_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportDutyCycle_Lab.html#exportdutycycle_lab",
        "title": "ExportDutyCycle_Lab",
        "section": "ExportDutyCycle_Lab",
        "text": "Deprecated function. Replaced by MotorCAD.export_duty_cycle_lab().\nExportDutyCycle_Lab\nMotorCAD.export_duty_cycle_lab()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportDutyCycle_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportDutyCycle_Lab.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportDutyCycle_Lab",
        "title": "ExportDutyCycle_Lab > ExportDutyCycle_Lab > ExportDutyCycle_Lab",
        "section": "ExportDutyCycle_Lab > ExportDutyCycle_Lab",
        "text": "MotorCADCompatibility.ExportDutyCycle_Lab()\n\nDeprecated function. Replaced by MotorCAD.export_duty_cycle_lab().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.StoreProblemData",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.StoreProblemData.html#storeproblemdata",
        "title": "StoreProblemData",
        "section": "StoreProblemData",
        "text": "Deprecated function.\nStoreProblemData"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.StoreProblemData",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.StoreProblemData.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.StoreProblemData",
        "title": "StoreProblemData > StoreProblemData > StoreProblemData",
        "section": "StoreProblemData > StoreProblemData",
        "text": "MotorCADCompatibility.StoreProblemData(*args)\n\nDeprecated function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowMechanicalContext",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowMechanicalContext.html#showmechanicalcontext",
        "title": "ShowMechanicalContext",
        "section": "ShowMechanicalContext",
        "text": "Deprecated function. Replaced by MotorCAD.show_mechanical_context().\nShowMechanicalContext\nMotorCAD.show_mechanical_context()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowMechanicalContext",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowMechanicalContext.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowMechanicalContext",
        "title": "ShowMechanicalContext > ShowMechanicalContext > ShowMechanicalContext",
        "section": "ShowMechanicalContext > ShowMechanicalContext",
        "text": "MotorCADCompatibility.ShowMechanicalContext()\n\nDeprecated function. Replaced by MotorCAD.show_mechanical_context().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_boundary_xy",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_boundary_xy.html#add_arc_boundary_xy",
        "title": "add_arc_boundary_xy",
        "section": "add_arc_boundary_xy",
        "text": "Add a boundary condition arc using x, y coordinates for the center.\nDeprecated since version 0.6.0: add_arc_boundary_xy will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\nadd_arc_boundary_xy"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_boundary_xy",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_boundary_xy.html#ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_boundary_xy",
        "title": "add_arc_boundary_xy > add_arc_boundary_xy > add_arc_boundary_xy",
        "section": "add_arc_boundary_xy > add_arc_boundary_xy",
        "text": "MotorCAD.add_arc_boundary_xy(direction, xc, yc, th1, th2, r, dir_code, sym_code, virt_code, init_code)\n\nAdd a boundary condition arc using x, y coordinates for the center.\n\nDeprecated since version 0.6.0: add_arc_boundary_xy will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.import_solid_material",
        "href": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.import_solid_material.html#import_solid_material",
        "title": "import_solid_material",
        "section": "import_solid_material",
        "text": "Import the solid material from the materials database.\nName of the materials database.\nName of the solid material.\nimport_solid_material\npython:str\npython:str"
    },
    {
        "objectID": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.import_solid_material",
        "href": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.import_solid_material.html#ansys.motorcad.core.motorcad_methods.MotorCAD.import_solid_material",
        "title": "import_solid_material > import_solid_material > import_solid_material",
        "section": "import_solid_material > import_solid_material",
        "text": "MotorCAD.import_solid_material(file_name, material_name)\n\nImport the solid material from the materials database.\n\nParameters\n\nfile_name\n\npython:str\n\nName of the materials database.\n\nmaterial_name\n\npython:str\n\nName of the solid material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/links/index",
        "href": "examples/links/index.html#linking-examples",
        "title": "Linking examples",
        "section": "Linking examples",
        "text": "These examples show how you can link PyMotorCAD to other Ansys products.\nsphx_glr_examples_links_ece_export_for_twinbuilder.py\nsphx_glr_examples_links_thermal_twinbuilder.py\nLinking examples"
    },
    {
        "objectID": "methods/_autogen_Materials",
        "href": "methods/_autogen_Materials.html#materials",
        "title": "Materials",
        "section": "Materials",
        "text": "calculate_iron_loss_coefficients(material_name)\nCalculate and return the iron loss coefficients for the solid material.\ncalculate_magnet_parameters(material_name)\nCalculate parameters for the nonlinear demagnetization model.\ndelete_solid_material(material_name)\nDelete the solid material from the materials database.\nexport_solid_material(file_name, material_name)\nExport the solid material to the materials database.\nget_component_material(component_name)\nGet the solid material name of the component.\nimport_solid_material(file_name, material_name)\nImport the solid material from the materials database.\nsave_iron_loss_coefficients(material_name)\nSave the calculated iron loss coefficients to the materials database.\nsave_magnet_parameters(material_name)\nSave the calculated magnet parameters of the solid material to the materials database.\nset_component_material(component_name, ...)\nSet the solid material properties of the component from the materials database.\nset_fluid(cooling_type, fluid)\nSet the fluid for a cooling type.\nMaterials\ncalculate_iron_loss_coefficients\ncalculate_magnet_parameters\ndelete_solid_material\nexport_solid_material\nget_component_material\nimport_solid_material\nsave_iron_loss_coefficients\nsave_magnet_parameters\nset_component_material\nset_fluid"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_duty_cycle",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_duty_cycle.html#save_duty_cycle",
        "title": "save_duty_cycle",
        "section": "save_duty_cycle",
        "text": "Save the duty cycle to a DAT file.\nThe duty cycle should be saved to a file with a DAT extension to ensure\nthat it can be correctly loaded into a MOT file.\nFilepath for saving the DAT file. The default directory is\nthe one with the MOT file. To use a different directory,\nspecify the absolute filepath. Use the r'filepath' syntax\nto force Python to ignore special characters.\nsave_duty_cycle\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_duty_cycle",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_duty_cycle.html#ansys.motorcad.core.motorcad_methods.MotorCAD.save_duty_cycle",
        "title": "save_duty_cycle > save_duty_cycle > save_duty_cycle",
        "section": "save_duty_cycle > save_duty_cycle",
        "text": "MotorCAD.save_duty_cycle(file_path)\n\nSave the duty cycle to a DAT file.\n\nThe duty cycle should be saved to a file with a DAT extension to ensure\nthat it can be correctly loaded into a MOT file.\n\nParameters\n\nfile_path\n\npython:str\n\nFilepath for saving the DAT file. The default directory is\nthe one with the MOT file. To use a different directory,\nspecify the absolute filepath. Use the r'filepath' syntax\nto force Python to ignore special characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_matrices",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_matrices.html#export_matrices",
        "title": "export_matrices",
        "section": "export_matrices",
        "text": "Export the resistance, power, and capacitance matrices to files.\nThe files are given the same name as the MOT model, with different\nfile extensions.\nDirectory for exporting the files. The default is the root\ndirectory. To use a different directory, specify the absolute\nfilepath. Use the r'filepath' syntax to force Python to\nignore special characters.\nexport_matrices\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_matrices",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_matrices.html#ansys.motorcad.core.motorcad_methods.MotorCAD.export_matrices",
        "title": "export_matrices > export_matrices > export_matrices",
        "section": "export_matrices > export_matrices",
        "text": "MotorCAD.export_matrices(directory_path)\n\nExport the resistance, power, and capacitance matrices to files.\n\nThe files are given the same name as the MOT model, with different\nfile extensions.\n\nParameters\n\ndirectory_path\n\npython:str\n\nDirectory for exporting the files. The default is the root\ndirectory. To use a different directory, specify the absolute\nfilepath. Use the r'filepath' syntax to force Python to\nignore special characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.child_names",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.child_names.html#child_names",
        "title": "child_names",
        "section": "child_names",
        "text": "Get child names list.\nlist of child region names\nchild_names\npython:list\nof\npython:str"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.child_names",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.child_names.html#ansys.motorcad.core.geometry.Region.child_names",
        "title": "child_names > child_names > child_names",
        "section": "child_names > child_names",
        "text": "property Region.child_names\n\nGet child names list.\n\nReturns\n\npython:list of python:str\n\nlist of child region names\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.limit_arc_chord",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.limit_arc_chord.html#limit_arc_chord",
        "title": "limit_arc_chord",
        "section": "limit_arc_chord",
        "text": "Limit the chord height for arcs in a region.\nSubdivide arcs if required to ensure the arc’s chord height (the distance between the arc\nmidpoint and the midpoint of a line between the start and end) is lower than the specified\nvalue. This can be used to force a fine FEA mesh around entities with high curvature.\nThe maximum chord height allowed.\nlimit_arc_chord"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.limit_arc_chord",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.limit_arc_chord.html#ansys.motorcad.core.geometry.Region.limit_arc_chord",
        "title": "limit_arc_chord > limit_arc_chord > limit_arc_chord",
        "section": "limit_arc_chord > limit_arc_chord",
        "text": "Region.limit_arc_chord(max_chord_height)\n\nLimit the chord height for arcs in a region.\n\nSubdivide arcs if required to ensure the arc’s chord height (the distance between the arc\nmidpoint and the midpoint of a line between the start and end) is lower than the specified\nvalue. This can be used to force a fine FEA mesh around entities with high curvature.\n\nParameters:\n\nmax_chord_height: float\n\nThe maximum chord height allowed.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.wedge",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.wedge.html#wedge",
        "title": "wedge",
        "section": "wedge",
        "text": "wedge"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.wedge",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.wedge.html#ansys.motorcad.core.geometry.RegionType.wedge",
        "title": "wedge > wedge > wedge",
        "section": "wedge > wedge",
        "text": "RegionType.wedge = 'Wedge'\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.update",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.update.html#update",
        "title": "update",
        "section": "update",
        "text": "Update class fields from another region.\nMotor-CAD region object\nupdate\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.update",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.update.html#ansys.motorcad.core.geometry.RegionMagnet.update",
        "title": "update > update > update",
        "section": "update > update",
        "text": "RegionMagnet.update(region)\n\nUpdate class fields from another region.\n\nParameters\n\nregion\n\nansys.motorcad.core.geometry.Region\n\nMotor-CAD region object\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.entities",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.entities.html#entities",
        "title": "entities",
        "section": "entities",
        "text": "Get or set the list of entities in the region.\nentities"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.entities",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.entities.html#ansys.motorcad.core.geometry.Region.entities",
        "title": "entities > entities > entities",
        "section": "entities > entities",
        "text": "property Region.entities\n\nGet or set the list of entities in the region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.html#motorcadcompatibility",
        "title": "MotorCADCompatibility",
        "section": "MotorCADCompatibility",
        "text": "Create a MotorCAD object that behaves the same as old ActiveX methods.\nThis class contains the old camelCase function names.\nIt can be used to run old scripts that were written for ActiveX.\nMotorCADCompatibility.AddArc_Boundary_RT(*args)\nDeprecated function.\nMotorCADCompatibility.AddArc_Boundary_XY(*args)\nDeprecated function.\nMotorCADCompatibility.AddArc_CentreStartEnd_RT(*args)\nDeprecated function.\nMotorCADCompatibility.AddArc_CentreStartEnd_XY(*args)\nDeprecated function.\nMotorCADCompatibility.AddArc_RT(*args)\nDeprecated function.\nMotorCADCompatibility.AddArc_XY(*args)\nDeprecated function.\nMotorCADCompatibility.AddCircularConductor_A(*args)\nDeprecated function.\nMotorCADCompatibility.AddLine_Boundary_RT(*args)\nDeprecated function.\nMotorCADCompatibility.AddLine_Boundary_XY(*args)\nDeprecated function.\nMotorCADCompatibility.AddLine_RT(*args)\nDeprecated function.\nMotorCADCompatibility.AddLine_XY(*args)\nDeprecated function.\nMotorCADCompatibility.AddMagnetRegion_RT(*args)\nDeprecated function.\nMotorCADCompatibility.AddMagnetRegion_XY(*args)\nDeprecated function.\nMotorCADCompatibility.AddPoint_CustomMaterial_XY(*args)\nDeprecated function.\nMotorCADCompatibility.AddPoint_Magnetic_RT(*args)\nDeprecated function.\nMotorCADCompatibility.AddPoint_Magnetic_XY(*args)\nDeprecated function.\nMotorCADCompatibility.AddPoint_RT(*args)\nDeprecated function.\nMotorCADCompatibility.AddPoint_XY(*args)\nDeprecated function.\nMotorCADCompatibility.AddRectangularConductor_A(*args)\nDeprecated function.\nMotorCADCompatibility.AddRegion_RT(*args)\nDeprecated function.\nMotorCADCompatibility.AddRegion_XY(*args)\nDeprecated function.\nMotorCADCompatibility.Add_Region_Thermal(*args)\nDeprecated function.\nMotorCADCompatibility.Add_Region_Thermal_A(*args)\nDeprecated function.\nMotorCADCompatibility.AvoidImmediateUpdate(*args)\nDeprecated function.\nMotorCADCompatibility.BuildModel_Lab()\nDeprecated function.\nMotorCADCompatibility.CalculateDutyCycle_Lab()\nDeprecated function.\nMotorCADCompatibility.CalculateForceHarmonics_Spatial()\nDeprecated function.\nMotorCADCompatibility.CalculateForceHarmonics_Temporal()\nDeprecated function.\nMotorCADCompatibility.CalculateGenerator_Lab()\nDeprecated function.\nMotorCADCompatibility.CalculateIMSaturationModel()\nDeprecated function.\nMotorCADCompatibility.CalculateIronLossCoefficients(*args)\nDeprecated function.\nMotorCADCompatibility.CalculateMagnetParameters(*args)\nDeprecated function.\nMotorCADCompatibility.CalculateMagnetic_Lab()\nDeprecated function.\nMotorCADCompatibility.CalculateOperatingPoint_Lab()\nDeprecated function.\nMotorCADCompatibility.CalculateSaturationMap()\nDeprecated function.\nMotorCADCompatibility.CalculateTestPerformance_Lab()\nDeprecated function.\nMotorCADCompatibility.CalculateThermal_Lab()\nDeprecated function.\nMotorCADCompatibility.CalculateTorqueEnvelope()\nDeprecated function.\nMotorCADCompatibility.CheckIfGeometryIsValid(*args)\nDeprecated function.\nMotorCADCompatibility.ClearAllData()\nDeprecated function.\nMotorCADCompatibility.ClearDutyCycle()\nDeprecated function.\nMotorCADCompatibility.ClearExternalCircuit()\nDeprecated function.\nMotorCADCompatibility.ClearFixedTemperatureValue(*args)\nDeprecated function.\nMotorCADCompatibility.ClearMessageLog()\nDeprecated function.\nMotorCADCompatibility.ClearModelBuild_Lab()\nDeprecated function.\nMotorCADCompatibility.CreateNewNode(*args)\nDeprecated function.\nMotorCADCompatibility.CreateOptimisedMesh()\nDeprecated function.\nMotorCADCompatibility.CreateOptimisedMesh_Thermal(*args)\nDeprecated function.\nMotorCADCompatibility.CreateReport(*args)\nDeprecated function.\nMotorCADCompatibility.DeleteRegions(*args)\nDeprecated function.\nMotorCADCompatibility.DeleteSolidMaterial(*args)\nDeprecated function.\nMotorCADCompatibility.DisableErrorMessages(*args)\nDeprecated function.\nMotorCADCompatibility.DisplayScreen(*args)\nDeprecated function.\nMotorCADCompatibility.DoMagneticCalculation()\nDeprecated function.\nMotorCADCompatibility.DoMagneticThermalCalculation()\nDeprecated function.\nMotorCADCompatibility.DoMechanicalCalculation()\nDeprecated function.\nMotorCADCompatibility.DoMultiForceCalculation()\nDeprecated function.\nMotorCADCompatibility.DoSlotFiniteElement()\nDeprecated function.\nMotorCADCompatibility.DoSteadyStateAnalysis()\nDeprecated function.\nMotorCADCompatibility.DoTransientAnalysis()\nDeprecated function.\nMotorCADCompatibility.DoWeightCalculation()\nDeprecated function.\nMotorCADCompatibility.EditMagnetRegion(*args)\nDeprecated function.\nMotorCADCompatibility.ExportDutyCycle_Lab()\nDeprecated function.\nMotorCADCompatibility.ExportFigure_Lab(*args)\nDeprecated function.\nMotorCADCompatibility.ExportForceAnimation(*args)\nDeprecated function.\nMotorCADCompatibility.ExportMatrices(*args)\nDeprecated function.\nMotorCADCompatibility.ExportMultiForceData(*args)\nDeprecated function.\nMotorCADCompatibility.ExportNVHResultsData(*args)\nDeprecated function.\nMotorCADCompatibility.ExportResults(*args)\nDeprecated function.\nMotorCADCompatibility.ExportSolidMaterial(*args)\nDeprecated function.\nMotorCADCompatibility.ExportToAnsysDiscovery(*args)\nDeprecated function.\nMotorCADCompatibility.ExportToAnsysElectronicsDesktop(*args)\nDeprecated function.\nMotorCADCompatibility.GeometryExport()\nDeprecated function.\nMotorCADCompatibility.GetArrayVariable(*args)\nDeprecated function.\nMotorCADCompatibility.GetArrayVariable_2d(*args)\nDeprecated function.\nMotorCADCompatibility.GetComponentMaterial(*args)\nDeprecated function.\nMotorCADCompatibility.GetFEAGraphPoint(*args)\nDeprecated function.\nMotorCADCompatibility.GetForceFrequencyDomainAmplitude(*args)\nDeprecated function.\nMotorCADCompatibility.GetIMIronLoss(*args)\nDeprecated function.\nMotorCADCompatibility.GetLicence()\nDeprecated function.\nMotorCADCompatibility.GetMagnetic3DGraphPoint(*args)\nDeprecated function.\nMotorCADCompatibility.GetMagneticGraphPoint(*args)\nDeprecated function.\nMotorCADCompatibility.GetMessages(*args)\nDeprecated function.\nMotorCADCompatibility.GetModelBuilt_Lab()\nDeprecated function.\nMotorCADCompatibility.GetNodeCapacitance(*args)\nDeprecated function.\nMotorCADCompatibility.GetNodeExists(*args)\nDeprecated function.\nMotorCADCompatibility.GetNodePower(*args)\nDeprecated function.\nMotorCADCompatibility.GetNodeTemperature(*args)\nDeprecated function.\nMotorCADCompatibility.GetNodeToNodeResistance(*args)\nDeprecated function.\nMotorCADCompatibility.GetOffsetNodeNumber(*args)\nDeprecated function.\nMotorCADCompatibility.GetPointValue(*args)\nDeprecated function.\nMotorCADCompatibility.GetPowerGraphPoint(*args)\nDeprecated function.\nMotorCADCompatibility.GetRegionLoss(*args)\nDeprecated function.\nMotorCADCompatibility.GetRegionValue(*args)\nDeprecated function.\nMotorCADCompatibility.GetTemperatureGraphPoint(*args)\nDeprecated function.\nMotorCADCompatibility.GetVariable(*args)\nDeprecated function.\nMotorCADCompatibility.GetWindingCoil(*args)\nDeprecated function.\nMotorCADCompatibility.ImportSolidMaterial(*args)\nDeprecated function.\nMotorCADCompatibility.InitialiseTabNames()\nDeprecated function.\nMotorCADCompatibility.InitiateGeometryFromScript()\nDeprecated function.\nMotorCADCompatibility.IsStopRequested()\nDeprecated function.\nMotorCADCompatibility.LoadCustomDriveCycle(*args)\nDeprecated function.\nMotorCADCompatibility.LoadDXFFile(*args)\nDeprecated function.\nMotorCADCompatibility.LoadDutyCycle(*args)\nDeprecated function.\nMotorCADCompatibility.LoadExternalCircuit(*args)\nDeprecated function.\nMotorCADCompatibility.LoadExternalModel_Lab(*args)\nDeprecated function.\nMotorCADCompatibility.LoadFEAResult(*args)\nDeprecated function.\nMotorCADCompatibility.LoadFromFile(*args)\nDeprecated function.\nMotorCADCompatibility.LoadMagnetisationCurves(*args)\nDeprecated function.\nMotorCADCompatibility.LoadReportStructure(*args)\nDeprecated function.\nMotorCADCompatibility.LoadReportTree()\nDeprecated function.\nMotorCADCompatibility.LoadResults(*args)\nDeprecated function.\nMotorCADCompatibility.LoadScript(*args)\nDeprecated function.\nMotorCADCompatibility.LoadTemplate(*args)\nDeprecated function.\nMotorCADCompatibility.LoadWindingPattern(*args)\nDeprecated function.\nMotorCADCompatibility.ModifyNode(*args)\nDeprecated function.\nMotorCADCompatibility.Quit()\nDeprecated function.\nMotorCADCompatibility.RemoveExternalComponent(*args)\nDeprecated function.\nMotorCADCompatibility.ResetRegions()\nDeprecated function.\nMotorCADCompatibility.RestoreCompatibilitySettings()\nDeprecated function.\nMotorCADCompatibility.RunScript()\nDeprecated function.\nMotorCADCompatibility.SaveDutyCycle(*args)\nDeprecated function.\nMotorCADCompatibility.SaveExternalCircuit(*args)\nDeprecated function.\nMotorCADCompatibility.SaveFEAData(*args)\nDeprecated function.\nMotorCADCompatibility.SaveIronLossCoefficients(*args)\nDeprecated function.\nMotorCADCompatibility.SaveMagnetParameters(*args)\nDeprecated function.\nMotorCADCompatibility.SaveMagnetisationCurves(*args)\nDeprecated function.\nMotorCADCompatibility.SaveMotorCADScreenToFile(*args)\nDeprecated function.\nMotorCADCompatibility.SaveResults(*args)\nDeprecated function.\nMotorCADCompatibility.SaveScreenToFile(*args)\nDeprecated function.\nMotorCADCompatibility.SaveScript(*args)\nDeprecated function.\nMotorCADCompatibility.SaveTemplate(*args)\nDeprecated function.\nMotorCADCompatibility.SaveToFile(*args)\nDeprecated function.\nMotorCADCompatibility.SaveTransientPowerValues(*args)\nDeprecated function.\nMotorCADCompatibility.SaveTransientTemperatures(*args)\nDeprecated function.\nMotorCADCompatibility.SaveWindingPattern(*args)\nDeprecated function.\nMotorCADCompatibility.Set3DComponentVisibility(*args)\nDeprecated function.\nMotorCADCompatibility.SetAllEmagCalculations(*args)\nDeprecated function.\nMotorCADCompatibility.SetArrayVariable(*args)\nDeprecated function.\nMotorCADCompatibility.SetArrayVariable_2d(*args)\nDeprecated function.\nMotorCADCompatibility.SetBndCond(*args)\nDeprecated function.\nMotorCADCompatibility.SetCapacitanceValue(*args)\nDeprecated function.\nMotorCADCompatibility.SetComponentMaterial(*args)\nDeprecated function.\nMotorCADCompatibility.SetFEAPathArc(*args)\nDeprecated function.\nMotorCADCompatibility.SetFEAPathLine(*args)\nDeprecated function.\nMotorCADCompatibility.SetFEAPathPoint(*args)\nDeprecated function.\nMotorCADCompatibility.SetFixedTemperatureValue(*args)\nDeprecated function.\nMotorCADCompatibility.SetFluid(*args)\nDeprecated function.\nMotorCADCompatibility.SetMeshGeneratorParam(*args)\nDeprecated function.\nMotorCADCompatibility.SetMotorLABContext()\nDeprecated function.\nMotorCADCompatibility.SetPowerInjectionValue(*args)\nDeprecated function.\nMotorCADCompatibility.SetPowerSourceValue(*args)\nDeprecated function.\nMotorCADCompatibility.SetRegionColour(*args)\nDeprecated function.\nMotorCADCompatibility.SetResistanceMultiplier(*args)\nDeprecated function.\nMotorCADCompatibility.SetResistanceValue(*args)\nDeprecated function.\nMotorCADCompatibility.SetVariable(*args)\nDeprecated function.\nMotorCADCompatibility.SetVisible(*args)\nDeprecated function.\nMotorCADCompatibility.SetWindingCoil(*args)\nDeprecated function.\nMotorCADCompatibility.ShowMagneticContext()\nDeprecated function.\nMotorCADCompatibility.ShowMechanicalContext()\nDeprecated function.\nMotorCADCompatibility.ShowMessage(*args)\nDeprecated function.\nMotorCADCompatibility.ShowResultsViewer_Lab(*args)\nDeprecated function.\nMotorCADCompatibility.ShowThermalContext()\nDeprecated function.\nMotorCADCompatibility.SolveProblem()\nDeprecated function.\nMotorCADCompatibility.StoreProblemData(*args)\nDeprecated function.\nMotorCADCompatibility.UpdateForceAnalysisResults(*args)\nDeprecated function.\nMotorCADCompatibility.UpdateInterface()\nDeprecated function.\nMotorCADCompatibility.set_free()\nDeprecated function.\nMotorCADCompatibility\ncamelCase\nMotorCADCompatibility.AddArc_Boundary_RT\nMotorCADCompatibility.AddArc_Boundary_XY\nMotorCADCompatibility.AddArc_CentreStartEnd_RT\nMotorCADCompatibility.AddArc_CentreStartEnd_XY\nMotorCADCompatibility.AddArc_RT\nMotorCADCompatibility.AddArc_XY\nMotorCADCompatibility.AddCircularConductor_A\nMotorCADCompatibility.AddLine_Boundary_RT\nMotorCADCompatibility.AddLine_Boundary_XY\nMotorCADCompatibility.AddLine_RT\nMotorCADCompatibility.AddLine_XY\nMotorCADCompatibility.AddMagnetRegion_RT\nMotorCADCompatibility.AddMagnetRegion_XY\nMotorCADCompatibility.AddPoint_CustomMaterial_XY\nMotorCADCompatibility.AddPoint_Magnetic_RT\nMotorCADCompatibility.AddPoint_Magnetic_XY\nMotorCADCompatibility.AddPoint_RT\nMotorCADCompatibility.AddPoint_XY\nMotorCADCompatibility.AddRectangularConductor_A\nMotorCADCompatibility.AddRegion_RT\nMotorCADCompatibility.AddRegion_XY\nMotorCADCompatibility.Add_Region_Thermal\nMotorCADCompatibility.Add_Region_Thermal_A\nMotorCADCompatibility.AvoidImmediateUpdate\nMotorCADCompatibility.BuildModel_Lab\nMotorCADCompatibility.CalculateDutyCycle_Lab\nMotorCADCompatibility.CalculateForceHarmonics_Spatial\nMotorCADCompatibility.CalculateForceHarmonics_Temporal\nMotorCADCompatibility.CalculateGenerator_Lab\nMotorCADCompatibility.CalculateIMSaturationModel\nMotorCADCompatibility.CalculateIronLossCoefficients\nMotorCADCompatibility.CalculateMagnetParameters\nMotorCADCompatibility.CalculateMagnetic_Lab\nMotorCADCompatibility.CalculateOperatingPoint_Lab\nMotorCADCompatibility.CalculateSaturationMap\nMotorCADCompatibility.CalculateTestPerformance_Lab\nMotorCADCompatibility.CalculateThermal_Lab\nMotorCADCompatibility.CalculateTorqueEnvelope\nMotorCADCompatibility.CheckIfGeometryIsValid\nMotorCADCompatibility.ClearAllData\nMotorCADCompatibility.ClearDutyCycle\nMotorCADCompatibility.ClearExternalCircuit\nMotorCADCompatibility.ClearFixedTemperatureValue\nMotorCADCompatibility.ClearMessageLog\nMotorCADCompatibility.ClearModelBuild_Lab\nMotorCADCompatibility.CreateNewNode\nMotorCADCompatibility.CreateOptimisedMesh\nMotorCADCompatibility.CreateOptimisedMesh_Thermal\nMotorCADCompatibility.CreateReport\nMotorCADCompatibility.DeleteRegions\nMotorCADCompatibility.DeleteSolidMaterial\nMotorCADCompatibility.DisableErrorMessages\nMotorCADCompatibility.DisplayScreen\nMotorCADCompatibility.DoMagneticCalculation\nMotorCADCompatibility.DoMagneticThermalCalculation\nMotorCADCompatibility.DoMechanicalCalculation\nMotorCADCompatibility.DoMultiForceCalculation\nMotorCADCompatibility.DoSlotFiniteElement\nMotorCADCompatibility.DoSteadyStateAnalysis\nMotorCADCompatibility.DoTransientAnalysis\nMotorCADCompatibility.DoWeightCalculation\nMotorCADCompatibility.EditMagnetRegion\nMotorCADCompatibility.ExportDutyCycle_Lab\nMotorCADCompatibility.ExportFigure_Lab\nMotorCADCompatibility.ExportForceAnimation\nMotorCADCompatibility.ExportMatrices\nMotorCADCompatibility.ExportMultiForceData\nMotorCADCompatibility.ExportNVHResultsData\nMotorCADCompatibility.ExportResults\nMotorCADCompatibility.ExportSolidMaterial\nMotorCADCompatibility.ExportToAnsysDiscovery\nMotorCADCompatibility.ExportToAnsysElectronicsDesktop\nMotorCADCompatibility.GeometryExport\nMotorCADCompatibility.GetArrayVariable\nMotorCADCompatibility.GetArrayVariable_2d\nMotorCADCompatibility.GetComponentMaterial\nMotorCADCompatibility.GetFEAGraphPoint\nMotorCADCompatibility.GetForceFrequencyDomainAmplitude\nMotorCADCompatibility.GetIMIronLoss\nMotorCADCompatibility.GetLicence\nMotorCADCompatibility.GetMagnetic3DGraphPoint\nMotorCADCompatibility.GetMagneticGraphPoint\nMotorCADCompatibility.GetMessages\nMotorCADCompatibility.GetModelBuilt_Lab\nMotorCADCompatibility.GetNodeCapacitance\nMotorCADCompatibility.GetNodeExists\nMotorCADCompatibility.GetNodePower\nMotorCADCompatibility.GetNodeTemperature\nMotorCADCompatibility.GetNodeToNodeResistance\nMotorCADCompatibility.GetOffsetNodeNumber\nMotorCADCompatibility.GetPointValue\nMotorCADCompatibility.GetPowerGraphPoint\nMotorCADCompatibility.GetRegionLoss\nMotorCADCompatibility.GetRegionValue\nMotorCADCompatibility.GetTemperatureGraphPoint\nMotorCADCompatibility.GetVariable\nMotorCADCompatibility.GetWindingCoil\nMotorCADCompatibility.ImportSolidMaterial\nMotorCADCompatibility.InitialiseTabNames\nMotorCADCompatibility.InitiateGeometryFromScript\nMotorCADCompatibility.IsStopRequested\nMotorCADCompatibility.LoadCustomDriveCycle\nMotorCADCompatibility.LoadDXFFile\nMotorCADCompatibility.LoadDutyCycle\nMotorCADCompatibility.LoadExternalCircuit\nMotorCADCompatibility.LoadExternalModel_Lab\nMotorCADCompatibility.LoadFEAResult\nMotorCADCompatibility.LoadFromFile\nMotorCADCompatibility.LoadMagnetisationCurves\nMotorCADCompatibility.LoadReportStructure\nMotorCADCompatibility.LoadReportTree\nMotorCADCompatibility.LoadResults\nMotorCADCompatibility.LoadScript\nMotorCADCompatibility.LoadTemplate\nMotorCADCompatibility.LoadWindingPattern\nMotorCADCompatibility.ModifyNode\nMotorCADCompatibility.Quit\nMotorCADCompatibility.RemoveExternalComponent\nMotorCADCompatibility.ResetRegions\nMotorCADCompatibility.RestoreCompatibilitySettings\nMotorCADCompatibility.RunScript\nMotorCADCompatibility.SaveDutyCycle\nMotorCADCompatibility.SaveExternalCircuit\nMotorCADCompatibility.SaveFEAData\nMotorCADCompatibility.SaveIronLossCoefficients\nMotorCADCompatibility.SaveMagnetParameters\nMotorCADCompatibility.SaveMagnetisationCurves\nMotorCADCompatibility.SaveMotorCADScreenToFile\nMotorCADCompatibility.SaveResults\nMotorCADCompatibility.SaveScreenToFile\nMotorCADCompatibility.SaveScript\nMotorCADCompatibility.SaveTemplate\nMotorCADCompatibility.SaveToFile\nMotorCADCompatibility.SaveTransientPowerValues\nMotorCADCompatibility.SaveTransientTemperatures\nMotorCADCompatibility.SaveWindingPattern\nMotorCADCompatibility.Set3DComponentVisibility\nMotorCADCompatibility.SetAllEmagCalculations\nMotorCADCompatibility.SetArrayVariable\nMotorCADCompatibility.SetArrayVariable_2d\nMotorCADCompatibility.SetBndCond\nMotorCADCompatibility.SetCapacitanceValue\nMotorCADCompatibility.SetComponentMaterial\nMotorCADCompatibility.SetFEAPathArc\nMotorCADCompatibility.SetFEAPathLine\nMotorCADCompatibility.SetFEAPathPoint\nMotorCADCompatibility.SetFixedTemperatureValue\nMotorCADCompatibility.SetFluid\nMotorCADCompatibility.SetMeshGeneratorParam\nMotorCADCompatibility.SetMotorLABContext\nMotorCADCompatibility.SetPowerInjectionValue\nMotorCADCompatibility.SetPowerSourceValue\nMotorCADCompatibility.SetRegionColour\nMotorCADCompatibility.SetResistanceMultiplier\nMotorCADCompatibility.SetResistanceValue\nMotorCADCompatibility.SetVariable\nMotorCADCompatibility.SetVisible\nMotorCADCompatibility.SetWindingCoil\nMotorCADCompatibility.ShowMagneticContext\nMotorCADCompatibility.ShowMechanicalContext\nMotorCADCompatibility.ShowMessage\nMotorCADCompatibility.ShowResultsViewer_Lab\nMotorCADCompatibility.ShowThermalContext\nMotorCADCompatibility.SolveProblem\nMotorCADCompatibility.StoreProblemData\nMotorCADCompatibility.UpdateForceAnalysisResults\nMotorCADCompatibility.UpdateInterface\nMotorCADCompatibility.set_free"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility",
        "title": "MotorCADCompatibility > MotorCADCompatibility > MotorCADCompatibility",
        "section": "MotorCADCompatibility > MotorCADCompatibility",
        "text": "class ansys.motorcad.core.motorcad_methods.MotorCADCompatibility(port=-1, open_new_instance=False, enable_exceptions=False, enable_success_variable=True, reuse_parallel_instances=False, keep_instance_open=False)\n\nCreate a MotorCAD object that behaves the same as old ActiveX methods.\n\nThis class contains the old camelCase function names.\nIt can be used to run old scripts that were written for ActiveX.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nMotorCADCompatibility.AddArc_Boundary_RT(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.AddArc_Boundary_XY(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.AddArc_CentreStartEnd_RT(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.AddArc_CentreStartEnd_XY(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.AddArc_RT(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.AddArc_XY(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.AddCircularConductor_A(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.AddLine_Boundary_RT(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.AddLine_Boundary_XY(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.AddLine_RT(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.AddLine_XY(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.AddMagnetRegion_RT(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.AddMagnetRegion_XY(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.AddPoint_CustomMaterial_XY(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.AddPoint_Magnetic_RT(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.AddPoint_Magnetic_XY(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.AddPoint_RT(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.AddPoint_XY(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.AddRectangularConductor_A(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.AddRegion_RT(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.AddRegion_XY(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.Add_Region_Thermal(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.Add_Region_Thermal_A(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.AvoidImmediateUpdate(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.BuildModel_Lab()\n\nDeprecated function.\n\nMotorCADCompatibility.CalculateDutyCycle_Lab()\n\nDeprecated function.\n\nMotorCADCompatibility.CalculateForceHarmonics_Spatial()\n\nDeprecated function.\n\nMotorCADCompatibility.CalculateForceHarmonics_Temporal()\n\nDeprecated function.\n\nMotorCADCompatibility.CalculateGenerator_Lab()\n\nDeprecated function.\n\nMotorCADCompatibility.CalculateIMSaturationModel()\n\nDeprecated function.\n\nMotorCADCompatibility.CalculateIronLossCoefficients(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.CalculateMagnetParameters(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.CalculateMagnetic_Lab()\n\nDeprecated function.\n\nMotorCADCompatibility.CalculateOperatingPoint_Lab()\n\nDeprecated function.\n\nMotorCADCompatibility.CalculateSaturationMap()\n\nDeprecated function.\n\nMotorCADCompatibility.CalculateTestPerformance_Lab()\n\nDeprecated function.\n\nMotorCADCompatibility.CalculateThermal_Lab()\n\nDeprecated function.\n\nMotorCADCompatibility.CalculateTorqueEnvelope()\n\nDeprecated function.\n\nMotorCADCompatibility.CheckIfGeometryIsValid(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.ClearAllData()\n\nDeprecated function.\n\nMotorCADCompatibility.ClearDutyCycle()\n\nDeprecated function.\n\nMotorCADCompatibility.ClearExternalCircuit()\n\nDeprecated function.\n\nMotorCADCompatibility.ClearFixedTemperatureValue(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.ClearMessageLog()\n\nDeprecated function.\n\nMotorCADCompatibility.ClearModelBuild_Lab()\n\nDeprecated function.\n\nMotorCADCompatibility.CreateNewNode(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.CreateOptimisedMesh()\n\nDeprecated function.\n\nMotorCADCompatibility.CreateOptimisedMesh_Thermal(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.CreateReport(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.DeleteRegions(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.DeleteSolidMaterial(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.DisableErrorMessages(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.DisplayScreen(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.DoMagneticCalculation()\n\nDeprecated function.\n\nMotorCADCompatibility.DoMagneticThermalCalculation()\n\nDeprecated function.\n\nMotorCADCompatibility.DoMechanicalCalculation()\n\nDeprecated function.\n\nMotorCADCompatibility.DoMultiForceCalculation()\n\nDeprecated function.\n\nMotorCADCompatibility.DoSlotFiniteElement()\n\nDeprecated function.\n\nMotorCADCompatibility.DoSteadyStateAnalysis()\n\nDeprecated function.\n\nMotorCADCompatibility.DoTransientAnalysis()\n\nDeprecated function.\n\nMotorCADCompatibility.DoWeightCalculation()\n\nDeprecated function.\n\nMotorCADCompatibility.EditMagnetRegion(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.ExportDutyCycle_Lab()\n\nDeprecated function.\n\nMotorCADCompatibility.ExportFigure_Lab(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.ExportForceAnimation(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.ExportMatrices(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.ExportMultiForceData(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.ExportNVHResultsData(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.ExportResults(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.ExportSolidMaterial(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.ExportToAnsysDiscovery(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.ExportToAnsysElectronicsDesktop(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GeometryExport()\n\nDeprecated function.\n\nMotorCADCompatibility.GetArrayVariable(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GetArrayVariable_2d(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GetComponentMaterial(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GetFEAGraphPoint(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GetForceFrequencyDomainAmplitude(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GetIMIronLoss(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GetLicence()\n\nDeprecated function.\n\nMotorCADCompatibility.GetMagnetic3DGraphPoint(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GetMagneticGraphPoint(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GetMessages(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GetModelBuilt_Lab()\n\nDeprecated function.\n\nMotorCADCompatibility.GetNodeCapacitance(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GetNodeExists(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GetNodePower(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GetNodeTemperature(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GetNodeToNodeResistance(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GetOffsetNodeNumber(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GetPointValue(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GetPowerGraphPoint(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GetRegionLoss(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GetRegionValue(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GetTemperatureGraphPoint(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GetVariable(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.GetWindingCoil(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.ImportSolidMaterial(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.InitialiseTabNames()\n\nDeprecated function.\n\nMotorCADCompatibility.InitiateGeometryFromScript()\n\nDeprecated function.\n\nMotorCADCompatibility.IsStopRequested()\n\nDeprecated function.\n\nMotorCADCompatibility.LoadCustomDriveCycle(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.LoadDXFFile(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.LoadDutyCycle(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.LoadExternalCircuit(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.LoadExternalModel_Lab(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.LoadFEAResult(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.LoadFromFile(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.LoadMagnetisationCurves(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.LoadReportStructure(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.LoadReportTree()\n\nDeprecated function.\n\nMotorCADCompatibility.LoadResults(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.LoadScript(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.LoadTemplate(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.LoadWindingPattern(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.ModifyNode(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.Quit()\n\nDeprecated function.\n\nMotorCADCompatibility.RemoveExternalComponent(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.ResetRegions()\n\nDeprecated function.\n\nMotorCADCompatibility.RestoreCompatibilitySettings()\n\nDeprecated function.\n\nMotorCADCompatibility.RunScript()\n\nDeprecated function.\n\nMotorCADCompatibility.SaveDutyCycle(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SaveExternalCircuit(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SaveFEAData(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SaveIronLossCoefficients(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SaveMagnetParameters(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SaveMagnetisationCurves(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SaveMotorCADScreenToFile(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SaveResults(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SaveScreenToFile(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SaveScript(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SaveTemplate(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SaveToFile(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SaveTransientPowerValues(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SaveTransientTemperatures(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SaveWindingPattern(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.Set3DComponentVisibility(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SetAllEmagCalculations(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SetArrayVariable(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SetArrayVariable_2d(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SetBndCond(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SetCapacitanceValue(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SetComponentMaterial(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SetFEAPathArc(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SetFEAPathLine(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SetFEAPathPoint(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SetFixedTemperatureValue(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SetFluid(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SetMeshGeneratorParam(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SetMotorLABContext()\n\nDeprecated function.\n\nMotorCADCompatibility.SetPowerInjectionValue(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SetPowerSourceValue(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SetRegionColour(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SetResistanceMultiplier(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SetResistanceValue(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SetVariable(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SetVisible(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.SetWindingCoil(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.ShowMagneticContext()\n\nDeprecated function.\n\nMotorCADCompatibility.ShowMechanicalContext()\n\nDeprecated function.\n\nMotorCADCompatibility.ShowMessage(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.ShowResultsViewer_Lab(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.ShowThermalContext()\n\nDeprecated function.\n\nMotorCADCompatibility.SolveProblem()\n\nDeprecated function.\n\nMotorCADCompatibility.StoreProblemData(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.UpdateForceAnalysisResults(*args)\n\nDeprecated function.\n\nMotorCADCompatibility.UpdateInterface()\n\nDeprecated function.\n\nMotorCADCompatibility.set_free()\n\nDeprecated function.\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadTemplate",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadTemplate.html#loadtemplate",
        "title": "LoadTemplate",
        "section": "LoadTemplate",
        "text": "Deprecated function. Replaced by MotorCAD.load_template().\nLoadTemplate\nMotorCAD.load_template()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadTemplate",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadTemplate.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadTemplate",
        "title": "LoadTemplate > LoadTemplate > LoadTemplate",
        "section": "LoadTemplate > LoadTemplate",
        "text": "MotorCADCompatibility.LoadTemplate(*args)\n\nDeprecated function. Replaced by MotorCAD.load_template().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetBndCond",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetBndCond.html#setbndcond",
        "title": "SetBndCond",
        "section": "SetBndCond",
        "text": "Deprecated function.\nSetBndCond"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetBndCond",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetBndCond.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetBndCond",
        "title": "SetBndCond > SetBndCond > SetBndCond",
        "section": "SetBndCond > SetBndCond",
        "text": "MotorCADCompatibility.SetBndCond(*args)\n\nDeprecated function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_line_boundary_xy",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_line_boundary_xy.html#add_line_boundary_xy",
        "title": "add_line_boundary_xy",
        "section": "add_line_boundary_xy",
        "text": "Add a boundary condition line using x, y coordinates for the start and end points.\nDeprecated since version 0.6.0: add_line_boundary_xy will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\nadd_line_boundary_xy"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_line_boundary_xy",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_line_boundary_xy.html#ansys.motorcad.core.motorcad_methods.MotorCAD.add_line_boundary_xy",
        "title": "add_line_boundary_xy > add_line_boundary_xy > add_line_boundary_xy",
        "section": "add_line_boundary_xy > add_line_boundary_xy",
        "text": "MotorCAD.add_line_boundary_xy(xs, ys, xe, ye, dir_code, sym_code, virt_code, init_code)\n\nAdd a boundary condition line using x, y coordinates for the start and end points.\n\nDeprecated since version 0.6.0: add_line_boundary_xy will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_magnetic_calculation",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_magnetic_calculation.html#do_magnetic_calculation",
        "title": "do_magnetic_calculation",
        "section": "do_magnetic_calculation",
        "text": "Run the Motor-CAD magnetic calculation.\ndo_magnetic_calculation"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_magnetic_calculation",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_magnetic_calculation.html#ansys.motorcad.core.motorcad_methods.MotorCAD.do_magnetic_calculation",
        "title": "do_magnetic_calculation > do_magnetic_calculation > do_magnetic_calculation",
        "section": "do_magnetic_calculation > do_magnetic_calculation",
        "text": "MotorCAD.do_magnetic_calculation()\n\nRun the Motor-CAD magnetic calculation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.delete_solid_material",
        "href": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.delete_solid_material.html#delete_solid_material",
        "title": "delete_solid_material",
        "section": "delete_solid_material",
        "text": "Delete the solid material from the materials database.\nName of the solid material.\ndelete_solid_material\npython:str"
    },
    {
        "objectID": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.delete_solid_material",
        "href": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.delete_solid_material.html#ansys.motorcad.core.motorcad_methods.MotorCAD.delete_solid_material",
        "title": "delete_solid_material > delete_solid_material > delete_solid_material",
        "section": "delete_solid_material > delete_solid_material",
        "text": "MotorCAD.delete_solid_material(material_name)\n\nDelete the solid material from the materials database.\n\nParameters\n\nmaterial_name\n\npython:str\n\nName of the solid material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_resistance_multiplier",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_resistance_multiplier.html#set_resistance_multiplier",
        "title": "set_resistance_multiplier",
        "section": "set_resistance_multiplier",
        "text": "Set or create a resistance multiplication factor.\nset_resistance_multiplier"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_resistance_multiplier",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_resistance_multiplier.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_resistance_multiplier",
        "title": "set_resistance_multiplier > set_resistance_multiplier > set_resistance_multiplier",
        "section": "set_resistance_multiplier > set_resistance_multiplier",
        "text": "MotorCAD.set_resistance_multiplier(name, node1, node2, value, description)\n\nSet or create a resistance multiplication factor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.copy",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.copy.html#copy",
        "title": "copy",
        "section": "copy",
        "text": "Return a shallow copy of the list.\ncopy"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.copy",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.copy.html#ansys.motorcad.core.geometry.EntityList.copy",
        "title": "copy > copy > copy",
        "section": "copy > copy",
        "text": "EntityList.copy(/)\n\nReturn a shallow copy of the list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.get_line_intersection",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.get_line_intersection.html#get_line_intersection",
        "title": "get_line_intersection",
        "section": "get_line_intersection",
        "text": "Get intersection Coordinate of line with another line.\nReturns None if intersection not found.\nget_line_intersection\nansys.motorcad.core.geometry.Line\nansys.motorcad.core.geometry.Coordinate\npython:None"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.get_line_intersection",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.get_line_intersection.html#ansys.motorcad.core.geometry.Line.get_line_intersection",
        "title": "get_line_intersection > get_line_intersection > get_line_intersection",
        "section": "get_line_intersection > get_line_intersection",
        "text": "Line.get_line_intersection(line)\n\nGet intersection Coordinate of line with another line.\n\nReturns None if intersection not found.\n\nParameters\n\nline\n\nansys.motorcad.core.geometry.Line\n\n\n\nReturns\n\nansys.motorcad.core.geometry.Coordinate or python:None\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.mirror",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.mirror.html#mirror",
        "title": "mirror",
        "section": "mirror",
        "text": "Mirror arc about a line.\nLine entity to mirror Line about\nmirror\nansys.motorcad.core.geometry.Line\nansys.motorcad.core.geometry.Arc"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.mirror",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.mirror.html#ansys.motorcad.core.geometry.Arc.mirror",
        "title": "mirror > mirror > mirror",
        "section": "mirror > mirror",
        "text": "Arc.mirror(mirror_line)\n\nMirror arc about a line.\n\nParameters\n\nmirror_line\n\nansys.motorcad.core.geometry.Line\n\nLine entity to mirror Line about\n\nReturns\n\nansys.motorcad.core.geometry.Arc\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/basics/lab_basics",
        "href": "examples/basics/lab_basics.html#motor-cad-lab-model-example-script",
        "title": "Motor-CAD Lab model example script",
        "section": "Motor-CAD Lab model example script",
        "text": "This example provides a Motor-CAD Lab model script.\nMotor-CAD Lab model example script"
    },
    {
        "objectID": "examples/basics/lab_basics",
        "href": "examples/basics/lab_basics.html#set-up-example",
        "title": "Motor-CAD Lab model example script > Set up example",
        "section": "Set up example",
        "text": "Setting up this example consists of performing imports, launching\nMotor-CAD, disabling all popup messages from Motor-CAD, and opening\nthe file for the lab model.\nPerform required imports\nSet up example"
    },
    {
        "objectID": "examples/basics/lab_basics",
        "href": "examples/basics/lab_basics.html#launch-motor-cad",
        "title": "Motor-CAD Lab model example script > Launch Motor-CAD",
        "section": "Launch Motor-CAD",
        "text": "Launch Motor-CAD"
    },
    {
        "objectID": "examples/basics/lab_basics",
        "href": "examples/basics/lab_basics.html#disable-popup-messages",
        "title": "Motor-CAD Lab model example script > Disable popup messages",
        "section": "Disable popup messages",
        "text": "Disable popup messages"
    },
    {
        "objectID": "examples/basics/lab_basics",
        "href": "examples/basics/lab_basics.html#open-relevant-file",
        "title": "Motor-CAD Lab model example script > Open relevant file",
        "section": "Open relevant file",
        "text": "Specify the working directory and open the relevant file for\nthe lab model.\nOpen relevant file"
    },
    {
        "objectID": "examples/basics/lab_basics",
        "href": "examples/basics/lab_basics.html#build-model",
        "title": "Motor-CAD Lab model example script > Build model",
        "section": "Build model",
        "text": "Set build options for the lab model.\nShow the lab context.\nBuild the model.\nChange operating modes.\nBuild model"
    },
    {
        "objectID": "examples/basics/lab_basics",
        "href": "examples/basics/lab_basics.html#calculate-e-magnetic-performance",
        "title": "Motor-CAD Lab model example script > Calculate e-magnetic performance",
        "section": "Calculate e-magnetic performance",
        "text": "Set e-magnetic calculation options.\nCalculate e-magnetic performance.\nRetrieve results.\nCalculate e-magnetic performance"
    },
    {
        "objectID": "examples/basics/lab_basics",
        "href": "examples/basics/lab_basics.html#plot-results",
        "title": "Motor-CAD Lab model example script > Plot results",
        "section": "Plot results",
        "text": "Plot torque/speed curve results.\nPlot results"
    },
    {
        "objectID": "examples/basics/lab_basics",
        "href": "examples/basics/lab_basics.html#calculate-operating-point",
        "title": "Motor-CAD Lab model example script > Calculate operating point",
        "section": "Calculate operating point",
        "text": "Set operating point calculation options.\n# Calculate operating point.\nRetrieve results.\nCalculate operating point"
    },
    {
        "objectID": "examples/basics/lab_basics",
        "href": "examples/basics/lab_basics.html#exit-motor-cad",
        "title": "Motor-CAD Lab model example script > Exit Motor-CAD",
        "section": "Exit Motor-CAD",
        "text": "Exit Motor-CAD.\nTotal running time of the script: (1 minutes 52.096 seconds)\nDownload Jupyter notebook: lab_basics.ipynb\nDownload Python source code: lab_basics.py\nDownload zipped: lab_basics.zip\nGallery generated by Sphinx-Gallery\nExit Motor-CAD\nDownload Jupyter notebook: lab_basics.ipynb\nDownload Python source code: lab_basics.py\nDownload zipped: lab_basics.zip"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.motorcad_instance",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.motorcad_instance.html#motorcad_instance",
        "title": "motorcad_instance",
        "section": "motorcad_instance",
        "text": "Get or set the linked Motor-CAD instance.\nmotorcad_instance"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.motorcad_instance",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.motorcad_instance.html#ansys.motorcad.core.geometry.Region.motorcad_instance",
        "title": "motorcad_instance > motorcad_instance > motorcad_instance",
        "section": "motorcad_instance > motorcad_instance",
        "text": "property Region.motorcad_instance\n\nGet or set the linked Motor-CAD instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_centre_start_end_rt",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_centre_start_end_rt.html#add_arc_centre_start_end_rt",
        "title": "add_arc_centre_start_end_rt",
        "section": "add_arc_centre_start_end_rt",
        "text": "Add an arc to the Motor-CAD axial geometry with an r, t (polar) coordinate system.\nThis method uses start, end, and center coordinates. Use degrees for angles.\nDeprecated since version 0.6.0: add_arc_centre_start_end_rt will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\nCenter position for the radial coordinate.\nCentre position for the angular coordinate in degrees.\nStart position for the radial coordinate.\nStart position for other angular coordinate in degrees.\nend position radial coordinate\nEnd position for the angular coordinate in degrees.\nadd_arc_centre_start_end_rt\npython:float\npython:float\npython:float\npython:float\npython:float\npython:float"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_centre_start_end_rt",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_centre_start_end_rt.html#ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_centre_start_end_rt",
        "title": "add_arc_centre_start_end_rt > add_arc_centre_start_end_rt > add_arc_centre_start_end_rt",
        "section": "add_arc_centre_start_end_rt > add_arc_centre_start_end_rt",
        "text": "MotorCAD.add_arc_centre_start_end_rt(radius_centre, theta_centre, radius_start, theta_start, radius_end, theta_end)\n\nAdd an arc to the Motor-CAD axial geometry with an r, t (polar) coordinate system.\n\nThis method uses start, end, and center coordinates. Use degrees for angles.\n\nDeprecated since version 0.6.0: add_arc_centre_start_end_rt will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\nParameters\n\nradius_centre\n\npython:float\n\nCenter position for the radial coordinate.\n\ntheta_centre\n\npython:float\n\nCentre position for the angular coordinate in degrees.\n\nradius_start\n\npython:float\n\nStart position for the radial coordinate.\n\ntheta_start\n\npython:float\n\nStart position for other angular coordinate in degrees.\n\nradius_end\n\npython:float\n\nend position radial coordinate\n\ntheta_end\n\npython:float\n\nEnd position for the angular coordinate in degrees.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_exists",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_exists.html#get_node_exists",
        "title": "get_node_exists",
        "section": "get_node_exists",
        "text": "Check if a node exists.\nThermal node number\nTrue if node exists, False otherwise.\nget_node_exists\npython:int\nTrue\nFalse"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_exists",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_exists.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_exists",
        "title": "get_node_exists > get_node_exists > get_node_exists",
        "section": "get_node_exists > get_node_exists",
        "text": "MotorCAD.get_node_exists(node_number)\n\nCheck if a node exists.\n\nParameters\n\nnode_number\n\npython:int\n\nThermal node number\n\nReturns\n\nbool\n\nTrue if node exists, False otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadReportTree",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadReportTree.html#loadreporttree",
        "title": "LoadReportTree",
        "section": "LoadReportTree",
        "text": "Deprecated function. Replaced by MotorCAD.load_report_tree().\nLoadReportTree\nMotorCAD.load_report_tree()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadReportTree",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadReportTree.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadReportTree",
        "title": "LoadReportTree > LoadReportTree > LoadReportTree",
        "section": "LoadReportTree > LoadReportTree",
        "text": "MotorCADCompatibility.LoadReportTree()\n\nDeprecated function. Replaced by MotorCAD.load_report_tree().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.angle",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.angle.html#angle",
        "title": "angle",
        "section": "angle",
        "text": "Get angle of line vector.\nangle"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.angle",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.angle.html#ansys.motorcad.core.geometry.Line.angle",
        "title": "angle > angle > angle",
        "section": "angle > angle",
        "text": "property Line.angle\n\nGet angle of line vector.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_fitting/ansys.motorcad.core.geometry_fitting.return_entity_list",
        "href": "methods/_autosummary_geometry_fitting/ansys.motorcad.core.geometry_fitting.return_entity_list.html#return_entity_list",
        "title": "return_entity_list",
        "section": "return_entity_list",
        "text": "Get list of entities from a list of coordinates.\ncoordinates from which to generate the geometry\nmaximum allowed distance of point away from generated line\nmaximum allowed distance of point away from generated arc\nreturn_entity_list\nList\nof\nansys.motorcad.core.geometry.Coordinate\npython:float\npython:float\nansys.motorcad.core.geometry.EntityList"
    },
    {
        "objectID": "methods/_autosummary_geometry_fitting/ansys.motorcad.core.geometry_fitting.return_entity_list",
        "href": "methods/_autosummary_geometry_fitting/ansys.motorcad.core.geometry_fitting.return_entity_list.html#ansys.motorcad.core.geometry_fitting.return_entity_list",
        "title": "return_entity_list > return_entity_list > return_entity_list",
        "section": "return_entity_list > return_entity_list",
        "text": "ansys.motorcad.core.geometry_fitting.return_entity_list(coordinates, line_tolerance, arc_tolerance)\n\nGet list of entities from a list of coordinates.\n\nParameters\n\ncoordinates\n\nList of ansys.motorcad.core.geometry.Coordinate\n\ncoordinates from which to generate the geometry\n\nline_tolerance\n\npython:float\n\nmaximum allowed distance of point away from generated line\n\narc_tolerance\n\npython:float\n\nmaximum allowed distance of point away from generated arc\n\nReturns\n\nansys.motorcad.core.geometry.EntityList\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_region_loss",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_region_loss.html#get_region_loss",
        "title": "get_region_loss",
        "section": "get_region_loss",
        "text": "Calculate the loss value for an expression of a region.\nThis method is valid for a magnetic solution only.\nThe region is bounded by the radii and angles that are specified in parameters.\nRadii and angle values of 0 give all region losses.\nLosses calculated are per unit length and are only for the FEA areas modeled.\nFor total losses, you must multiply by the symmetry factor.\nget_region_loss"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_region_loss",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_region_loss.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_region_loss",
        "title": "get_region_loss > get_region_loss > get_region_loss",
        "section": "get_region_loss > get_region_loss",
        "text": "MotorCAD.get_region_loss(expression, region_name, radius1, radius2, angle1, angle2)\n\nCalculate the loss value for an expression of a region.\n\nThis method is valid for a magnetic solution only.\nThe region is bounded by the radii and angles that are specified in parameters.\n\nRadii and angle values of 0 give all region losses.\nLosses calculated are per unit length and are only for the FEA areas modeled.\n\nFor total losses, you must multiply by the symmetry factor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveMagnetisationCurves",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveMagnetisationCurves.html#savemagnetisationcurves",
        "title": "SaveMagnetisationCurves",
        "section": "SaveMagnetisationCurves",
        "text": "Deprecated function. Replaced by MotorCAD.save_magnetisation_curves().\nSaveMagnetisationCurves\nMotorCAD.save_magnetisation_curves()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveMagnetisationCurves",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveMagnetisationCurves.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveMagnetisationCurves",
        "title": "SaveMagnetisationCurves > SaveMagnetisationCurves > SaveMagnetisationCurves",
        "section": "SaveMagnetisationCurves > SaveMagnetisationCurves",
        "text": "MotorCADCompatibility.SaveMagnetisationCurves(*args)\n\nDeprecated function. Replaced by MotorCAD.save_magnetisation_curves().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.show_message",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.show_message.html#show_message",
        "title": "show_message",
        "section": "show_message",
        "text": "Display a message in the Motor-CAD message window.\nMessage to display.\nshow_message\npython:str"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.show_message",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.show_message.html#ansys.motorcad.core.motorcad_methods.MotorCAD.show_message",
        "title": "show_message > show_message > show_message",
        "section": "show_message > show_message",
        "text": "MotorCAD.show_message(message)\n\nDisplay a message in the Motor-CAD message window.\n\nParameters\n\nmessage\n\npython:str\n\nMessage to display.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddCircularConductor_A",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddCircularConductor_A.html#addcircularconductor_a",
        "title": "AddCircularConductor_A",
        "section": "AddCircularConductor_A",
        "text": "Deprecated function.\nAddCircularConductor_A"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddCircularConductor_A",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddCircularConductor_A.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddCircularConductor_A",
        "title": "AddCircularConductor_A > AddCircularConductor_A > AddCircularConductor_A",
        "section": "AddCircularConductor_A > AddCircularConductor_A",
        "text": "MotorCADCompatibility.AddCircularConductor_A(*args)\n\nDeprecated function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadScript",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadScript.html#loadscript",
        "title": "LoadScript",
        "section": "LoadScript",
        "text": "Deprecated function. Replaced by MotorCAD.load_script().\nLoadScript\nMotorCAD.load_script()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadScript",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadScript.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadScript",
        "title": "LoadScript > LoadScript > LoadScript",
        "section": "LoadScript > LoadScript",
        "text": "MotorCADCompatibility.LoadScript(*args)\n\nDeprecated function. Replaced by MotorCAD.load_script().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.UpdateInterface",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.UpdateInterface.html#updateinterface",
        "title": "UpdateInterface",
        "section": "UpdateInterface",
        "text": "Deprecated function.\nUpdateInterface"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.UpdateInterface",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.UpdateInterface.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.UpdateInterface",
        "title": "UpdateInterface > UpdateInterface > UpdateInterface",
        "section": "UpdateInterface > UpdateInterface",
        "text": "MotorCADCompatibility.UpdateInterface()\n\nDeprecated function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_region_xy",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_region_xy.html#add_region_xy",
        "title": "add_region_xy",
        "section": "add_region_xy",
        "text": "Add a region to the Motor-CAD geometry with an x, y coordinate system.\nIf a region already exists, this method overwrites the existing region.\nDeprecated since version 0.6.0: add_region_xy will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\nRegion position for the x coordinate.\nRegion position for the y coordinate.\nName of the region.\nadd_region_xy\npython:float\npython:float\npython:str"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_region_xy",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_region_xy.html#ansys.motorcad.core.motorcad_methods.MotorCAD.add_region_xy",
        "title": "add_region_xy > add_region_xy > add_region_xy",
        "section": "add_region_xy > add_region_xy",
        "text": "MotorCAD.add_region_xy(x, y, region_name)\n\nAdd a region to the Motor-CAD geometry with an x, y coordinate system.\n\nIf a region already exists, this method overwrites the existing region.\n\nDeprecated since version 0.6.0: add_region_xy will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\nParameters\n\nx\n\npython:float\n\nRegion position for the x coordinate.\n\ny\n\npython:float\n\nRegion position for the y coordinate.\n\nregion_name\n\npython:str\n\nName of the region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.get_polar_coords_deg",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.get_polar_coords_deg.html#get_polar_coords_deg",
        "title": "get_polar_coords_deg",
        "section": "get_polar_coords_deg",
        "text": "Get coordinates as polar coordinates in degrees.\nget_polar_coords_deg"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.get_polar_coords_deg",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.get_polar_coords_deg.html#ansys.motorcad.core.geometry.Coordinate.get_polar_coords_deg",
        "title": "get_polar_coords_deg > get_polar_coords_deg > get_polar_coords_deg",
        "section": "get_polar_coords_deg > get_polar_coords_deg",
        "text": "Coordinate.get_polar_coords_deg()\n\nGet coordinates as polar coordinates in degrees.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.save_transient_power_values",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.save_transient_power_values.html#save_transient_power_values",
        "title": "save_transient_power_values",
        "section": "save_transient_power_values",
        "text": "Save transient power results to a text file.\nText file separator defined using the\n\"ExportTextSeparator\" parameter (default is semicolon).\nsave_transient_power_values\n\"ExportTextSeparator\""
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.save_transient_power_values",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.save_transient_power_values.html#ansys.motorcad.core.motorcad_methods.MotorCAD.save_transient_power_values",
        "title": "save_transient_power_values > save_transient_power_values > save_transient_power_values",
        "section": "save_transient_power_values > save_transient_power_values",
        "text": "MotorCAD.save_transient_power_values(file_name)\n\nSave transient power results to a text file.\n\nText file separator defined using the\n\"ExportTextSeparator\" parameter (default is semicolon).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.load_external_model_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.load_external_model_lab.html#load_external_model_lab",
        "title": "load_external_model_lab",
        "section": "load_external_model_lab",
        "text": "Load an external model data file.\nThis parameter is used when the Lab link type is set to Custom or Ansys Maxwell.\nFull path to the data file, including the file name. Use the r'filepath'\nsyntax to force Python to ignore special characters.\nload_external_model_lab\nCustom\nAnsys Maxwell\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.load_external_model_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.load_external_model_lab.html#ansys.motorcad.core.motorcad_methods.MotorCAD.load_external_model_lab",
        "title": "load_external_model_lab > load_external_model_lab > load_external_model_lab",
        "section": "load_external_model_lab > load_external_model_lab",
        "text": "MotorCAD.load_external_model_lab(file_path)\n\nLoad an external model data file.\n\nThis parameter is used when the Lab link type is set to Custom or Ansys Maxwell.\n\nParameters\n\nfile_path\n\npython:str\n\nFull path to the data file, including the file name. Use the r'filepath'\nsyntax to force Python to ignore special characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/adaptive_library/TrapezoidalDuct",
        "href": "examples/adaptive_library/TrapezoidalDuct.html#trapezoidal-ducts",
        "title": "Trapezoidal ducts",
        "section": "Trapezoidal ducts",
        "text": "This script applies the adaptive templates functionality to modify rectangular ducts\ninto trapezoidal ducts.\nTrapezoidal ducts"
    },
    {
        "objectID": "examples/adaptive_library/TrapezoidalDuct",
        "href": "examples/adaptive_library/TrapezoidalDuct.html#perform-required-imports",
        "title": "Trapezoidal ducts > Perform required imports",
        "section": "Perform required imports",
        "text": "Import pymotorcad to access Motor-CAD.\nImport Coordinate, rt_to_xy, xy_to_rt\nto define the adaptive template geometry.\nImport os, shutil, sys, and tempfile\nto open and save a temporary .mot file if none is open.\nPerform required imports\npymotorcad\nCoordinate\nrt_to_xy\nxy_to_rt\nos\nshutil\nsys\ntempfile"
    },
    {
        "objectID": "examples/adaptive_library/TrapezoidalDuct",
        "href": "examples/adaptive_library/TrapezoidalDuct.html#connect-to-motor-cad",
        "title": "Trapezoidal ducts > Connect to Motor-CAD",
        "section": "Connect to Motor-CAD",
        "text": "If this script is loaded into the Adaptive Templates file in Motor-CAD, the current Motor-CAD\ninstance is used.\nIf the script is run externally, these actions occur: a new Motor-CAD instance is opened,\nthe e10 IPM motor template is loaded and set up with four rectangular rotor ducts, and the file is\nsaved to a temporary folder. To keep a new Motor-CAD instance open after executing the script, use\nthe``MotorCAD(keep_instance_open=True)`` option when opening the new instance.\nAlternatively, use the MotorCAD() method, which closes the Motor-CAD instance after the\nscript is executed.\nConnect to Motor-CAD\nMotorCAD()"
    },
    {
        "objectID": "examples/adaptive_library/TrapezoidalDuct",
        "href": "examples/adaptive_library/TrapezoidalDuct.html#define-necessary-functions",
        "title": "Trapezoidal ducts > Define necessary functions",
        "section": "Define necessary functions",
        "text": "Define necessary functions"
    },
    {
        "objectID": "examples/adaptive_library/TrapezoidalDuct",
        "href": "examples/adaptive_library/TrapezoidalDuct.html#check-line-distance-from-origin",
        "title": "Trapezoidal ducts > Check line distance from origin",
        "section": "Check line distance from origin",
        "text": "The rectangle consists of two lines of length equal to the rectangle width.\nOnly the top line requires modification.\nIt is necessary to check whether the line is closest to the origin. Index i is\nthe line under investigation. Index j is the adjacent line. If the radius of midpoint of line\ni is less than that of line j , line i is closer to the origin.\nCheck line distance from origin\ni\nj\ni\nj\ni"
    },
    {
        "objectID": "examples/adaptive_library/TrapezoidalDuct",
        "href": "examples/adaptive_library/TrapezoidalDuct.html#get-required-parameters-and-objects",
        "title": "Trapezoidal ducts > Get required parameters and objects",
        "section": "Get required parameters and objects",
        "text": "From Motor-CAD, get the adaptive parameters and their values.\nUse the set_adaptive_parameter_default() method to set the required Trapezoid_base_ratio\nparameter if undefined.\nSet required parameters for the trapezoid: ratio of top width / base width\n(Trapezoid_base_ratio), trapezoid width and trapezoid height.\nGet the standard template rotor region. This can be drawn for debugging if required.\nGet required parameters and objects\nset_adaptive_parameter_default()\nTrapezoid_base_ratio\nTrapezoid_base_ratio"
    },
    {
        "objectID": "examples/adaptive_library/TrapezoidalDuct",
        "href": "examples/adaptive_library/TrapezoidalDuct.html#create-the-adaptive-templates-geometry",
        "title": "Trapezoidal ducts > Create the Adaptive Templates geometry",
        "section": "Create the Adaptive Templates geometry",
        "text": "For each child region of the rotor region:\nCheck whether the region is a rotor duct.\nFind the top line that makes up the duct.\nModify the start and end points of the line using the get_coordinate_from_distance() method.\nSet the region in Motor-CAD.\nThe script accounts for whether ducts are full ducts or half ducts (the case when a duct spans the\nrotor pole boundary)\nCreate the Adaptive Templates geometry"
    },
    {
        "objectID": "examples/adaptive_library/TrapezoidalDuct",
        "href": "examples/adaptive_library/TrapezoidalDuct.html#load-in-adaptive-templates-script-if-required",
        "title": "Trapezoidal ducts > Load in Adaptive Templates script if required",
        "section": "Load in Adaptive Templates script if required",
        "text": "When this script is run externally, the script executes the following:\nSet Geometry type to Adaptive.\nLoad the script into the Adaptive Templates tab.\nGo to the Geometry -> Radial tab to run the Adaptive Templates script and display the new\ngeometry.\nWhen running in a Jupyter Notebook, you must provide the path for the Adaptive Templates script\n(PY file) instead of sys.argv[0] when using the load_adaptive_script() method.\nTotal running time of the script: (0 minutes 43.923 seconds)\nDownload Jupyter notebook: TrapezoidalDuct.ipynb\nDownload Python source code: TrapezoidalDuct.py\nDownload zipped: TrapezoidalDuct.zip\nGallery generated by Sphinx-Gallery\nLoad in Adaptive Templates script if required\nsys.argv[0]\nload_adaptive_script()\nDownload Jupyter notebook: TrapezoidalDuct.ipynb\nDownload Python source code: TrapezoidalDuct.py\nDownload zipped: TrapezoidalDuct.zip"
    },
    {
        "objectID": "user_guide/backwards_compatibility",
        "href": "user_guide/backwards_compatibility.html#backwards-compatibility-with-old-scripts",
        "title": "Backwards compatibility with old scripts",
        "section": "Backwards compatibility with old scripts",
        "text": "You can convert old ActiveX scripts to use PyMotorCAD\nas indicated in the subsequent sections.\nBackwards compatibility with old scripts"
    },
    {
        "objectID": "user_guide/backwards_compatibility",
        "href": "user_guide/backwards_compatibility.html#change-communication-method",
        "title": "Backwards compatibility with old scripts > Change communication method",
        "section": "Change communication method",
        "text": "Old ActiveX scripts use this code to connect to Motor-CAD:\nTo use PyMotorCAD to connect to Motor-CAD, you replace the preceding code\nwith this code:\nWhile changing the communication method allows old ActiveX scripts to be\nconverted with minimal changes, some of the new features of PyMotorCAD\nare turned off to ensure compatibility of these older scripts.\nChange communication method"
    },
    {
        "objectID": "user_guide/backwards_compatibility",
        "href": "user_guide/backwards_compatibility.html#convert-script-fully",
        "title": "Backwards compatibility with old scripts > Convert script fully",
        "section": "Convert script fully",
        "text": "To convert an old script so that it can use new PyMotorCAD features, you must change\nchange function names in the script to use Python syntax and update the function syntax.\nConvert script fully"
    },
    {
        "objectID": "user_guide/backwards_compatibility",
        "href": "user_guide/backwards_compatibility.html#change-function-names",
        "title": "Backwards compatibility with old scripts > Change function names",
        "section": "Change function names",
        "text": "Python code conventions specify the use of snake case for function names. Thus, all\nfunctions in the ref_MotorCAD_object use lower case with underscores (snake_case).\nFor example, the function call for getting a variable in an old ActiveX script looks\nlike this:\nThe function name must be changed to use the Python function name:\nIf you are using a modern Python IDE, changing function names is straightforward\nbecause the IDE suggests functions based on your input:\nBuilt into the Python package is documentation that explains what\nfunctions do and what parameters they require:\nAdditionally, you can search for functions in the ref_MotorCAD_object.\nChange function names"
    },
    {
        "objectID": "user_guide/backwards_compatibility",
        "href": "user_guide/backwards_compatibility.html#update-function-syntax",
        "title": "Backwards compatibility with old scripts > Update function syntax",
        "section": "Update function syntax",
        "text": "In old ActiveX scripts, functions returned a success variable that would need\nto be checked to ensure an API call had been successful:\nThis meant that API calls could fail silently unless you checked the success variable every time.\nThis success variable has been removed because PyMotorCAD raises an exception if a failure occurs:\nFor cases where you might expect the API call to fail, you should wrap it in a try/except.\nFor example, the following script reads graph points until the end of the graph.\nThe MotorCADError exception type is used so that only errors raised by MotorCAD are caught:\nUpdate function syntax\nMotorCADError"
    },
    {
        "objectID": "methods/_autogen_FEA Geometry",
        "href": "methods/_autogen_FEA Geometry.html#fea-geometry",
        "title": "FEA Geometry",
        "section": "FEA Geometry",
        "text": "add_arc_boundary_rt(direction, rc, tc, th1, ...)\nAdd a boundary condition arc using r, t coordinates for the center.\nadd_arc_boundary_xy(direction, xc, yc, th1, ...)\nAdd a boundary condition arc using x, y coordinates for the center.\nadd_arc_centre_start_end_rt(radius_centre, ...)\nAdd an arc to the Motor-CAD axial geometry with an r, t (polar) coordinate system.\nadd_arc_centre_start_end_xy(x_centre, ...)\nAdd an arc to the Motor-CAD axial geometry with an r, t (polar) coordinate system.\nadd_arc_rt(radius_center, theta_centre, ...)\nAdd an arc to the Motor-CAD axial geometry with an r, t (polar) coordinate system.\nadd_arc_xy(x_centre, y_centre, theta_start, ...)\nAdd an arc to the Motor-CAD axial geometry with an x, y coordinate system.\nadd_line_boundary_rt(rs, ts, re, t_e, ...)\nAdd a boundary condition line using r, t coordinates for the start and end points.\nadd_line_boundary_xy(xs, ys, xe, ye, ...)\nAdd a boundary condition line using x, y coordinates for the start and end points.\nadd_line_rt(radius_start, theta_start, ...)\nAdd a line to the Motor-CAD axial geometry with an r, t (polar) coordinate system.\nadd_line_xy(x_start, y_start, x_end, y_end)\nAdd a line to the Motor-CAD axial geometry with an x, y coordinate system.\nadd_magnet_region_rt(radius, theta, ...)\nAdd a magnet region to the Motor-CAD geometry with an r, t (polar) coordinate system.\nadd_magnet_region_xy(x, y, region_name, ...)\nAdd a magnet region to the Motor-CAD geometry with an x, y coordinate system.\nadd_point_custom_material_rt(radius, theta, ...)\nAdd a region to the geometry and specify the material.\nadd_point_custom_material_xy(x, y, ...)\nAdd a region to the geometry and specify the material.\nadd_region_rt(radius, theta, region_name)\nAdd a region to the Motor-CAD geometry with an r, t (polar) coordinate system.\nadd_region_xy(x, y, region_name)\nAdd a region to the Motor-CAD geometry with an x, y coordinate system.\nclear_all_data()\nClear data and initialize the FEA.\ncreate_optimised_mesh()\nCreate the FEA geometry and an optimized mesh.\ndelete_regions(region_name)\nDelete a comma-separated list of named regions or all regions.\ndo_slot_finite_element()\nRun slot FEA.\nedit_magnet_region(region_name, ...)\nEdit a magnet region.\nget_point_value(parameter, x, y)\nGet a point value from the Motor-CAD FEA.\nget_region_loss(expression, region_name, ...)\nCalculate the loss value for an expression of a region.\nget_region_value(expression, region_name)\nCalculate the integral value for an expression of a region.\ninitiate_geometry_from_script()\nInitiate the geometry from scripting so Motor-CAD knows how to use it.\nreset_regions()\nReset custom FEA regions to standard regions from the Motor-CAD template geometry.\nsave_fea_data(file, first_step, final_step, ...)\nSave raw data for the current FEA solution.\nset_fea_path_arc(path_name, path_location, ...)\nAdd or edit an arc in the path editor.\nset_fea_path_line(path_name, path_location, ...)\nAdd or edit a line in the path editor.\nset_fea_path_point(path_name, path_location, ...)\nAdd or edit a point in the path editor.\nFEA Geometry\nadd_arc_boundary_rt\nadd_arc_boundary_xy\nadd_arc_centre_start_end_rt\nadd_arc_centre_start_end_xy\nadd_arc_rt\nadd_arc_xy\nadd_line_boundary_rt\nadd_line_boundary_xy\nadd_line_rt\nadd_line_xy\nadd_magnet_region_rt\nadd_magnet_region_xy\nadd_point_custom_material_rt\nadd_point_custom_material_xy\nadd_region_rt\nadd_region_xy\nclear_all_data\ncreate_optimised_mesh\ndelete_regions\ndo_slot_finite_element\nedit_magnet_region\nget_point_value\nget_region_loss\nget_region_value\ninitiate_geometry_from_script\nreset_regions\nsave_fea_data\nset_fea_path_arc\nset_fea_path_line\nset_fea_path_point"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_rt",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_rt.html#add_arc_rt",
        "title": "add_arc_rt",
        "section": "add_arc_rt",
        "text": "Add an arc to the Motor-CAD axial geometry with an r, t (polar) coordinate system.\nThis method uses the center point, radius, and angles. Use degrees for angles.\nDeprecated since version 0.6.0: add_arc_rt will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\nCenter position the radial coordinate.\nCenter position for the angular coordinate.\nAngular coordinate of the arc start point in degrees.\nAngular coordinate of the arc end point in degrees.\nRadius of the arc from the center point.\nadd_arc_rt\npython:float\npython:float\npython:float\npython:float\npython:float"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_rt",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_rt.html#ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_rt",
        "title": "add_arc_rt > add_arc_rt > add_arc_rt",
        "section": "add_arc_rt > add_arc_rt",
        "text": "MotorCAD.add_arc_rt(radius_center, theta_centre, theta_start, theta_end, radius)\n\nAdd an arc to the Motor-CAD axial geometry with an r, t (polar) coordinate system.\n\nThis method uses the center point, radius, and angles. Use degrees for angles.\n\nDeprecated since version 0.6.0: add_arc_rt will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\nParameters\n\nradius_center\n\npython:float\n\nCenter position the radial coordinate.\n\ntheta_centre\n\npython:float\n\nCenter position for the angular coordinate.\n\ntheta_start\n\npython:float\n\nAngular coordinate of the arc start point in degrees.\n\ntheta_end\n\npython:float\n\nAngular coordinate of the arc end point in degrees.\n\nradius\n\npython:float\n\nRadius of the arc from the center point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.get_component_material",
        "href": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.get_component_material.html#get_component_material",
        "title": "get_component_material",
        "section": "get_component_material",
        "text": "Get the solid material name of the component.\nComponent name. In Motor-CAD, you can select Input Data -> Materials\nand view the Component column to see component names.\nget_component_material\npython:str"
    },
    {
        "objectID": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.get_component_material",
        "href": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.get_component_material.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_component_material",
        "title": "get_component_material > get_component_material > get_component_material",
        "section": "get_component_material > get_component_material",
        "text": "MotorCAD.get_component_material(component_name)\n\nGet the solid material name of the component.\n\nParameters\n\ncomponent_name\n\npython:str\n\nComponent name. In Motor-CAD, you can select Input Data -> Materials\nand view the Component column to see component names.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.br_multiplier",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.br_multiplier.html#br_multiplier",
        "title": "br_multiplier",
        "section": "br_multiplier",
        "text": "Br multiplier.\nbr_multiplier\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.br_multiplier",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.br_multiplier.html#ansys.motorcad.core.geometry.RegionMagnet.br_multiplier",
        "title": "br_multiplier > br_multiplier > br_multiplier",
        "section": "br_multiplier > br_multiplier",
        "text": "property RegionMagnet.br_multiplier\n\nBr multiplier.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CreateNewNode",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CreateNewNode.html#createnewnode",
        "title": "CreateNewNode",
        "section": "CreateNewNode",
        "text": "Deprecated function. Replaced by MotorCAD.create_new_node().\nCreateNewNode\nMotorCAD.create_new_node()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CreateNewNode",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CreateNewNode.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CreateNewNode",
        "title": "CreateNewNode > CreateNewNode > CreateNewNode",
        "section": "CreateNewNode > CreateNewNode",
        "text": "MotorCADCompatibility.CreateNewNode(*args)\n\nDeprecated function. Replaced by MotorCAD.create_new_node().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.impreg_loss_lot_ac_loss",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.impreg_loss_lot_ac_loss.html#impreg_loss_lot_ac_loss",
        "title": "impreg_loss_lot_ac_loss",
        "section": "impreg_loss_lot_ac_loss",
        "text": "impreg_loss_lot_ac_loss"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.impreg_loss_lot_ac_loss",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.impreg_loss_lot_ac_loss.html#ansys.motorcad.core.geometry.RegionType.impreg_loss_lot_ac_loss",
        "title": "impreg_loss_lot_ac_loss > impreg_loss_lot_ac_loss > impreg_loss_lot_ac_loss",
        "section": "impreg_loss_lot_ac_loss > impreg_loss_lot_ac_loss",
        "text": "RegionType.impreg_loss_lot_ac_loss = 'Stator Proximity Loss Slot'\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveWindingPattern",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveWindingPattern.html#savewindingpattern",
        "title": "SaveWindingPattern",
        "section": "SaveWindingPattern",
        "text": "Deprecated function. Replaced by MotorCAD.save_winding_pattern().\nSaveWindingPattern\nMotorCAD.save_winding_pattern()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveWindingPattern",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveWindingPattern.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveWindingPattern",
        "title": "SaveWindingPattern > SaveWindingPattern > SaveWindingPattern",
        "section": "SaveWindingPattern > SaveWindingPattern",
        "text": "MotorCADCompatibility.SaveWindingPattern(*args)\n\nDeprecated function. Replaced by MotorCAD.save_winding_pattern().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.duplications",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.duplications.html#duplications",
        "title": "duplications",
        "section": "duplications",
        "text": "Get or set number of region duplications for the full machine.\nduplications"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.duplications",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.duplications.html#ansys.motorcad.core.geometry.Region.duplications",
        "title": "duplications > duplications > duplications",
        "section": "duplications > duplications",
        "text": "property Region.duplications\n\nGet or set number of region duplications for the full machine.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.get_licence",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.get_licence.html#get_licence",
        "title": "get_licence",
        "section": "get_licence",
        "text": "Check if a license is available for the current context and machine type.\nIf such a license is available, it is checked out.\nget_licence"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.get_licence",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.get_licence.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_licence",
        "title": "get_licence > get_licence > get_licence",
        "section": "get_licence > get_licence",
        "text": "MotorCAD.get_licence()\n\nCheck if a license is available for the current context and machine type.\n\nIf such a license is available, it is checked out.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.Quit",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.Quit.html#quit",
        "title": "Quit",
        "section": "Quit",
        "text": "Deprecated function. Replaced by MotorCAD.quit().\nQuit\nMotorCAD.quit()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.Quit",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.Quit.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.Quit",
        "title": "Quit > Quit > Quit",
        "section": "Quit > Quit",
        "text": "MotorCADCompatibility.Quit()\n\nDeprecated function. Replaced by MotorCAD.quit().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadFEAResult",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadFEAResult.html#loadfearesult",
        "title": "LoadFEAResult",
        "section": "LoadFEAResult",
        "text": "Deprecated function. Replaced by MotorCAD.load_fea_result().\nLoadFEAResult\nMotorCAD.load_fea_result()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadFEAResult",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadFEAResult.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadFEAResult",
        "title": "LoadFEAResult > LoadFEAResult > LoadFEAResult",
        "section": "LoadFEAResult > LoadFEAResult",
        "text": "MotorCADCompatibility.LoadFEAResult(*args)\n\nDeprecated function. Replaced by MotorCAD.load_fea_result().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.translate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.translate.html#translate",
        "title": "translate",
        "section": "translate",
        "text": "Translate Region by specified x,y distances.\nx distance.\ny distance.\ntranslate\npython:float\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.translate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.translate.html#ansys.motorcad.core.geometry.Region.translate",
        "title": "translate > translate > translate",
        "section": "translate > translate",
        "text": "Region.translate(x, y)\n\nTranslate Region by specified x,y distances.\n\nParameters\n\nx\n\npython:float\n\nx distance.\n\ny\n\npython:float\n\ny distance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.duplications",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.duplications.html#duplications",
        "title": "duplications",
        "section": "duplications",
        "text": "Get or set number of region duplications for the full machine.\nduplications"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.duplications",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.duplications.html#ansys.motorcad.core.geometry.RegionMagnet.duplications",
        "title": "duplications > duplications > duplications",
        "section": "duplications > duplications",
        "text": "property RegionMagnet.duplications\n\nGet or set number of region duplications for the full machine.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.damper_bar",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.damper_bar.html#damper_bar",
        "title": "damper_bar",
        "section": "damper_bar",
        "text": "damper_bar"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.damper_bar",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.damper_bar.html#ansys.motorcad.core.geometry.RegionType.damper_bar",
        "title": "damper_bar > damper_bar > damper_bar",
        "section": "damper_bar > damper_bar",
        "text": "RegionType.damper_bar = 'Damper Bar'\n\n"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_dxf_file",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_dxf_file.html#load_dxf_file",
        "title": "load_dxf_file",
        "section": "load_dxf_file",
        "text": "Load a DXF geometry file.\nName of the DXF file. Use r’filepath’ syntax to force Python\nto ignore special characters.\nload_dxf_file\npython:str"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_dxf_file",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_dxf_file.html#ansys.motorcad.core.motorcad_methods.MotorCAD.load_dxf_file",
        "title": "load_dxf_file > load_dxf_file > load_dxf_file",
        "section": "load_dxf_file > load_dxf_file",
        "text": "MotorCAD.load_dxf_file(file_name)\n\nLoad a DXF geometry file.\n\nParameters\n\nfile_name\n\npython:str\n\nName of the DXF file. Use r’filepath’ syntax to force Python\nto ignore special characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_point_custom_material_rt",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_point_custom_material_rt.html#add_point_custom_material_rt",
        "title": "add_point_custom_material_rt",
        "section": "add_point_custom_material_rt",
        "text": "Add a region to the geometry and specify the material.\nDo not use this method to add a magnet. Use the add_magnet_region_rt method.\nUse degrees for angles.\nDeprecated since version 0.6.0: add_point_custom_material_rt will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\nRegion position for the radial coordinate.\nRegion position for the angular coordinate in degrees.\nName of the region.\nNName of the material. In Motor-CAD, material names can be found in\nInput Data -> materials. The material type (laminated, solid,\nor air) is set automatically.\nVCL color. For more information, see https://wiki.freepascal.org/Colors.\nThe color can be designaed as a hexadecimal value, such as \"$008000\"\nor a color name such as \"clGreen\".\nadd_point_custom_material_rt\nadd_magnet_region_rt\npython:float\npython:float\npython:str\npython:str\nlaminated\nsolid\nair\npython:str\n\"$008000\"\n\"clGreen\""
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_point_custom_material_rt",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_point_custom_material_rt.html#ansys.motorcad.core.motorcad_methods.MotorCAD.add_point_custom_material_rt",
        "title": "add_point_custom_material_rt > add_point_custom_material_rt > add_point_custom_material_rt",
        "section": "add_point_custom_material_rt > add_point_custom_material_rt",
        "text": "MotorCAD.add_point_custom_material_rt(radius, theta, region_name, material_name, colour)\n\nAdd a region to the geometry and specify the material.\n\nDo not use this method to add a magnet. Use the add_magnet_region_rt method.\n\nUse degrees for angles.\n\nDeprecated since version 0.6.0: add_point_custom_material_rt will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\nParameters\n\nradius\n\npython:float\n\nRegion position for the radial coordinate.\n\ntheta\n\npython:float\n\nRegion position for the angular coordinate in degrees.\n\nregion_name\n\npython:str\n\nName of the region.\n\nmaterial_name\n\npython:str\n\nNName of the material. In Motor-CAD, material names can be found in\nInput Data -> materials. The material type (laminated, solid,\nor air) is set automatically.\n\ncolour\n\npython:str\n\nVCL color. For more information, see https://wiki.freepascal.org/Colors.\nThe color can be designaed as a hexadecimal value, such as \"$008000\"\nor a color name such as \"clGreen\".\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.banding",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.banding.html#banding",
        "title": "banding",
        "section": "banding",
        "text": "banding"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.banding",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.banding.html#ansys.motorcad.core.geometry.RegionType.banding",
        "title": "banding > banding > banding",
        "section": "banding > banding",
        "text": "RegionType.banding = 'Banding'\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetFEAGraphPoint",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetFEAGraphPoint.html#getfeagraphpoint",
        "title": "GetFEAGraphPoint",
        "section": "GetFEAGraphPoint",
        "text": "Deprecated function. Replaced by MotorCAD.get_fea_graph_point().\nGetFEAGraphPoint\nMotorCAD.get_fea_graph_point()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetFEAGraphPoint",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetFEAGraphPoint.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetFEAGraphPoint",
        "title": "GetFEAGraphPoint > GetFEAGraphPoint > GetFEAGraphPoint",
        "section": "GetFEAGraphPoint > GetFEAGraphPoint",
        "text": "MotorCADCompatibility.GetFEAGraphPoint(*args)\n\nDeprecated function. Replaced by MotorCAD.get_fea_graph_point().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.reset_regions",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.reset_regions.html#reset_regions",
        "title": "reset_regions",
        "section": "reset_regions",
        "text": "Reset custom FEA regions to standard regions from the Motor-CAD template geometry.\nDeprecated since version 0.6.0: reset_regions will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\nreset_regions"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.reset_regions",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.reset_regions.html#ansys.motorcad.core.motorcad_methods.MotorCAD.reset_regions",
        "title": "reset_regions > reset_regions > reset_regions",
        "section": "reset_regions > reset_regions",
        "text": "MotorCAD.reset_regions()\n\nReset custom FEA regions to standard regions from the Motor-CAD template geometry.\n\nDeprecated since version 0.6.0: reset_regions will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_line_xy",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_line_xy.html#add_line_xy",
        "title": "add_line_xy",
        "section": "add_line_xy",
        "text": "Add a line to the Motor-CAD axial geometry with an x, y coordinate system.\nDeprecated since version 0.6.0: add_line_xy will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\nStart position for the x coordinate.\nStart position for the y coordinate.\nEnd position for the x coordinate.\nEnd position for the y coordinate.\nadd_line_xy\npython:float\npython:float\npython:float\npython:float"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_line_xy",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_line_xy.html#ansys.motorcad.core.motorcad_methods.MotorCAD.add_line_xy",
        "title": "add_line_xy > add_line_xy > add_line_xy",
        "section": "add_line_xy > add_line_xy",
        "text": "MotorCAD.add_line_xy(x_start, y_start, x_end, y_end)\n\nAdd a line to the Motor-CAD axial geometry with an x, y coordinate system.\n\nDeprecated since version 0.6.0: add_line_xy will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\nParameters\n\nx_start\n\npython:float\n\nStart position for the x coordinate.\n\ny_start\n\npython:float\n\nStart position for the y coordinate.\n\nx_end\n\npython:float\n\nEnd position for the x coordinate.\n\ny_end\n\npython:float\n\nEnd position for the y coordinate.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_to_ansys_electronics_desktop",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_to_ansys_electronics_desktop.html#export_to_ansys_electronics_desktop",
        "title": "export_to_ansys_electronics_desktop",
        "section": "export_to_ansys_electronics_desktop",
        "text": "Export the model to a VBS script file that can run in Ansys Electronics Desktop.\nAbsolute filepath for the VSB script file. The default filepath\nis the Windows directory on the C: drive. The filepath must include\nthe name of the file. To specify a different filepath, use the r'filepath'\nsyntax to force Python to ignore special characters.\nexport_to_ansys_electronics_desktop\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_to_ansys_electronics_desktop",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_to_ansys_electronics_desktop.html#ansys.motorcad.core.motorcad_methods.MotorCAD.export_to_ansys_electronics_desktop",
        "title": "export_to_ansys_electronics_desktop > export_to_ansys_electronics_desktop > export_to_ansys_electronics_desktop",
        "section": "export_to_ansys_electronics_desktop > export_to_ansys_electronics_desktop",
        "text": "MotorCAD.export_to_ansys_electronics_desktop(file_path)\n\nExport the model to a VBS script file that can run in Ansys Electronics Desktop.\n\nParameters\n\nfile_path\n\npython:str\n\nAbsolute filepath for the VSB script file. The default filepath\nis the Windows directory on the C: drive. The filepath must include\nthe name of the file. To specify a different filepath, use the r'filepath'\nsyntax to force Python to ignore special characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.region_coordinate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.region_coordinate.html#region_coordinate",
        "title": "region_coordinate",
        "section": "region_coordinate",
        "text": "Get the reference coordinate within the region.\nregion_coordinate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.region_coordinate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.region_coordinate.html#ansys.motorcad.core.geometry.Region.region_coordinate",
        "title": "region_coordinate > region_coordinate > region_coordinate",
        "section": "region_coordinate > region_coordinate",
        "text": "property Region.region_coordinate\n\nGet the reference coordinate within the region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.html#regionmagnet",
        "title": "RegionMagnet",
        "section": "RegionMagnet",
        "text": "Provides the Python representation of a Motor-CAD magnet geometry region.\nRegionMagnet.add_entity(entity)\nAdd entity to list of region entities.\nRegionMagnet.add_point(point)\nAdd a new point into region on an existing Line/Arc.\nRegionMagnet.collides(regions)\nCheck whether any of the specified regions collide with self.\nRegionMagnet.edit_point(old_coordinates, ...)\nEdit a point in the region and update entities.\nRegionMagnet.find_entity_from_coordinates(...)\nSearch through region to find an entity with start and end coordinates.\nRegionMagnet.from_coordinate_list()\nWork in progress.\nRegionMagnet.insert_entity(index, entity)\nInsert entity to list of region entities at given index.\nRegionMagnet.insert_polyline(index, polyline)\nInsert polyline at given index, polyline can be made up of line/arc entities.\nRegionMagnet.is_closed()\nCheck whether region entities create a closed region.\nRegionMagnet.limit_arc_chord(max_chord_height)\nLimit the chord height for arcs in a region.\nRegionMagnet.mirror(mirror_line[, unique_name])\nMirror region along entity.\nRegionMagnet.remove_entity(entity_remove)\nRemove the entity from the region.\nRegionMagnet.replace(replacement_region)\nReplace self with another region.\nRegionMagnet.rotate(centre_point, angle)\nRotate Region around a point for a given angle.\nRegionMagnet.round_corner(corner_coordinate, ...)\nRound the corner of a region.\nRegionMagnet.round_corners(...)\nRound multiple corners of a region.\nRegionMagnet.subtract(region)\nSubtract region from self, returning any additional regions.\nRegionMagnet.translate(x, y)\nTranslate Region by specified x,y distances.\nRegionMagnet.unite(regions)\nUnite one or more other regions with self.\nRegionMagnet.update(region)\nUpdate class fields from another region.\nRegionMagnet.area\nGet the region area.\nRegionMagnet.br_multiplier\nBr multiplier.\nRegionMagnet.br_used\nBr used after applying Br multiplier.\nRegionMagnet.br_value\nBr value of magnet before Br multiplier applied.\nRegionMagnet.br_x\nX-axis component of br value.\nRegionMagnet.br_y\nY-axis component of the br value.\nRegionMagnet.centroid\nGet the region centroid.\nRegionMagnet.child_names\nGet child names list.\nRegionMagnet.children\nReturn list of child regions from Motor-CAD.\nRegionMagnet.colour\nGet or set region colour.\nRegionMagnet.duplications\nGet or set number of region duplications for the full machine.\nRegionMagnet.entities\nGet or set the list of entities in the region.\nRegionMagnet.lamination_type\nGet or set lamination type of region from Motor-CAD.\nRegionMagnet.linked_region\nGet or set linked duplication/unite region.\nRegionMagnet.magnet_angle\nAngle of the magnet in degrees.\nRegionMagnet.magnet_polarity\nPolarity of the magnet.\nRegionMagnet.material\nGet or set region material name.\nRegionMagnet.mesh_length\nGet or set the mesh length to use, or 0 for default.\nRegionMagnet.motorcad_instance\nGet or set the linked Motor-CAD instance.\nRegionMagnet.name\nGet or set region name.\nRegionMagnet.parent\nGet or set parent region from Motor-CAD.\nRegionMagnet.parent_name\nGet or set the region parent name.\nRegionMagnet.points\nGet points that exist in region.\nRegionMagnet.region_coordinate\nGet the reference coordinate within the region.\nRegionMagnet.region_type\nGet region type.\nRegionMagnet.singular\nGet or set if region is singular.\nRegionMagnet\nRegionMagnet.add_entity\nRegionMagnet.add_point\nRegionMagnet.collides\nRegionMagnet.edit_point\nRegionMagnet.find_entity_from_coordinates\nRegionMagnet.from_coordinate_list\nRegionMagnet.insert_entity\nRegionMagnet.insert_polyline\nRegionMagnet.is_closed\nRegionMagnet.limit_arc_chord\nRegionMagnet.mirror\nRegionMagnet.remove_entity\nRegionMagnet.replace\nRegionMagnet.rotate\nRegionMagnet.round_corner\nRegionMagnet.round_corners\nRegionMagnet.subtract\nRegionMagnet.translate\nRegionMagnet.unite\nRegionMagnet.update\nRegionMagnet.area\nRegionMagnet.br_multiplier\nRegionMagnet.br_used\nRegionMagnet.br_value\nRegionMagnet.br_x\nRegionMagnet.br_y\nRegionMagnet.centroid\nRegionMagnet.child_names\nRegionMagnet.children\nRegionMagnet.colour\nRegionMagnet.duplications\nRegionMagnet.entities\nRegionMagnet.lamination_type\nRegionMagnet.linked_region\nRegionMagnet.magnet_angle\nRegionMagnet.magnet_polarity\nRegionMagnet.material\nRegionMagnet.mesh_length\nRegionMagnet.motorcad_instance\nRegionMagnet.name\nRegionMagnet.parent\nRegionMagnet.parent_name\nRegionMagnet.points\nRegionMagnet.region_coordinate\nRegionMagnet.region_type\nRegionMagnet.singular"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.html#ansys.motorcad.core.geometry.RegionMagnet",
        "title": "RegionMagnet > RegionMagnet > RegionMagnet",
        "section": "RegionMagnet > RegionMagnet",
        "text": "class ansys.motorcad.core.geometry.RegionMagnet(motorcad_instance=None)\n\nProvides the Python representation of a Motor-CAD magnet geometry region.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nRegionMagnet.add_entity(entity)\n\nAdd entity to list of region entities.\n\nRegionMagnet.add_point(point)\n\nAdd a new point into region on an existing Line/Arc.\n\nRegionMagnet.collides(regions)\n\nCheck whether any of the specified regions collide with self.\n\nRegionMagnet.edit_point(old_coordinates, ...)\n\nEdit a point in the region and update entities.\n\nRegionMagnet.find_entity_from_coordinates(...)\n\nSearch through region to find an entity with start and end coordinates.\n\nRegionMagnet.from_coordinate_list()\n\nWork in progress.\n\nRegionMagnet.insert_entity(index, entity)\n\nInsert entity to list of region entities at given index.\n\nRegionMagnet.insert_polyline(index, polyline)\n\nInsert polyline at given index, polyline can be made up of line/arc entities.\n\nRegionMagnet.is_closed()\n\nCheck whether region entities create a closed region.\n\nRegionMagnet.limit_arc_chord(max_chord_height)\n\nLimit the chord height for arcs in a region.\n\nRegionMagnet.mirror(mirror_line[, unique_name])\n\nMirror region along entity.\n\nRegionMagnet.remove_entity(entity_remove)\n\nRemove the entity from the region.\n\nRegionMagnet.replace(replacement_region)\n\nReplace self with another region.\n\nRegionMagnet.rotate(centre_point, angle)\n\nRotate Region around a point for a given angle.\n\nRegionMagnet.round_corner(corner_coordinate, ...)\n\nRound the corner of a region.\n\nRegionMagnet.round_corners(...)\n\nRound multiple corners of a region.\n\nRegionMagnet.subtract(region)\n\nSubtract region from self, returning any additional regions.\n\nRegionMagnet.translate(x, y)\n\nTranslate Region by specified x,y distances.\n\nRegionMagnet.unite(regions)\n\nUnite one or more other regions with self.\n\nRegionMagnet.update(region)\n\nUpdate class fields from another region.\n\n\n\nAttributes\n\n\n\n\n\n\n\nRegionMagnet.area\n\nGet the region area.\n\nRegionMagnet.br_multiplier\n\nBr multiplier.\n\nRegionMagnet.br_used\n\nBr used after applying Br multiplier.\n\nRegionMagnet.br_value\n\nBr value of magnet before Br multiplier applied.\n\nRegionMagnet.br_x\n\nX-axis component of br value.\n\nRegionMagnet.br_y\n\nY-axis component of the br value.\n\nRegionMagnet.centroid\n\nGet the region centroid.\n\nRegionMagnet.child_names\n\nGet child names list.\n\nRegionMagnet.children\n\nReturn list of child regions from Motor-CAD.\n\nRegionMagnet.colour\n\nGet or set region colour.\n\nRegionMagnet.duplications\n\nGet or set number of region duplications for the full machine.\n\nRegionMagnet.entities\n\nGet or set the list of entities in the region.\n\nRegionMagnet.lamination_type\n\nGet or set lamination type of region from Motor-CAD.\n\nRegionMagnet.linked_region\n\nGet or set linked duplication/unite region.\n\nRegionMagnet.magnet_angle\n\nAngle of the magnet in degrees.\n\nRegionMagnet.magnet_polarity\n\nPolarity of the magnet.\n\nRegionMagnet.material\n\nGet or set region material name.\n\nRegionMagnet.mesh_length\n\nGet or set the mesh length to use, or 0 for default.\n\nRegionMagnet.motorcad_instance\n\nGet or set the linked Motor-CAD instance.\n\nRegionMagnet.name\n\nGet or set region name.\n\nRegionMagnet.parent\n\nGet or set parent region from Motor-CAD.\n\nRegionMagnet.parent_name\n\nGet or set the region parent name.\n\nRegionMagnet.points\n\nGet points that exist in region.\n\nRegionMagnet.region_coordinate\n\nGet the reference coordinate within the region.\n\nRegionMagnet.region_type\n\nGet region type.\n\nRegionMagnet.singular\n\nGet or set if region is singular.\n\n"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_results",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_results.html#export_results",
        "title": "export_results",
        "section": "export_results",
        "text": "Export results from a solution to a CSV file.\nType of the solution. Options are 'EMagnetic' (E-Magnetic Solution),\n'Lab' (Lab Operating Point Solution), 'SteadyState' (Steady State\nThermal Solution), and 'Transient' (Transient Thermal Solution).\nAbsolute path for the CSV file. The default is the Windows\ndirectory on the C: drive. The file path must include the name\nof the file, with a CSV extension. Use the r'filepath'\nsyntax to force Python to ignore special characters.\nexport_results\npython:str\n'EMagnetic'\n'Lab'\n'SteadyState'\n'Transient'\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_results",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_results.html#ansys.motorcad.core.motorcad_methods.MotorCAD.export_results",
        "title": "export_results > export_results > export_results",
        "section": "export_results > export_results",
        "text": "MotorCAD.export_results(solution_type, file_path)\n\nExport results from a solution to a CSV file.\n\nParameters\n\nsolution_type\n\npython:str\n\nType of the solution. Options are 'EMagnetic' (E-Magnetic Solution),\n'Lab' (Lab Operating Point Solution), 'SteadyState' (Steady State\nThermal Solution), and 'Transient' (Transient Thermal Solution).\n\nfile_path\n\npython:str\n\nAbsolute path for the CSV file. The default is the Windows\ndirectory on the C: drive. The file path must include the name\nof the file, with a CSV extension. Use the r'filepath'\nsyntax to force Python to ignore special characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_temperature",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_temperature.html#get_node_temperature",
        "title": "get_node_temperature",
        "section": "get_node_temperature",
        "text": "Get the temperature of a thermal node.\nNumber of the thermal node.\nTemperature of the thermal node.\nget_node_temperature\npython:int\npython:float"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_temperature",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_temperature.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_temperature",
        "title": "get_node_temperature > get_node_temperature > get_node_temperature",
        "section": "get_node_temperature > get_node_temperature",
        "text": "MotorCAD.get_node_temperature(node_number)\n\nGet the temperature of a thermal node.\n\nParameters\n\nnode_number\n\npython:int\n\nNumber of the thermal node.\n\nReturns\n\npython:float\n\nTemperature of the thermal node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.append",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.append.html#append",
        "title": "append",
        "section": "append",
        "text": "Append object to the end of the list.\nappend"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.append",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.append.html#ansys.motorcad.core.geometry.EntityList.append",
        "title": "append > append > append",
        "section": "append > append",
        "text": "EntityList.append(object, /)\n\nAppend object to the end of the list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetArrayVariable_2d",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetArrayVariable_2d.html#setarrayvariable_2d",
        "title": "SetArrayVariable_2d",
        "section": "SetArrayVariable_2d",
        "text": "Deprecated function. Replaced by MotorCAD.set_array_variable_2d().\nSetArrayVariable_2d\nMotorCAD.set_array_variable_2d()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetArrayVariable_2d",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetArrayVariable_2d.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetArrayVariable_2d",
        "title": "SetArrayVariable_2d > SetArrayVariable_2d > SetArrayVariable_2d",
        "section": "SetArrayVariable_2d > SetArrayVariable_2d",
        "text": "MotorCADCompatibility.SetArrayVariable_2d(*args)\n\nDeprecated function. Replaced by MotorCAD.set_array_variable_2d().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_region_dxf",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_region_dxf.html#get_region_dxf",
        "title": "get_region_dxf",
        "section": "get_region_dxf",
        "text": "Get Motor-CAD dxf geometry region.\nName of the region.\nMotor-CAD region object.\nget_region_dxf\npython:str\nansys.motorcad.core.geometry.Region\nansys.motorcad.core.geometry.RegionMagnet"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_region_dxf",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_region_dxf.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_region_dxf",
        "title": "get_region_dxf > get_region_dxf > get_region_dxf",
        "section": "get_region_dxf > get_region_dxf",
        "text": "MotorCAD.get_region_dxf(name)\n\nGet Motor-CAD dxf geometry region.\n\nParameters\n\nname\n\npython:str\n\nName of the region.\n\nReturns\n\nansys.motorcad.core.geometry.Region or ansys.motorcad.core.geometry.RegionMagnet\n\nMotor-CAD region object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.br_value",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.br_value.html#br_value",
        "title": "br_value",
        "section": "br_value",
        "text": "Br value of magnet before Br multiplier applied.\nbr_value\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.br_value",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.br_value.html#ansys.motorcad.core.geometry.RegionMagnet.br_value",
        "title": "br_value > br_value > br_value",
        "section": "br_value > br_value",
        "text": "property RegionMagnet.br_value\n\nBr value of magnet before Br multiplier applied.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_iron_loss_coefficients",
        "href": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_iron_loss_coefficients.html#calculate_iron_loss_coefficients",
        "title": "calculate_iron_loss_coefficients",
        "section": "calculate_iron_loss_coefficients",
        "text": "Calculate and return the iron loss coefficients for the solid material.\nName of the solid material.\ncalculate_iron_loss_coefficients\npython:str"
    },
    {
        "objectID": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_iron_loss_coefficients",
        "href": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_iron_loss_coefficients.html#ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_iron_loss_coefficients",
        "title": "calculate_iron_loss_coefficients > calculate_iron_loss_coefficients > calculate_iron_loss_coefficients",
        "section": "calculate_iron_loss_coefficients > calculate_iron_loss_coefficients",
        "text": "MotorCAD.calculate_iron_loss_coefficients(material_name)\n\nCalculate and return the iron loss coefficients for the solid material.\n\nParameters\n\nmaterial_name\n\npython:str\n\nName of the solid material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveMotorCADScreenToFile",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveMotorCADScreenToFile.html#savemotorcadscreentofile",
        "title": "SaveMotorCADScreenToFile",
        "section": "SaveMotorCADScreenToFile",
        "text": "Deprecated function. Replaced by MotorCAD.save_motorcad_screen_to_file().\nSaveMotorCADScreenToFile\nMotorCAD.save_motorcad_screen_to_file()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveMotorCADScreenToFile",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveMotorCADScreenToFile.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveMotorCADScreenToFile",
        "title": "SaveMotorCADScreenToFile > SaveMotorCADScreenToFile > SaveMotorCADScreenToFile",
        "section": "SaveMotorCADScreenToFile > SaveMotorCADScreenToFile",
        "text": "MotorCADCompatibility.SaveMotorCADScreenToFile(*args)\n\nDeprecated function. Replaced by MotorCAD.save_motorcad_screen_to_file().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddLine_Boundary_XY",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddLine_Boundary_XY.html#addline_boundary_xy",
        "title": "AddLine_Boundary_XY",
        "section": "AddLine_Boundary_XY",
        "text": "Deprecated function. Replaced by MotorCAD.add_line_boundary_xy().\nAddLine_Boundary_XY\nMotorCAD.add_line_boundary_xy()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddLine_Boundary_XY",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddLine_Boundary_XY.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddLine_Boundary_XY",
        "title": "AddLine_Boundary_XY > AddLine_Boundary_XY > AddLine_Boundary_XY",
        "section": "AddLine_Boundary_XY > AddLine_Boundary_XY",
        "text": "MotorCADCompatibility.AddLine_Boundary_XY(*args)\n\nDeprecated function. Replaced by MotorCAD.add_line_boundary_xy().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetResistanceMultiplier",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetResistanceMultiplier.html#setresistancemultiplier",
        "title": "SetResistanceMultiplier",
        "section": "SetResistanceMultiplier",
        "text": "Deprecated function. Replaced by MotorCAD.set_resistance_multiplier().\nSetResistanceMultiplier\nMotorCAD.set_resistance_multiplier()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetResistanceMultiplier",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetResistanceMultiplier.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetResistanceMultiplier",
        "title": "SetResistanceMultiplier > SetResistanceMultiplier > SetResistanceMultiplier",
        "section": "SetResistanceMultiplier > SetResistanceMultiplier",
        "text": "MotorCADCompatibility.SetResistanceMultiplier(*args)\n\nDeprecated function. Replaced by MotorCAD.set_resistance_multiplier().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.remove_internal_custom_loss",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.remove_internal_custom_loss.html#remove_internal_custom_loss",
        "title": "remove_internal_custom_loss",
        "section": "remove_internal_custom_loss",
        "text": "Remove an internal custom loss by name.\nName of lab internal custom loss\nremove_internal_custom_loss\npython:str"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.remove_internal_custom_loss",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.remove_internal_custom_loss.html#ansys.motorcad.core.motorcad_methods.MotorCAD.remove_internal_custom_loss",
        "title": "remove_internal_custom_loss > remove_internal_custom_loss > remove_internal_custom_loss",
        "section": "remove_internal_custom_loss > remove_internal_custom_loss",
        "text": "MotorCAD.remove_internal_custom_loss(name)\n\nRemove an internal custom loss by name.\n\nParameters\n\nname\n\npython:str\n\nName of lab internal custom loss\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddLine_Boundary_RT",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddLine_Boundary_RT.html#addline_boundary_rt",
        "title": "AddLine_Boundary_RT",
        "section": "AddLine_Boundary_RT",
        "text": "Deprecated function. Replaced by MotorCAD.add_line_boundary_rt().\nAddLine_Boundary_RT\nMotorCAD.add_line_boundary_rt()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddLine_Boundary_RT",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddLine_Boundary_RT.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddLine_Boundary_RT",
        "title": "AddLine_Boundary_RT > AddLine_Boundary_RT > AddLine_Boundary_RT",
        "section": "AddLine_Boundary_RT > AddLine_Boundary_RT",
        "text": "MotorCADCompatibility.AddLine_Boundary_RT(*args)\n\nDeprecated function. Replaced by MotorCAD.add_line_boundary_rt().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateForceHarmonics_Temporal",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateForceHarmonics_Temporal.html#calculateforceharmonics_temporal",
        "title": "CalculateForceHarmonics_Temporal",
        "section": "CalculateForceHarmonics_Temporal",
        "text": "Deprecated function. Replaced by MotorCAD.calculate_force_harmonics_temporal().\nCalculateForceHarmonics_Temporal\nMotorCAD.calculate_force_harmonics_temporal()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateForceHarmonics_Temporal",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateForceHarmonics_Temporal.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateForceHarmonics_Temporal",
        "title": "CalculateForceHarmonics_Temporal > CalculateForceHarmonics_Temporal > CalculateForceHarmonics_Temporal",
        "section": "CalculateForceHarmonics_Temporal > CalculateForceHarmonics_Temporal",
        "text": "MotorCADCompatibility.CalculateForceHarmonics_Temporal()\n\nDeprecated function. Replaced by MotorCAD.calculate_force_harmonics_temporal().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_results",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_results.html#load_results",
        "title": "load_results",
        "section": "load_results",
        "text": "Load the output results from an \"EMagnetic\" or \"Thermal\" solution.\nThis method supports only \"EMagnetic\" or \"Thermal\" solution.\nSolution type, which must be \"EMagnetic\" or \"Thermal\".\nload_results\n\"EMagnetic\"\n\"Thermal\"\n\"EMagnetic\"\n\"Thermal\"\npython:str\n\"EMagnetic\"\n\"Thermal\""
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_results",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_results.html#ansys.motorcad.core.motorcad_methods.MotorCAD.load_results",
        "title": "load_results > load_results > load_results",
        "section": "load_results > load_results",
        "text": "MotorCAD.load_results(solution_type)\n\nLoad the output results from an \"EMagnetic\" or \"Thermal\" solution.\n\nThis method supports only \"EMagnetic\" or \"Thermal\" solution.\n\nParameters\n\nsolution_type\n\npython:str\n\nSolution type, which must be \"EMagnetic\" or \"Thermal\".\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_capacitance",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_capacitance.html#get_node_capacitance",
        "title": "get_node_capacitance",
        "section": "get_node_capacitance",
        "text": "Get the capacitance of a thermal node.\nNumber of the thermal node.\nCapacitance of the thermal node.\nget_node_capacitance\npython:int\npython:float"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_capacitance",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_capacitance.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_capacitance",
        "title": "get_node_capacitance > get_node_capacitance > get_node_capacitance",
        "section": "get_node_capacitance > get_node_capacitance",
        "text": "MotorCAD.get_node_capacitance(node_number)\n\nGet the capacitance of a thermal node.\n\nParameters\n\nnode_number\n\npython:int\n\nNumber of the thermal node.\n\nReturns\n\npython:float\n\nCapacitance of the thermal node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportSolidMaterial",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportSolidMaterial.html#exportsolidmaterial",
        "title": "ExportSolidMaterial",
        "section": "ExportSolidMaterial",
        "text": "Deprecated function. Replaced by MotorCAD.export_solid_material().\nExportSolidMaterial\nMotorCAD.export_solid_material()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportSolidMaterial",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportSolidMaterial.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportSolidMaterial",
        "title": "ExportSolidMaterial > ExportSolidMaterial > ExportSolidMaterial",
        "section": "ExportSolidMaterial > ExportSolidMaterial",
        "text": "MotorCADCompatibility.ExportSolidMaterial(*args)\n\nDeprecated function. Replaced by MotorCAD.export_solid_material().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#motor-cad-emag-twin-builder-ece",
        "title": "Motor-CAD EMag Twin Builder ECE",
        "section": "Motor-CAD EMag Twin Builder ECE",
        "text": "This example provides a Motor-CAD script for exporting\nan equivalent circuit extraction (ECE) model for permanent\nmagnet synchronous motors (PMSMs) from Motor-CAD to Ansys\nTwin Builder.\nThis example requires the use of a JSON configuration file. The ece_config.json file should\nbe saved to the same directory as this example Python script. You can download the\nece_config.json file from:\nhttps://github.com/ansys/pymotorcad/blob/main/examples/links/ece_config.json\nMotor-CAD EMag Twin Builder ECE\nece_config.json\nece_config.json"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#set-up-example",
        "title": "Motor-CAD EMag Twin Builder ECE > Set up example",
        "section": "Set up example",
        "text": "Setting up this example consists of performing imports, launching\nMotor-CAD, disabling all popup messages from Motor-CAD, and\nimporting the initial settings.\nSet up example"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#perform-required-imports",
        "title": "Motor-CAD EMag Twin Builder ECE > Perform required imports",
        "section": "Perform required imports",
        "text": "Import the required packages.\nPerform required imports"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#launch-motor-cad",
        "title": "Motor-CAD EMag Twin Builder ECE > Launch Motor-CAD",
        "section": "Launch Motor-CAD",
        "text": "Initialise automation and launch Motor-CAD.\nLaunch Motor-CAD"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#disable-popup-messages",
        "title": "Motor-CAD EMag Twin Builder ECE > Disable popup messages",
        "section": "Disable popup messages",
        "text": "Disable all popup messages from Motor-CAD.\nDisable popup messages"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#import-and-save-initial-settings",
        "title": "Motor-CAD EMag Twin Builder ECE > Import and save initial settings",
        "section": "Import and save initial settings",
        "text": "Define the read_parameters function to import initial settings from a JSON file and return a\ndictionary:\nSpecify the working directory. The Motor-CAD file and results are saved to a temporary folder.\nAlternatively, you can set the working directory to an appropriate file location on your computer.\nUse the read_parameters function to open the ece_config.json configuration file and import\nthe data as the in_data dictionary.\nThe JSON configuration file must be saved to the same directory as this Python script. The\nece_config.json file can be downloaded from the PyMotorCAD GitHub repository:\nhttps://github.com/ansys/pymotorcad/blob/main/examples/links/ece_config.json\nThe necessary data is extracted from the in_data dictionary. The JSON configuration file\ncontains:\nThe Motor-CAD MOT filename to be used for the ECE export. If the file exists in the same\ndirectory as this Python script, it will be copied to the working_folder location. If the\nfile does not exist in the same directory as this Python script or the working_folder\nlocation, the script opens the e8 Motor-CAD template by default.\nOperating parameters for the electric machine (shaft speed, DC bus voltage, temperature, maximum\ncurrent, current resolution and number of points per cycle for the torque calculation). If using\nan input file, the file in the working_folder will be modified by setting the operating\nparameter input settings.\nThe filenames to be used for the results files that are exported (map, text file and SML file).\nExported files are saved to the working directory, in a subfolder named Results.\nLoad the Motor-CAD file. If the mot_file specified in the JSON configuration file exists in\nthe same directory as this Python script, open the MOT file. If the file does not exist in the\nsame directory as this Python script, check the working_folder for the Motor-CAD file. The\nfile will be modified by setting the operating parameter input settings and saved to the\nworking_folder.\nIf the file does not exist in the same directory as this Python script or the working_folder,\nload the e8 IPM motor template and save the file to the working directory. Use the mot_file\nfilename that was taken from the JSON configuration file. Save input settings to a Motor-CAD MOT\nfile.\nImport and save initial settings\nread_parameters\nread_parameters\nece_config.json\nin_data\nece_config.json\nin_data\nworking_folder\nworking_folder\nworking_folder\nResults\nmot_file\nworking_folder\nworking_folder\nworking_folder\nmot_file"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#determine-alignment-angle",
        "title": "Motor-CAD EMag Twin Builder ECE > Determine alignment angle",
        "section": "Determine alignment angle",
        "text": "Determine alignment angle"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#set-up-calculation",
        "title": "Motor-CAD EMag Twin Builder ECE > Set up calculation",
        "section": "Set up calculation",
        "text": "Set up the Motor-CAD E-Magnetic calculation to run the open circuit back EMF calculation, so that\nthe drive offset angle can be determined. Define the calculation settings as taken from the JSON\nconfiguration file.\nSet the number of points per cycle for the torque calculation in Motor-CAD.\nSet the shaft speed for the calculation.\nSet the Line Current Definition option to Peak and set the peak current to zero.\nSet the DC bus voltage.\nSet the armature winding, magnet and shaft temperatures.\nSet the E-Magnetic <-> Thermal Coupling option to No Coupling.\nSelect the Back EMF and deselect the Cogging Torque open circuit calculations. Deselect\nthe On Load Torque and Torque Speed Curve calculations.\nSet up calculation"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#run-simulation",
        "title": "Motor-CAD EMag Twin Builder ECE > Run simulation",
        "section": "Run simulation",
        "text": "Run the Motor-CAD E-Magnetic open circuit back EMF calculation and obtain the results.\nSave the Motor-CAD file with the updated calculation settings and run the E-Magnetic calculation.\nUse a try statement to print an error message if the calculation is not successful.\nGet the graph results for flux linkage versus angle (in electric degrees) for the A phase.\nRun simulation\ntry"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#plot-results",
        "title": "Motor-CAD EMag Twin Builder ECE > Plot results",
        "section": "Plot results",
        "text": "Plot flux linkage in the A phase.\nPlot results"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#calculate-the-alignment-angle",
        "title": "Motor-CAD EMag Twin Builder ECE > Calculate the alignment angle",
        "section": "Calculate the alignment angle",
        "text": "Get the drive offset angle (the angle used to align the south pole axis of the rotor with the\nmagnetic axis of the first phase).\nCalculate the alignment angle from the drive_offset offset angle.\nThis correlation can be confirmed by the open circuit calculation results: the negative peak of\nthe flux linkage for the first phase is at 90 electric degrees, and the drive offset angle is 0.\nCalculate the alignment angle"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#calculate-the-number-of-rotor-positions",
        "title": "Motor-CAD EMag Twin Builder ECE > Calculate the number of rotor positions",
        "section": "Calculate the number of rotor positions",
        "text": "The number of rotor positions (or torque points per cycle) is calculated. The number of points\nis determined such that the look-up tables are generated starting from the alignment angle.\nGet the number of pole pairs, used to calculate the rotor positions.\nCalculate the number of rotor positions based on the alignment angle and a specified angular\ninterval (120 electric degrees). Only values for 120 electric degree intervals are used to\ngenerate the look-up tables. The minimum number of rotor positions is set to 30.\nCalculate the number of rotor positions"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#calculate-the-saturation-map",
        "title": "Motor-CAD EMag Twin Builder ECE > Calculate the saturation map",
        "section": "Calculate the saturation map",
        "text": "Use the Saturation and Loss Map Export tool in Motor-CAD to calculate and export the\nsaturation map.\nCalculate the saturation map"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#set-up-calculation",
        "title": "Motor-CAD EMag Twin Builder ECE > Set up calculation",
        "section": "Set up calculation",
        "text": "Get the phase resistance and end winding inductance output parameter values from Motor-CAD. These\nwill be used when generating the TXT and SML files for the ECE export.\nDefine the Motor-CAD calculation settings:\nSet the number of torque points per cycle (rotor positions)\nSet the filename and path for the saturation map to be exported to\nSet the calculation Input Definition to D/Q Axis Currents, Calculation Method to\nFEA Calculations, FEA Calculation Type to Full Cycle (default) and Results to\nVarying with rotor position.\nDo not export the loss map.\nSet the D Axis Current and Q Axis Current parameters (maximum, step size and minimum).\nSet up calculation"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#run-simulation",
        "title": "Motor-CAD EMag Twin Builder ECE > Run simulation",
        "section": "Run simulation",
        "text": "Save the Motor-CAD file with the updated calculation settings and run the Motor-CAD E-Magnetic\nsaturation map calculation. Use a try statement to print an error message if the calculation\nis not successful.\nRun simulation\ntry"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#load-the-saturation-map",
        "title": "Motor-CAD EMag Twin Builder ECE > Load the saturation map",
        "section": "Load the saturation map",
        "text": "Import the saturation map data that was calculated and exported from Motor-CAD as the\nmat_file_data dictionary.\nExtract data from the mat_file_data dictionary:\nThe D and Q peak current.\nThe flux linkages for D and Q axes and the 3 phases.\nThe rotor position.\nThe electromagnetic torque.\nThe phase advance.\nLoad the saturation map\nmat_file_data\nmat_file_data"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#generate-the-look-up-table",
        "title": "Motor-CAD EMag Twin Builder ECE > Generate the look-up table",
        "section": "Generate the look-up table",
        "text": "For each input current combination and rotor position, the D and Q axis flux linkages, the\nhomopolar component of the flux (approximated to zero) and the torque values are stored in the\nfinal_table numpy array (look-up table).\nGenerate the look-up table\nfinal_table"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#plot-results",
        "title": "Motor-CAD EMag Twin Builder ECE > Plot results",
        "section": "Plot results",
        "text": "Plot the D-Q flux.\nPlot the torque.\nPlot D-flux linkages versus the q-axis current.\nPlot Q-flux linkages versus the q-axis current.\nPlot results"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#write-txt-and-sml-files",
        "title": "Motor-CAD EMag Twin Builder ECE > Write TXT and SML files",
        "section": "Write TXT and SML files",
        "text": "To create the ECE model in Ansys Twin Builder, a SML file is generated from the exported Motor-CAD\ndata. A TXT file is also generated.\nWrite TXT and SML files"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#write-the-txt-text",
        "title": "Motor-CAD EMag Twin Builder ECE > Write the TXT text",
        "section": "Write the TXT text",
        "text": "Generate the TXT file, using the path and filename that was taken from the ece_config.json\nconfiguration file.\nWrite the number of poles to the TXT file.\nWrite the phase resistance and end winding inductances for each phase to the TXT file.\nWrite the D and Q axis current values to the TXT file.\nWrite the rotor positions to the TXT file.\nWrite the D and Q axis flux and torque values and then close the TXT file.\nWrite the TXT text\nece_config.json"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#write-the-sml-file",
        "title": "Motor-CAD EMag Twin Builder ECE > Write the SML file",
        "section": "Write the SML file",
        "text": "Generate the SML that will be loaded into Ansys Twin Builder to generate the ECE model. The SML\nfile uses the phase resistance and end winding inductance and data from the look-up table. The\nSML file is saved using the path and filename taken from the ece_config.json configuration\nfile.\nWrite the SML file\nece_config.json"
    },
    {
        "objectID": "examples/links/ece_export_for_twinbuilder",
        "href": "examples/links/ece_export_for_twinbuilder.html#generating-the-ece-component",
        "title": "Motor-CAD EMag Twin Builder ECE > Generating the ECE component",
        "section": "Generating the ECE component",
        "text": "To generate the component, within Ansys Electronics Desktop, go to the menu bar and select\nTools -> Project Tools -> Import Twin Builder Models. Select the SML file and click Open.\nClick OK in the Import Components window.\nA new project component ECE_e8_eMobility is added to\nComponent Libraries / Project Components. Drag the ECE component into the\nSchematic Capture window.\nRight-click on the ECE component and select Edit Symbol -> Edit Pin Locations… to open the\nPin Location Editor window. Rearrange the pins such that A0, B0, C0 and ROT2\nare on the left and X0, Y0, Z0 and ROT1 are on the right. Click OK to close\nthe window.\nTo open the Parameters tab, double-click on the ECE component. The phase resistance (ra0)\n(at the armature conductor temperature) and armature end winding inductance (la0) imported\nfrom the Motor-CAD model.\nFor more information on using the ECE component in Twin Builder, see the tutorial supplied with\nMotor-CAD (TwinBuilder_ECE_Tutorial).\nTotal running time of the script: (10 minutes 58.902 seconds)\nDownload Jupyter notebook: ece_export_for_twinbuilder.ipynb\nDownload Python source code: ece_export_for_twinbuilder.py\nDownload zipped: ece_export_for_twinbuilder.zip\nGallery generated by Sphinx-Gallery\nGenerating the ECE component\nDownload Jupyter notebook: ece_export_for_twinbuilder.ipynb\nDownload Python source code: ece_export_for_twinbuilder.py\nDownload zipped: ece_export_for_twinbuilder.zip"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.add_internal_custom_loss",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.add_internal_custom_loss.html#add_internal_custom_loss",
        "title": "add_internal_custom_loss",
        "section": "add_internal_custom_loss",
        "text": "Add an internal custom loss.\nName of lab internal custom loss\nFunction of lab internal custom loss\nType of lab internal custom loss. Options are Electrical or Mechanical\nThermal node of lab internal custom loss\nadd_internal_custom_loss\npython:str\npython:str\npython:str\nElectrical\nMechanical\npython:int"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.add_internal_custom_loss",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.add_internal_custom_loss.html#ansys.motorcad.core.motorcad_methods.MotorCAD.add_internal_custom_loss",
        "title": "add_internal_custom_loss > add_internal_custom_loss > add_internal_custom_loss",
        "section": "add_internal_custom_loss > add_internal_custom_loss",
        "text": "MotorCAD.add_internal_custom_loss(name, function, type, thermal_node)\n\nAdd an internal custom loss.\n\nParameters\n\nname\n\npython:str\n\nName of lab internal custom loss\n\nfunction\n\npython:str\n\nFunction of lab internal custom loss\n\ntype\n\npython:str\n\nType of lab internal custom loss. Options are Electrical or Mechanical\n\nthermal_node\n\npython:int\n\nThermal node of lab internal custom loss\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.rotate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.rotate.html#rotate",
        "title": "rotate",
        "section": "rotate",
        "text": "Rotate entity around a point for a given angle.\nCoordinate to rotate line around.\nAngle of rotation in degrees. Anticlockwise direction is positive.\nrotate\nCoordinate\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.rotate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.rotate.html#ansys.motorcad.core.geometry.Line.rotate",
        "title": "rotate > rotate > rotate",
        "section": "rotate > rotate",
        "text": "Line.rotate(centre_point, angle)\n\nRotate entity around a point for a given angle.\n\nParameters\n\ncentre_point\n\nCoordinate\n\nCoordinate to rotate line around.\n\nangle\n\npython:float\n\nAngle of rotation in degrees. Anticlockwise direction is positive.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.translate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.translate.html#translate",
        "title": "translate",
        "section": "translate",
        "text": "Translate Entity by specified x,y distances.\nx distance.\ny distance.\ntranslate\npython:float\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.translate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.translate.html#ansys.motorcad.core.geometry.Arc.translate",
        "title": "translate > translate > translate",
        "section": "translate > translate",
        "text": "Arc.translate(x, y)\n\nTranslate Entity by specified x,y distances.\n\nParameters\n\nx\n\npython:float\n\nx distance.\n\ny\n\npython:float\n\ny distance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_area_stator",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_area_stator.html#slot_area_stator",
        "title": "slot_area_stator",
        "section": "slot_area_stator",
        "text": "slot_area_stator"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_area_stator",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_area_stator.html#ansys.motorcad.core.geometry.RegionType.slot_area_stator",
        "title": "slot_area_stator > slot_area_stator > slot_area_stator",
        "section": "slot_area_stator > slot_area_stator",
        "text": "RegionType.slot_area_stator = 'Stator Slot Area'\n\n"
    },
    {
        "objectID": "examples/adaptive_library/OblongStatorDuct",
        "href": "examples/adaptive_library/OblongStatorDuct.html#oblong-stator-ducts-with-thermal-adjustment",
        "title": "Oblong stator ducts with thermal adjustment",
        "section": "Oblong stator ducts with thermal adjustment",
        "text": "This script applies the adaptive templates functionality to modify rectangular ducts\ninto oblong ducts. Further, the thermal effect of modified duct is taken into account by modifying\nthe area adjustment under housing water jacket in thermal module.\nOblong stator ducts with thermal adjustment"
    },
    {
        "objectID": "examples/adaptive_library/OblongStatorDuct",
        "href": "examples/adaptive_library/OblongStatorDuct.html#perform-required-imports",
        "title": "Oblong stator ducts with thermal adjustment > Perform required imports",
        "section": "Perform required imports",
        "text": "Import pymotorcad to access Motor-CAD.\nImport Arc, Line, Coordinate, rt_to_xy, xy_to_rt, math\nto define the adaptive template geometry.\nImport os, shutil, sys, and tempfile\nto open and save a temporary .mot file if none is open.\nPerform required imports\npymotorcad\nArc\nLine\nCoordinate\nrt_to_xy\nxy_to_rt\nmath\nos\nshutil\nsys\ntempfile"
    },
    {
        "objectID": "examples/adaptive_library/OblongStatorDuct",
        "href": "examples/adaptive_library/OblongStatorDuct.html#connect-to-motor-cad",
        "title": "Oblong stator ducts with thermal adjustment > Connect to Motor-CAD",
        "section": "Connect to Motor-CAD",
        "text": "If this script is loaded into the Adaptive Templates file in Motor-CAD, the current Motor-CAD\ninstance is used.\nIf the script is run externally, these actions occur: a new Motor-CAD instance is opened,\nthe e9 IPM motor template is loaded and set up with rectangular stator ducts, and the file is\nsaved to a temporary folder. To keep a new Motor-CAD instance open after executing the script, use\nthe MotorCAD(keep_instance_open=True) option when opening the new instance.\nAlternatively, use the MotorCAD() method, which closes the Motor-CAD instance after the\nscript is executed.\nConnect to Motor-CAD\nMotorCAD(keep_instance_open=True)\nMotorCAD()"
    },
    {
        "objectID": "examples/adaptive_library/OblongStatorDuct",
        "href": "examples/adaptive_library/OblongStatorDuct.html#define-necessary-functions",
        "title": "Oblong stator ducts with thermal adjustment > Define necessary functions",
        "section": "Define necessary functions",
        "text": "Define necessary functions"
    },
    {
        "objectID": "examples/adaptive_library/OblongStatorDuct",
        "href": "examples/adaptive_library/OblongStatorDuct.html#check-line-distance-from-origin",
        "title": "Oblong stator ducts with thermal adjustment > Check line distance from origin",
        "section": "Check line distance from origin",
        "text": "The rectangle consists of two lines of length equal to the rectangle width.\nOnly the top  and bottom lines requires modification.\nIt is necessary to check whether the line is closest to the origin. As this will affect the center\nof arcs needs to convert the lines. Index i is\nthe line under investigation. Index j is the adjacent line. If the radius of midpoint of line\ni is less than that of line j , line i is closer to the origin.\nCheck line distance from origin\ni\nj\ni\nj\ni"
    },
    {
        "objectID": "examples/adaptive_library/OblongStatorDuct",
        "href": "examples/adaptive_library/OblongStatorDuct.html#generate-arc-associated-with-oblong-duct",
        "title": "Oblong stator ducts with thermal adjustment > Generate arc associated with oblong duct",
        "section": "Generate arc associated with oblong duct",
        "text": "Two separate functions are needed depending  on full duct or half duct (due to symmetry) is\npresent under Geometry Editor\nGenerate arc associated with oblong duct"
    },
    {
        "objectID": "examples/adaptive_library/OblongStatorDuct",
        "href": "examples/adaptive_library/OblongStatorDuct.html#get-required-parameters-and-objects",
        "title": "Oblong stator ducts with thermal adjustment > Get required parameters and objects",
        "section": "Get required parameters and objects",
        "text": "From Motor-CAD, get the adaptive parameters and their values.\nUse the set_adaptive_parameter_default() method to set the required Duct Arc Height\nparameter if undefined.\nSet required parameters for the oblong: height of arc Duct Arc Height, duct width and duct\nheight.\nGet the standard template stator region. This can be drawn for debugging if required.\nGet required parameters and objects\nset_adaptive_parameter_default()\nDuct Arc Height\nDuct Arc Height"
    },
    {
        "objectID": "examples/adaptive_library/OblongStatorDuct",
        "href": "examples/adaptive_library/OblongStatorDuct.html#create-the-adaptive-templates-geometry",
        "title": "Oblong stator ducts with thermal adjustment > Create the Adaptive Templates geometry",
        "section": "Create the Adaptive Templates geometry",
        "text": "For each child region of the stator region:\nCheck whether the region is a stator duct.\nFind the top and bottom lines that makes up the duct.\nModify the lines with respective arcs.\nSet the region in Motor-CAD.\nThe script accounts for whether ducts are full ducts or half ducts (the case when a duct spans the\nrotor pole boundary)\nCreate the Adaptive Templates geometry"
    },
    {
        "objectID": "examples/adaptive_library/OblongStatorDuct",
        "href": "examples/adaptive_library/OblongStatorDuct.html#apply-surface-area-correction-in-motor-cad-thermal",
        "title": "Oblong stator ducts with thermal adjustment > Apply surface area correction in Motor-CAD Thermal",
        "section": "Apply surface area correction in Motor-CAD Thermal",
        "text": "The oblong stator ducts can be used in the Motor-CAD Thermal model as channels for water jacket\ncooling. The Housing Water Jacket cooling model in Motor-CAD can be set up to use stator duct\nchannels when a housing type without channels is selected in the Geometry tab.\nAs of Motor-CAD v2024R2, the Housing Water Jacket calculations will use duct areas from the\nMotor-CAD Standard Template geometry - not the custom Adaptive Templates geometry. For example,\nwhen the stator duct geometry has been updated from rectangular to oblong shapes, the duct area\nhas increased. For this example, the area increases from 6 mm2 to 8.038522. This\ncan be seen in the Geometry -> Editor -> Geometry tab, or by using the area method for the\nduct region.\nTo account for this in the Housing Water Jacket cooling model, you can apply a cross section\narea adjustment. By default, this is set to 0. To see this in the Motor-CAD interface, go to the\nInput Data -> Housing Water Jacket -> Fluid FLow tab in the Thermal context.\nThe appropriate area adjustment is calculated and applied within the Adaptive Templates script.\nTo calculate the area adjustment, get the area of the stator duct regions using the area\nmethod. For the case where there are two half-ducts, it is necessary to get the area for all duct\nregions and to calculate the sum of the areas.\nThe area of the original rectangular duct was already calculated earlier (duct_area). The area\nadjustment is calculated by subtracting the rectangular duct area from the oblong duct area.\nSet the area adjustment value in Motor-CAD.\nThe area adjustment is applied by the Adaptive Templates script and is updated any time the\ngeometry is changed.\nApply surface area correction in Motor-CAD Thermal\narea\narea\nduct_area"
    },
    {
        "objectID": "examples/adaptive_library/OblongStatorDuct",
        "href": "examples/adaptive_library/OblongStatorDuct.html#load-in-adaptive-templates-script-if-required",
        "title": "Oblong stator ducts with thermal adjustment > Load in Adaptive Templates script if required",
        "section": "Load in Adaptive Templates script if required",
        "text": "When this script is run externally, the script executes the following:\nSet Geometry type to Adaptive.\nLoad the script into the Adaptive Templates tab.\nGo to the Geometry -> Radial tab to run the Adaptive Templates script and display the new\ngeometry.\nWhen running in a Jupyter Notebook, you must provide the path for the Adaptive Templates script\n(PY file) instead of sys.argv[0] when using the load_adaptive_script() method.\nTotal running time of the script: (0 minutes 31.672 seconds)\nDownload Jupyter notebook: OblongStatorDuct.ipynb\nDownload Python source code: OblongStatorDuct.py\nDownload zipped: OblongStatorDuct.zip\nGallery generated by Sphinx-Gallery\nLoad in Adaptive Templates script if required\nsys.argv[0]\nload_adaptive_script()\nDownload Jupyter notebook: OblongStatorDuct.ipynb\nDownload Python source code: OblongStatorDuct.py\nDownload zipped: OblongStatorDuct.zip"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.index",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.index.html#index",
        "title": "index",
        "section": "index",
        "text": "Return first index of value.\nRaises ValueError if the value is not present.\nindex"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.index",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.index.html#ansys.motorcad.core.geometry.EntityList.index",
        "title": "index > index > index",
        "section": "index > index",
        "text": "EntityList.index(value, start=0, stop=sys.maxsize, /)\n\nReturn first index of value.\n\nRaises ValueError if the value is not present.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SolveProblem",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SolveProblem.html#solveproblem",
        "title": "SolveProblem",
        "section": "SolveProblem",
        "text": "Deprecated function.\nSolveProblem"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SolveProblem",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SolveProblem.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SolveProblem",
        "title": "SolveProblem > SolveProblem > SolveProblem",
        "section": "SolveProblem > SolveProblem",
        "text": "MotorCADCompatibility.SolveProblem()\n\nDeprecated function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadMagnetisationCurves",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadMagnetisationCurves.html#loadmagnetisationcurves",
        "title": "LoadMagnetisationCurves",
        "section": "LoadMagnetisationCurves",
        "text": "Deprecated function. Replaced by MotorCAD.load_magnetisation_curves().\nLoadMagnetisationCurves\nMotorCAD.load_magnetisation_curves()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadMagnetisationCurves",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadMagnetisationCurves.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadMagnetisationCurves",
        "title": "LoadMagnetisationCurves > LoadMagnetisationCurves > LoadMagnetisationCurves",
        "section": "LoadMagnetisationCurves > LoadMagnetisationCurves",
        "text": "MotorCADCompatibility.LoadMagnetisationCurves(*args)\n\nDeprecated function. Replaced by MotorCAD.load_magnetisation_curves().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_weight_calculation",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_weight_calculation.html#do_weight_calculation",
        "title": "do_weight_calculation",
        "section": "do_weight_calculation",
        "text": "Run the Motor-CAD weight calculation.\ndo_weight_calculation"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_weight_calculation",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_weight_calculation.html#ansys.motorcad.core.motorcad_methods.MotorCAD.do_weight_calculation",
        "title": "do_weight_calculation > do_weight_calculation > do_weight_calculation",
        "section": "do_weight_calculation > do_weight_calculation",
        "text": "MotorCAD.do_weight_calculation()\n\nRun the Motor-CAD weight calculation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.get_force_frequency_domain_amplitude",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.get_force_frequency_domain_amplitude.html#get_force_frequency_domain_amplitude",
        "title": "get_force_frequency_domain_amplitude",
        "section": "get_force_frequency_domain_amplitude",
        "text": "Export the matrix value from a force space time harmonics matrix for a 2D FFT.\nRow index of the FFT matrix.\nColumn index of the FFT matrix.\nget_force_frequency_domain_amplitude\npython:int\npython:int\npython:int"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.get_force_frequency_domain_amplitude",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.get_force_frequency_domain_amplitude.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_force_frequency_domain_amplitude",
        "title": "get_force_frequency_domain_amplitude > get_force_frequency_domain_amplitude > get_force_frequency_domain_amplitude",
        "section": "get_force_frequency_domain_amplitude > get_force_frequency_domain_amplitude",
        "text": "MotorCAD.get_force_frequency_domain_amplitude(row, column, load_point)\n\nExport the matrix value from a force space time harmonics matrix for a 2D FFT.\n\nParameters\n\nrow\n\npython:int\n\nRow index of the FFT matrix.\n\ncolumn\n\npython:int\n\nColumn index of the FFT matrix.\n\nload_point\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_to_ansys_discovery",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_to_ansys_discovery.html#export_to_ansys_discovery",
        "title": "export_to_ansys_discovery",
        "section": "export_to_ansys_discovery",
        "text": "Export the model to a Python script file that can be run in Ansys Discovery.\nAbsolute filepath for the Python script file. The default\nfilepath is the Windows directory on the C: drive. The\nfilepath must include the name of the file. The extension\ndoes not need to be specified. Use the r'filepath'\nsyntax to force Python to ignore special characters.\nexport_to_ansys_discovery\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_to_ansys_discovery",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_to_ansys_discovery.html#ansys.motorcad.core.motorcad_methods.MotorCAD.export_to_ansys_discovery",
        "title": "export_to_ansys_discovery > export_to_ansys_discovery > export_to_ansys_discovery",
        "section": "export_to_ansys_discovery > export_to_ansys_discovery",
        "text": "MotorCAD.export_to_ansys_discovery(file_path)\n\nExport the model to a Python script file that can be run in Ansys Discovery.\n\nParameters\n\nfile_path\n\npython:str\n\nAbsolute filepath for the Python script file. The default\nfilepath is the Windows directory on the C: drive. The\nfilepath must include the name of the file. The extension\ndoes not need to be specified. Use the r'filepath'\nsyntax to force Python to ignore special characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_duct",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_duct.html#rotor_duct",
        "title": "rotor_duct",
        "section": "rotor_duct",
        "text": "rotor_duct"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_duct",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_duct.html#ansys.motorcad.core.geometry.RegionType.rotor_duct",
        "title": "rotor_duct > rotor_duct > rotor_duct",
        "section": "rotor_duct > rotor_duct",
        "text": "RegionType.rotor_duct = 'Rotor Duct'\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetWindingCoil",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetWindingCoil.html#setwindingcoil",
        "title": "SetWindingCoil",
        "section": "SetWindingCoil",
        "text": "Deprecated function. Replaced by MotorCAD.set_winding_coil().\nSetWindingCoil\nMotorCAD.set_winding_coil()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetWindingCoil",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetWindingCoil.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetWindingCoil",
        "title": "SetWindingCoil > SetWindingCoil > SetWindingCoil",
        "section": "SetWindingCoil > SetWindingCoil",
        "text": "MotorCADCompatibility.SetWindingCoil(*args)\n\nDeprecated function. Replaced by MotorCAD.set_winding_coil().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_fea_path_arc",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_fea_path_arc.html#set_fea_path_arc",
        "title": "set_fea_path_arc",
        "section": "set_fea_path_arc",
        "text": "Add or edit an arc in the path editor.\nset_fea_path_arc"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_fea_path_arc",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_fea_path_arc.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_fea_path_arc",
        "title": "set_fea_path_arc > set_fea_path_arc > set_fea_path_arc",
        "section": "set_fea_path_arc > set_fea_path_arc",
        "text": "MotorCAD.set_fea_path_arc(path_name, path_location, r, theta_start, theta_end, points, fea_method, calculation, expression)\n\nAdd or edit an arc in the path editor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.axle",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.axle.html#axle",
        "title": "axle",
        "section": "axle",
        "text": "axle"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.axle",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.axle.html#ansys.motorcad.core.geometry.RegionType.axle",
        "title": "axle > axle > axle",
        "section": "axle > axle",
        "text": "RegionType.axle = 'Axle'\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.from_coordinate_list",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.from_coordinate_list.html#from_coordinate_list",
        "title": "from_coordinate_list",
        "section": "from_coordinate_list",
        "text": "Work in progress. Need to split up geometry first to avoid circular imports.\nUse geometry_fitting.return_entity_list for now\nfrom_coordinate_list"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.from_coordinate_list",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.from_coordinate_list.html#ansys.motorcad.core.geometry.Region.from_coordinate_list",
        "title": "from_coordinate_list > from_coordinate_list > from_coordinate_list",
        "section": "from_coordinate_list > from_coordinate_list",
        "text": "classmethod Region.from_coordinate_list()\n\nWork in progress. Need to split up geometry first to avoid circular imports.\n\nUse geometry_fitting.return_entity_list for now\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autogen_Thermal",
        "href": "methods/_autogen_Thermal.html#thermal",
        "title": "Thermal",
        "section": "Thermal",
        "text": "clear_external_circuit()\nClear the external circuit.\nclear_fixed_temperature_value(node1)\nRemove a fixed temperature from a node.\ncreate_new_node(name, node1, row, column, ...)\nCreate a node.\nget_node_capacitance(node_number)\nGet the capacitance of a thermal node.\nget_node_exists(node_number)\nCheck if a node exists.\nget_node_power(node_number)\nGet the power of a thermal node.\nget_node_temperature(node_number)\nGet the temperature of a thermal node.\nget_node_to_node_resistance(node1, node2)\nGet the node-to-node resistance.\nget_offset_node_number(node_number, ...)\nGet the offset node number.\nload_external_circuit(circuit_file_name)\nLoad an external circuit from a file.\nmodify_node(name, node1, row, column, ...)\nModify an existing node.\nremove_external_component(component_type, ...)\nRemove an external circuit component.\nsave_external_circuit(circuit_file_name)\nSave the external circuit to a file.\nsave_transient_power_values(file_name)\nSave transient power results to a text file.\nsave_transient_temperatures(file_name)\nSave transient temperature results to a text file.\nset_capacitance_value(name, node1, value, ...)\nSet or create a capacitance.\nset_fixed_temperature_value(name, node1, ...)\nSet or create a fixed temperature on a node.\nset_power_injection_value(name, node1, ...)\nSet or create a power injection.\nset_power_source_value(name, node1, value, ...)\nSet or create a power source.\nset_resistance_multiplier(name, node1, ...)\nSet or create a resistance multiplication factor.\nset_resistance_value(name, node1, node2, ...)\nSet or create a resistance.\nThermal\nclear_external_circuit\nclear_fixed_temperature_value\ncreate_new_node\nget_node_capacitance\nget_node_exists\nget_node_power\nget_node_temperature\nget_node_to_node_resistance\nget_offset_node_number\nload_external_circuit\nmodify_node\nremove_external_component\nsave_external_circuit\nsave_transient_power_values\nsave_transient_temperatures\nset_capacitance_value\nset_fixed_temperature_value\nset_power_injection_value\nset_power_source_value\nset_resistance_multiplier\nset_resistance_value"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.add_point",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.add_point.html#add_point",
        "title": "add_point",
        "section": "add_point",
        "text": "Add a new point into region on an existing Line/Arc.\nThe point must already exist on a Line/Arc belonging to the region. The entity will be split\nand 2 new entities created.\nCoordinate at which to add new point\nadd_point\nCoordinate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.add_point",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.add_point.html#ansys.motorcad.core.geometry.RegionMagnet.add_point",
        "title": "add_point > add_point > add_point",
        "section": "add_point > add_point",
        "text": "RegionMagnet.add_point(point)\n\nAdd a new point into region on an existing Line/Arc.\n\nThe point must already exist on a Line/Arc belonging to the region. The entity will be split\nand 2 new entities created.\n\nParameters\n\npoint\n\nCoordinate\n\nCoordinate at which to add new point\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.get_model_built_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.get_model_built_lab.html#get_model_built_lab",
        "title": "get_model_built_lab",
        "section": "get_model_built_lab",
        "text": "Test if the Lab model must be built or rebuilt before running calculations.\nTrue if the Lab model has been built and is valid for the current settings,\nFalse otherwise.\nget_model_built_lab\nTrue\nFalse"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.get_model_built_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.get_model_built_lab.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_model_built_lab",
        "title": "get_model_built_lab > get_model_built_lab > get_model_built_lab",
        "section": "get_model_built_lab > get_model_built_lab",
        "text": "MotorCAD.get_model_built_lab()\n\nTest if the Lab model must be built or rebuilt before running calculations.\n\nReturns\n\nbool\n\nTrue if the Lab model has been built and is valid for the current settings,\nFalse otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.mirror",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.mirror.html#mirror",
        "title": "mirror",
        "section": "mirror",
        "text": "Mirror line about a line.\nLine entity to mirror Line about\nmirror\nansys.motorcad.core.geometry.Line\nansys.motorcad.core.geometry.Line"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.mirror",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.mirror.html#ansys.motorcad.core.geometry.Line.mirror",
        "title": "mirror > mirror > mirror",
        "section": "mirror > mirror",
        "text": "Line.mirror(mirror_line)\n\nMirror line about a line.\n\nParameters\n\nmirror_line\n\nansys.motorcad.core.geometry.Line\n\nLine entity to mirror Line about\n\nReturns\n\nansys.motorcad.core.geometry.Line\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.wedge_rotor",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.wedge_rotor.html#wedge_rotor",
        "title": "wedge_rotor",
        "section": "wedge_rotor",
        "text": "wedge_rotor"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.wedge_rotor",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.wedge_rotor.html#ansys.motorcad.core.geometry.RegionType.wedge_rotor",
        "title": "wedge_rotor > wedge_rotor > wedge_rotor",
        "section": "wedge_rotor > wedge_rotor",
        "text": "RegionType.wedge_rotor = 'Rotor Wedge'\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.IsStopRequested",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.IsStopRequested.html#isstoprequested",
        "title": "IsStopRequested",
        "section": "IsStopRequested",
        "text": "Deprecated function.\nIsStopRequested"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.IsStopRequested",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.IsStopRequested.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.IsStopRequested",
        "title": "IsStopRequested > IsStopRequested > IsStopRequested",
        "section": "IsStopRequested > IsStopRequested",
        "text": "MotorCADCompatibility.IsStopRequested()\n\nDeprecated function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.total_angle",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.total_angle.html#total_angle",
        "title": "total_angle",
        "section": "total_angle",
        "text": "Get arc sweep angle.\ntotal_angle\nreal"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.total_angle",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.total_angle.html#ansys.motorcad.core.geometry.Arc.total_angle",
        "title": "total_angle > total_angle > total_angle",
        "section": "total_angle > total_angle",
        "text": "property Arc.total_angle\n\nGet arc sweep angle.\n\nReturns\n\nreal\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoMechanicalCalculation",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoMechanicalCalculation.html#domechanicalcalculation",
        "title": "DoMechanicalCalculation",
        "section": "DoMechanicalCalculation",
        "text": "Deprecated function. Replaced by MotorCAD.do_mechanical_calculation().\nDoMechanicalCalculation\nMotorCAD.do_mechanical_calculation()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoMechanicalCalculation",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoMechanicalCalculation.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoMechanicalCalculation",
        "title": "DoMechanicalCalculation > DoMechanicalCalculation > DoMechanicalCalculation",
        "section": "DoMechanicalCalculation > DoMechanicalCalculation",
        "text": "MotorCADCompatibility.DoMechanicalCalculation()\n\nDeprecated function. Replaced by MotorCAD.do_mechanical_calculation().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.impreg_gap",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.impreg_gap.html#impreg_gap",
        "title": "impreg_gap",
        "section": "impreg_gap",
        "text": "impreg_gap"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.impreg_gap",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.impreg_gap.html#ansys.motorcad.core.geometry.RegionType.impreg_gap",
        "title": "impreg_gap > impreg_gap > impreg_gap",
        "section": "impreg_gap > impreg_gap",
        "text": "RegionType.impreg_gap = 'Impreg Gap'\n\n"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_magnetisation_curves",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_magnetisation_curves.html#load_magnetisation_curves",
        "title": "load_magnetisation_curves",
        "section": "load_magnetisation_curves",
        "text": "Load the magnetization curves from a text file.\nThis method is for switched reluctance machines (SRMs) only.\nFull path to the text file, including the file name. Use the r'filepath'\nsyntax to force Python to ignore special characters.\nload_magnetisation_curves\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_magnetisation_curves",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_magnetisation_curves.html#ansys.motorcad.core.motorcad_methods.MotorCAD.load_magnetisation_curves",
        "title": "load_magnetisation_curves > load_magnetisation_curves > load_magnetisation_curves",
        "section": "load_magnetisation_curves > load_magnetisation_curves",
        "text": "MotorCAD.load_magnetisation_curves(file_path)\n\nLoad the magnetization curves from a text file.\n\nThis method is for switched reluctance machines (SRMs) only.\n\nParameters\n\nfile_path\n\npython:str\n\nFull path to the text file, including the file name. Use the r'filepath'\nsyntax to force Python to ignore special characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_point_value",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_point_value.html#get_point_value",
        "title": "get_point_value",
        "section": "get_point_value",
        "text": "Get a point value from the Motor-CAD FEA.\nMotor-CAD shading function.\nValue for the x coordinate.\nValue for the y coordinate.\nValue from the FEA.\nUnits for parameter, which is the Motor-CAD shading function.\nget_point_value\npython:float\npython:float\npython:float\npython:str\nparameter"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_point_value",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.get_point_value.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_point_value",
        "title": "get_point_value > get_point_value > get_point_value",
        "section": "get_point_value > get_point_value",
        "text": "MotorCAD.get_point_value(parameter, x, y)\n\nGet a point value from the Motor-CAD FEA.\n\nParameters\n\nparameter\n\nstr|int\n\nMotor-CAD shading function.\n\nx\n\npython:float\n\nValue for the x coordinate.\n\ny\n\npython:float\n\nValue for the y coordinate.\n\nReturns\n\nvalue\n\npython:float\n\nValue from the FEA.\n\nunits\n\npython:str\n\nUnits for parameter, which is the Motor-CAD shading function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.from_coordinate_list",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.from_coordinate_list.html#from_coordinate_list",
        "title": "from_coordinate_list",
        "section": "from_coordinate_list",
        "text": "Work in progress. Need to split up geometry first to avoid circular imports.\nUse geometry_fitting.return_entity_list for now\nfrom_coordinate_list"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.from_coordinate_list",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.from_coordinate_list.html#ansys.motorcad.core.geometry.RegionMagnet.from_coordinate_list",
        "title": "from_coordinate_list > from_coordinate_list > from_coordinate_list",
        "section": "from_coordinate_list > from_coordinate_list",
        "text": "classmethod RegionMagnet.from_coordinate_list()\n\nWork in progress. Need to split up geometry first to avoid circular imports.\n\nUse geometry_fitting.return_entity_list for now\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_shapes/ansys.motorcad.core.geometry_shapes.square",
        "href": "methods/_autosummary_geometry_shapes/ansys.motorcad.core.geometry_shapes.square.html#square",
        "title": "square",
        "section": "square",
        "text": "Create a square of given width at a given set of coordinates.\nWidth value.\nRadial coordinate of the square centre.\nAngular coordinate of the square centre.\nRegion type with four Line entity types.\nsquare\npython:float\npython:float\npython:float\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_geometry_shapes/ansys.motorcad.core.geometry_shapes.square",
        "href": "methods/_autosummary_geometry_shapes/ansys.motorcad.core.geometry_shapes.square.html#ansys.motorcad.core.geometry_shapes.square",
        "title": "square > square > square",
        "section": "square > square",
        "text": "ansys.motorcad.core.geometry_shapes.square(width, r_O, th_O)\n\nCreate a square of given width at a given set of coordinates.\n\nParameters\n\nwidth\n\npython:float\n\nWidth value.\n\nr_O\n\npython:float\n\nRadial coordinate of the square centre.\n\nth_O\n\npython:float\n\nAngular coordinate of the square centre.\n\nReturns\n\nthis_square\n\nansys.motorcad.core.geometry.Region\n\nRegion type with four Line entity types.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_MotorCAD_errors/ansys.motorcad.core.rpc_client_core.MotorCADError",
        "href": "methods/_autosummary_MotorCAD_errors/ansys.motorcad.core.rpc_client_core.MotorCADError.html#motorcaderror",
        "title": "MotorCADError",
        "section": "MotorCADError",
        "text": "Provides the errors to display when issues are raised by the Motor-CAD executable file.\nMotorCADError"
    },
    {
        "objectID": "methods/_autosummary_MotorCAD_errors/ansys.motorcad.core.rpc_client_core.MotorCADError",
        "href": "methods/_autosummary_MotorCAD_errors/ansys.motorcad.core.rpc_client_core.MotorCADError.html#ansys.motorcad.core.rpc_client_core.MotorCADError",
        "title": "MotorCADError > MotorCADError > MotorCADError",
        "section": "MotorCADError > MotorCADError",
        "text": "exception ansys.motorcad.core.rpc_client_core.MotorCADError\n\nProvides the errors to display when issues are raised by the Motor-CAD executable file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveDutyCycle",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveDutyCycle.html#savedutycycle",
        "title": "SaveDutyCycle",
        "section": "SaveDutyCycle",
        "text": "Deprecated function. Replaced by MotorCAD.save_duty_cycle().\nSaveDutyCycle\nMotorCAD.save_duty_cycle()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveDutyCycle",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveDutyCycle.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveDutyCycle",
        "title": "SaveDutyCycle > SaveDutyCycle > SaveDutyCycle",
        "section": "SaveDutyCycle > SaveDutyCycle",
        "text": "MotorCADCompatibility.SaveDutyCycle(*args)\n\nDeprecated function. Replaced by MotorCAD.save_duty_cycle().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.pop",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.pop.html#pop",
        "title": "pop",
        "section": "pop",
        "text": "Remove and return item at index (default last).\nRaises IndexError if list is empty or index is out of range.\npop"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.pop",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.pop.html#ansys.motorcad.core.geometry.EntityList.pop",
        "title": "pop > pop > pop",
        "section": "pop > pop",
        "text": "EntityList.pop(index=-1, /)\n\nRemove and return item at index (default last).\n\nRaises IndexError if list is empty or index is out of range.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetWindingCoil",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetWindingCoil.html#getwindingcoil",
        "title": "GetWindingCoil",
        "section": "GetWindingCoil",
        "text": "Deprecated function. Replaced by MotorCAD.get_winding_coil().\nGetWindingCoil\nMotorCAD.get_winding_coil()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetWindingCoil",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetWindingCoil.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetWindingCoil",
        "title": "GetWindingCoil > GetWindingCoil > GetWindingCoil",
        "section": "GetWindingCoil > GetWindingCoil",
        "text": "MotorCADCompatibility.GetWindingCoil(*args)\n\nDeprecated function. Replaced by MotorCAD.get_winding_coil().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFixedTemperatureValue",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFixedTemperatureValue.html#setfixedtemperaturevalue",
        "title": "SetFixedTemperatureValue",
        "section": "SetFixedTemperatureValue",
        "text": "Deprecated function. Replaced by MotorCAD.set_fixed_temperature_value().\nSetFixedTemperatureValue\nMotorCAD.set_fixed_temperature_value()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFixedTemperatureValue",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFixedTemperatureValue.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFixedTemperatureValue",
        "title": "SetFixedTemperatureValue > SetFixedTemperatureValue > SetFixedTemperatureValue",
        "section": "SetFixedTemperatureValue > SetFixedTemperatureValue",
        "text": "MotorCADCompatibility.SetFixedTemperatureValue(*args)\n\nDeprecated function. Replaced by MotorCAD.set_fixed_temperature_value().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_xy",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_xy.html#add_arc_xy",
        "title": "add_arc_xy",
        "section": "add_arc_xy",
        "text": "Add an arc to the Motor-CAD axial geometry with an x, y coordinate system.\nThis method uses the center point, radius, and angles. Use degrees for angles.\nDeprecated since version 0.6.0: add_arc_xy will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\nCenter position for the x coordinate.\nCenter position for the x coordinate.\nAngular coordinate of the arc start point in degrees.\nAngular coordinate of the arc end point in degrees.\nRadius of the arc from the center point.\nadd_arc_xy\npython:float\npython:float\npython:float\npython:float\npython:float"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_xy",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_xy.html#ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_xy",
        "title": "add_arc_xy > add_arc_xy > add_arc_xy",
        "section": "add_arc_xy > add_arc_xy",
        "text": "MotorCAD.add_arc_xy(x_centre, y_centre, theta_start, theta_end, radius)\n\nAdd an arc to the Motor-CAD axial geometry with an x, y coordinate system.\n\nThis method uses the center point, radius, and angles. Use degrees for angles.\n\nDeprecated since version 0.6.0: add_arc_xy will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\nParameters\n\nx_centre\n\npython:float\n\nCenter position for the x coordinate.\n\ny_centre\n\npython:float\n\nCenter position for the x coordinate.\n\ntheta_start\n\npython:float\n\nAngular coordinate of the arc start point in degrees.\n\ntheta_end\n\npython:float\n\nAngular coordinate of the arc end point in degrees.\n\nradius\n\npython:float\n\nRadius of the arc from the center point.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.coordinate_within_arc_radius",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.coordinate_within_arc_radius.html#coordinate_within_arc_radius",
        "title": "coordinate_within_arc_radius",
        "section": "coordinate_within_arc_radius",
        "text": "Check if coordinate exists within arc radius.\nCheck if this coordinate is on the Arc\ncoordinate_within_arc_radius\nCoordinate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.coordinate_within_arc_radius",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.coordinate_within_arc_radius.html#ansys.motorcad.core.geometry.Arc.coordinate_within_arc_radius",
        "title": "coordinate_within_arc_radius > coordinate_within_arc_radius > coordinate_within_arc_radius",
        "section": "coordinate_within_arc_radius > coordinate_within_arc_radius",
        "text": "Arc.coordinate_within_arc_radius(coordinate)\n\nCheck if coordinate exists within arc radius.\n\nParameters\n\ncoordinate\n\nCoordinate\n\nCheck if this coordinate is on the Arc\n\nReturns\n\n\n\n——-\n\n\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_region_rt",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_region_rt.html#add_region_rt",
        "title": "add_region_rt",
        "section": "add_region_rt",
        "text": "Add a region to the Motor-CAD geometry with an r, t (polar) coordinate system.\nIf a region already exists, this method overwrites the existing region.\nUse degrees for angles.\nDeprecated since version 0.6.0: add_region_rt will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\nRegion position for the radial coordinate.\nRegion position for the angular coordinate in degrees.\nName of the region.\nadd_region_rt\npython:float\npython:float\npython:str"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_region_rt",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_region_rt.html#ansys.motorcad.core.motorcad_methods.MotorCAD.add_region_rt",
        "title": "add_region_rt > add_region_rt > add_region_rt",
        "section": "add_region_rt > add_region_rt",
        "text": "MotorCAD.add_region_rt(radius, theta, region_name)\n\nAdd a region to the Motor-CAD geometry with an r, t (polar) coordinate system.\n\nIf a region already exists, this method overwrites the existing region.\n\nUse degrees for angles.\n\nDeprecated since version 0.6.0: add_region_rt will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\nParameters\n\nradius\n\npython:float\n\nRegion position for the radial coordinate.\n\ntheta\n\npython:float\n\nRegion position for the angular coordinate in degrees.\n\nregion_name\n\npython:str\n\nName of the region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveIronLossCoefficients",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveIronLossCoefficients.html#saveironlosscoefficients",
        "title": "SaveIronLossCoefficients",
        "section": "SaveIronLossCoefficients",
        "text": "Deprecated function. Replaced by MotorCAD.save_iron_loss_coefficients().\nSaveIronLossCoefficients\nMotorCAD.save_iron_loss_coefficients()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveIronLossCoefficients",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveIronLossCoefficients.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveIronLossCoefficients",
        "title": "SaveIronLossCoefficients > SaveIronLossCoefficients > SaveIronLossCoefficients",
        "section": "SaveIronLossCoefficients > SaveIronLossCoefficients",
        "text": "MotorCADCompatibility.SaveIronLossCoefficients(*args)\n\nDeprecated function. Replaced by MotorCAD.save_iron_loss_coefficients().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autogen_Graphs",
        "href": "methods/_autogen_Graphs.html#graphs",
        "title": "Graphs",
        "section": "Graphs",
        "text": "get_fea_graph(graph_name, slice_number[, ...])\nGet graph points from a Motor-CAD FEA graph.\nget_fea_graph_point(graph_id, slice_number, ...)\nGet a point from a Motor-CAD FEA graph.\nget_heatflow_graph(graph_name)\nGet graph points from a Motor-CAD heat flow graph.\nget_magnetic_3d_graph(graph_name, slice_number)\nGet graph points from a Motor-CAD Magnetic 3d graph.\nget_magnetic_3d_graph_point(graph_name, ...)\nGet a point from a Motor-CAD magnetic 3D graph.\nget_magnetic_graph(graph_name)\nGet graph points from a Motor-CAD Magnetic graph.\nget_magnetic_graph_harmonics(graph_name)\nGet harmonic analysis from Motor-CAD magnetic graph.\nget_magnetic_graph_point(graph_name, ...)\nGet a point from a Motor-CAD magnetic graph.\nget_power_graph(graph_name)\nGet graph points from a Motor-CAD transient power loss graph.\nget_power_graph_point(graph_name, point_number)\nGet a point from a Motor-CAD power graph.\nget_temperature_graph(graph_name)\nGet graph points from a Motor-CAD transient temperature graph.\nget_temperature_graph_point(graph_name, ...)\nGet a point from a Motor-CAD thermal graph.\nGraphs\nget_fea_graph\nget_fea_graph_point\nget_heatflow_graph\nget_magnetic_3d_graph\nget_magnetic_3d_graph_point\nget_magnetic_graph\nget_magnetic_graph_harmonics\nget_magnetic_graph_point\nget_power_graph\nget_power_graph_point\nget_temperature_graph\nget_temperature_graph_point"
    },
    {
        "objectID": "examples/adaptive_library/RoundParallelSlotBttm",
        "href": "examples/adaptive_library/RoundParallelSlotBttm.html#round-parallel-slot-bottom",
        "title": "Round Parallel Slot Bottom",
        "section": "Round Parallel Slot Bottom",
        "text": "This script applies the adaptive templates functionality to modify parallel slot bottoms from\nhaving square corners to round corners.\nRound Parallel Slot Bottom"
    },
    {
        "objectID": "examples/adaptive_library/RoundParallelSlotBttm",
        "href": "examples/adaptive_library/RoundParallelSlotBttm.html#perform-required-imports",
        "title": "Round Parallel Slot Bottom > Perform required imports",
        "section": "Perform required imports",
        "text": "Import pymotorcad to access Motor-CAD. Import draw_objects_debug to plot figures of\ngeometry objects.\nImport os, shutil, sys, and tempfile\nto open and save a temporary .mot file if none is open.\nPerform required imports\npymotorcad\ndraw_objects_debug\nos\nshutil\nsys\ntempfile"
    },
    {
        "objectID": "examples/adaptive_library/RoundParallelSlotBttm",
        "href": "examples/adaptive_library/RoundParallelSlotBttm.html#connect-to-motor-cad",
        "title": "Round Parallel Slot Bottom > Connect to Motor-CAD",
        "section": "Connect to Motor-CAD",
        "text": "If this script is loaded into the Adaptive Templates file in Motor-CAD, the current Motor-CAD\ninstance is used.\nIf the script is run externally, these actions occur: a new Motor-CAD instance is opened, the e3\nWFSM motor template is loaded, the Slot Type is set to Parallel Slot and the file is saved\nto a temporary folder. To keep a new Motor-CAD instance open after executing the script, use the\nMotorCAD(keep_instance_open=True) option when opening the new instance. Alternatively, use the\nMotorCAD() method, which closes the Motor-CAD instance after the script is executed.\nConnect to Motor-CAD\nMotorCAD(keep_instance_open=True)\nMotorCAD()"
    },
    {
        "objectID": "examples/adaptive_library/RoundParallelSlotBttm",
        "href": "examples/adaptive_library/RoundParallelSlotBttm.html#get-required-parameters-and-objects",
        "title": "Round Parallel Slot Bottom > Get required parameters and objects",
        "section": "Get required parameters and objects",
        "text": "From Motor-CAD, get the adaptive parameters and their values.\nUse the set_adaptive_parameter_default method to set the required Slot Bttm Corner Radius\nparameter if undefined.\nGet the slot bottom corner radius adaptive parameter value.\nGet the standard template regions with corners to be rounded. These can be drawn for debugging if\nrequired.\nGet the slot corner coordinates to be rounded. Plot the corner coordinates and the stator region\nusing the draw_objects_debug function to ensure you have selected the correct points.\nDefine the impregration corner coordinates to be rounded. Draw the impregnation region and corner\ncoordinates using the draw_objects_debug function.\nGet required parameters and objects\nset_adaptive_parameter_default\nSlot Bttm Corner Radius\ndraw_objects_debug\ndraw_objects_debug"
    },
    {
        "objectID": "examples/adaptive_library/RoundParallelSlotBttm",
        "href": "examples/adaptive_library/RoundParallelSlotBttm.html#create-the-adaptive-templates-geometry",
        "title": "Round Parallel Slot Bottom > Create the Adaptive Templates geometry",
        "section": "Create the Adaptive Templates geometry",
        "text": "Round the slot bottom corners for all regions that share these corner coordinates using the\nRegion.round_corners method. Armature winding regions only have 1 of the two corners, so use\nthe Region.round_corner method for these regions.\nRound the impregnation corners for the liner and impregnation regions using the\nRegion.round_corners method.\nSet the edited regions in Motor-CAD.\nCreate the Adaptive Templates geometry\nRegion.round_corners\nRegion.round_corner\nRegion.round_corners"
    },
    {
        "objectID": "examples/adaptive_library/RoundParallelSlotBttm",
        "href": "examples/adaptive_library/RoundParallelSlotBttm.html#load-in-adaptive-templates-script-if-required",
        "title": "Round Parallel Slot Bottom > Load in Adaptive Templates script if required",
        "section": "Load in Adaptive Templates script if required",
        "text": "When this script is run externally, the script executes the following:\nSet Geometry type to Adaptive.\nLoad the script into the Adaptive Templates tab.\nGo to the Geometry -> Radial tab to run the Adaptive Templates script and display the new\ngeometry.\nWhen running in a Jupyter Notebook, you must provide the path for the Adaptive Templates script\n(PY file) instead of sys.argv[0] when using the load_adaptive_script() method.\nTotal running time of the script: (0 minutes 33.688 seconds)\nDownload Jupyter notebook: RoundParallelSlotBttm.ipynb\nDownload Python source code: RoundParallelSlotBttm.py\nDownload zipped: RoundParallelSlotBttm.zip\nGallery generated by Sphinx-Gallery\nLoad in Adaptive Templates script if required\nsys.argv[0]\nload_adaptive_script()\nDownload Jupyter notebook: RoundParallelSlotBttm.ipynb\nDownload Python source code: RoundParallelSlotBttm.py\nDownload zipped: RoundParallelSlotBttm.zip"
    },
    {
        "objectID": "examples/sg_execution_times",
        "href": "examples/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "00:00.000 total execution time for 0 files from examples:\nExample\nTime\nMem (MB)\nN/A\nN/A\nN/A\nComputation times"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.linked_region",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.linked_region.html#linked_region",
        "title": "linked_region",
        "section": "linked_region",
        "text": "Get or set linked duplication/unite region.\nlinked_region"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.linked_region",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.linked_region.html#ansys.motorcad.core.geometry.Region.linked_region",
        "title": "linked_region > linked_region > linked_region",
        "section": "linked_region > linked_region",
        "text": "property Region.linked_region\n\nGet or set linked duplication/unite region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.length",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.length.html#length",
        "title": "length",
        "section": "length",
        "text": "Get length of arc from start to end along circumference.\nLength of arc\nlength\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.length",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.length.html#ansys.motorcad.core.geometry.Arc.length",
        "title": "length > length > length",
        "section": "length > length",
        "text": "property Arc.length\n\nGet length of arc from start to end along circumference.\n\nReturns\n\npython:float\n\nLength of arc\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadReportStructure",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadReportStructure.html#loadreportstructure",
        "title": "LoadReportStructure",
        "section": "LoadReportStructure",
        "text": "Deprecated function. Replaced by MotorCAD.load_report_structure().\nLoadReportStructure\nMotorCAD.load_report_structure()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadReportStructure",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadReportStructure.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadReportStructure",
        "title": "LoadReportStructure > LoadReportStructure > LoadReportStructure",
        "section": "LoadReportStructure > LoadReportStructure",
        "text": "MotorCADCompatibility.LoadReportStructure(*args)\n\nDeprecated function. Replaced by MotorCAD.load_report_structure().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_fea_graph_point",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_fea_graph_point.html#get_fea_graph_point",
        "title": "get_fea_graph_point",
        "section": "get_fea_graph_point",
        "text": "Get a point from a Motor-CAD FEA graph.\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\nWhich skew slice to get results from. Slice 1 is the first.\nPoint number to get x and y coordinate values from.\nValue of the x coordinate from the graph.\nValue of the y coordinate from the graph.\nget_fea_graph_point\npython:str\npython:int\npython:int\npython:int\npython:float\npython:float"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_fea_graph_point",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_fea_graph_point.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_fea_graph_point",
        "title": "get_fea_graph_point > get_fea_graph_point > get_fea_graph_point",
        "section": "get_fea_graph_point > get_fea_graph_point",
        "text": "MotorCAD.get_fea_graph_point(graph_id, slice_number, point_number, time_step_number)\n\nGet a point from a Motor-CAD FEA graph.\n\nParameters\n\ngraph_id\n\npython:str, python:int\n\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\n\nslice_number\n\npython:int\n\nWhich skew slice to get results from. Slice 1 is the first.\n\npoint_number\n\npython:int\n\nPoint number to get x and y coordinate values from.\n\ntime_step_number\n\n\n\nReturns\n\nxValue\n\npython:float\n\nValue of the x coordinate from the graph.\n\nyValue\n\npython:float\n\nValue of the y coordinate from the graph.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_impreg",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_impreg.html#stator_impreg",
        "title": "stator_impreg",
        "section": "stator_impreg",
        "text": "stator_impreg"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_impreg",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_impreg.html#ansys.motorcad.core.geometry.RegionType.stator_impreg",
        "title": "stator_impreg > stator_impreg > stator_impreg",
        "section": "stator_impreg > stator_impreg",
        "text": "RegionType.stator_impreg = 'Stator Impreg'\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.magnet_angle",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.magnet_angle.html#magnet_angle",
        "title": "magnet_angle",
        "section": "magnet_angle",
        "text": "Angle of the magnet in degrees.\nmagnet_angle\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.magnet_angle",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.magnet_angle.html#ansys.motorcad.core.geometry.RegionMagnet.magnet_angle",
        "title": "magnet_angle > magnet_angle > magnet_angle",
        "section": "magnet_angle > magnet_angle",
        "text": "property RegionMagnet.magnet_angle\n\nAngle of the magnet in degrees.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.airgap",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.airgap.html#airgap",
        "title": "airgap",
        "section": "airgap",
        "text": "airgap"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.airgap",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.airgap.html#ansys.motorcad.core.geometry.RegionType.airgap",
        "title": "airgap > airgap > airgap",
        "section": "airgap > airgap",
        "text": "RegionType.airgap = 'Airgap'\n\n"
    },
    {
        "objectID": "examples/advanced/sg_execution_times",
        "href": "examples/advanced/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "02:07.002 total execution time for 1 file from examplesadvanced:\nExample\nTime\nMem (MB)\nsphx_glr_examples_advanced_force_extraction.py (force_extraction.py)\n02:07.002\n0.0\nComputation times\nforce_extraction.py"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_fixed_temperature_value",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_fixed_temperature_value.html#set_fixed_temperature_value",
        "title": "set_fixed_temperature_value",
        "section": "set_fixed_temperature_value",
        "text": "Set or create a fixed temperature on a node.\nset_fixed_temperature_value"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_fixed_temperature_value",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_fixed_temperature_value.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_fixed_temperature_value",
        "title": "set_fixed_temperature_value > set_fixed_temperature_value > set_fixed_temperature_value",
        "section": "set_fixed_temperature_value > set_fixed_temperature_value",
        "text": "MotorCAD.set_fixed_temperature_value(name, node1, value, description)\n\nSet or create a fixed temperature on a node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_messages",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_messages.html#clear_messages",
        "title": "clear_messages",
        "section": "clear_messages",
        "text": "Clear messages in the message display window.\nclear_messages"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_messages",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_messages.html#ansys.motorcad.core.motorcad_methods.MotorCAD.clear_messages",
        "title": "clear_messages > clear_messages > clear_messages",
        "section": "clear_messages > clear_messages",
        "text": "MotorCAD.clear_messages()\n\nClear messages in the message display window.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.save_motorcad_screen_to_file",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.save_motorcad_screen_to_file.html#save_motorcad_screen_to_file",
        "title": "save_motorcad_screen_to_file",
        "section": "save_motorcad_screen_to_file",
        "text": "Save the entire Motor-CAD screen of a tab to an image file.\nCall the initialise_tab_names method before you call this method. The\nMotor-CAD UI must be visible.\nPath of the screen to save. The path must be in this format:\n\"tabName;tabName;tabName\". For example,\n\"Geometry;Axial\".\nFull path for the image file, including the file name and file extension. The\nextensions supported are BMP, JPG, and PNG.\nsave_motorcad_screen_to_file\ninitialise_tab_names\npython:str\n\"tabName;tabName;tabName\"\n\"Geometry;Axial\"\npython:str"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.save_motorcad_screen_to_file",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.save_motorcad_screen_to_file.html#ansys.motorcad.core.motorcad_methods.MotorCAD.save_motorcad_screen_to_file",
        "title": "save_motorcad_screen_to_file > save_motorcad_screen_to_file > save_motorcad_screen_to_file",
        "section": "save_motorcad_screen_to_file > save_motorcad_screen_to_file",
        "text": "MotorCAD.save_motorcad_screen_to_file(screen_name, file_name)\n\nSave the entire Motor-CAD screen of a tab to an image file.\n\nCall the initialise_tab_names method before you call this method. The\nMotor-CAD UI must be visible.\n\nParameters\n\nscreen_name\n\npython:str\n\nPath of the screen to save. The path must be in this format:\n\"tabName;tabName;tabName\". For example,\n\"Geometry;Axial\".\n\nfile_name\n\npython:str\n\nFull path for the image file, including the file name and file extension. The\nextensions supported are BMP, JPG, and PNG.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_magnetic_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_magnetic_lab.html#calculate_magnetic_lab",
        "title": "calculate_magnetic_lab",
        "section": "calculate_magnetic_lab",
        "text": "Run the Lab magnetic calculation.\ncalculate_magnetic_lab"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_magnetic_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_magnetic_lab.html#ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_magnetic_lab",
        "title": "calculate_magnetic_lab > calculate_magnetic_lab > calculate_magnetic_lab",
        "section": "calculate_magnetic_lab > calculate_magnetic_lab",
        "text": "MotorCAD.calculate_magnetic_lab()\n\nRun the Lab magnetic calculation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.html#arc",
        "title": "Arc",
        "section": "Arc",
        "text": "Python representation of Motor-CAD arc entity based upon start, end, (centre or radius).\nStart coordinate.\nEnd coordinate.\nCentre coordinate.\nArc radius\nArc.coordinate_on_entity(coordinate)\nGet if a coordinate exists on this Arc.\nArc.coordinate_within_arc_radius(coordinate)\nCheck if coordinate exists within arc radius.\nArc.from_coordinates(start_point, ...)\nTake three coordinates and converts to an arc.\nArc.get_arc_intersection(arc)\nGet intersection Coordinates of arc with another arc.\nArc.get_coordinate_from_distance(ref_coordinate)\nGet the coordinate at the specified distance along the arc from the reference coordinate.\nArc.get_coordinate_from_percentage_distance(...)\nGet the coordinate at a fractional distance along the arc from the reference coord.\nArc.get_intersection(entity)\nGet intersection Coordinate of entity with another entity.\nArc.get_line_intersection(line)\nGet intersection Coordinates of arc with a line.\nArc.mirror(mirror_line)\nMirror arc about a line.\nArc.reverse()\nReverse Arc entity.\nArc.rotate(centre_point, angle)\nRotate entity around a point for a given angle.\nArc.translate(x, y)\nTranslate Entity by specified x,y distances.\nArc.centre\nGet centre point of circle defining arc.\nArc.end_angle\nGet angle of end point from centre point coordinates.\nArc.length\nGet length of arc from start to end along circumference.\nArc.midpoint\nGet midpoint of arc.\nArc.start_angle\nGet angle of start point from centre point coordinates.\nArc.total_angle\nGet arc sweep angle.\nArc\nCoordinate\nCoordinate\nCoordinate\noptional\npython:float\noptional\nArc.coordinate_on_entity\nArc.coordinate_within_arc_radius\nArc.from_coordinates\nArc.get_arc_intersection\nArc.get_coordinate_from_distance\nArc.get_coordinate_from_percentage_distance\nArc.get_intersection\nArc.get_line_intersection\nArc.mirror\nArc.reverse\nArc.rotate\nArc.translate\nArc.centre\nArc.end_angle\nArc.length\nArc.midpoint\nArc.start_angle\nArc.total_angle"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.html#ansys.motorcad.core.geometry.Arc",
        "title": "Arc > Arc > Arc",
        "section": "Arc > Arc",
        "text": "class ansys.motorcad.core.geometry.Arc(start, end, centre=None, radius=None)\n\nPython representation of Motor-CAD arc entity based upon start, end, (centre or radius).\n\nParameters\n\nstart\n\nCoordinate\n\nStart coordinate.\n\nend\n\nCoordinate\n\nEnd coordinate.\n\ncentre\n\nCoordinate, optional\n\nCentre coordinate.\n\nradius\n\npython:float, optional\n\nArc radius\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nArc.coordinate_on_entity(coordinate)\n\nGet if a coordinate exists on this Arc.\n\nArc.coordinate_within_arc_radius(coordinate)\n\nCheck if coordinate exists within arc radius.\n\nArc.from_coordinates(start_point, ...)\n\nTake three coordinates and converts to an arc.\n\nArc.get_arc_intersection(arc)\n\nGet intersection Coordinates of arc with another arc.\n\nArc.get_coordinate_from_distance(ref_coordinate)\n\nGet the coordinate at the specified distance along the arc from the reference coordinate.\n\nArc.get_coordinate_from_percentage_distance(...)\n\nGet the coordinate at a fractional distance along the arc from the reference coord.\n\nArc.get_intersection(entity)\n\nGet intersection Coordinate of entity with another entity.\n\nArc.get_line_intersection(line)\n\nGet intersection Coordinates of arc with a line.\n\nArc.mirror(mirror_line)\n\nMirror arc about a line.\n\nArc.reverse()\n\nReverse Arc entity.\n\nArc.rotate(centre_point, angle)\n\nRotate entity around a point for a given angle.\n\nArc.translate(x, y)\n\nTranslate Entity by specified x,y distances.\n\n\n\nAttributes\n\n\n\n\n\n\n\nArc.centre\n\nGet centre point of circle defining arc.\n\nArc.end_angle\n\nGet angle of end point from centre point coordinates.\n\nArc.length\n\nGet length of arc from start to end along circumference.\n\nArc.midpoint\n\nGet midpoint of arc.\n\nArc.start_angle\n\nGet angle of start point from centre point coordinates.\n\nArc.total_angle\n\nGet arc sweep angle.\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.subtract",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.subtract.html#subtract",
        "title": "subtract",
        "section": "subtract",
        "text": "Subtract region from self, returning any additional regions.\nMotor-CAD region object\nlist of Motor-CAD region object\nsubtract\nansys.motorcad.core.geometry.Region\npython:list\nof\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.subtract",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.subtract.html#ansys.motorcad.core.geometry.Region.subtract",
        "title": "subtract > subtract > subtract",
        "section": "subtract > subtract",
        "text": "Region.subtract(region)\n\nSubtract region from self, returning any additional regions.\n\nParameters\n\nregion\n\nansys.motorcad.core.geometry.Region\n\nMotor-CAD region object\n\nReturns\n\npython:list of ansys.motorcad.core.geometry.Region\n\nlist of Motor-CAD region object\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_duty_cycle",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_duty_cycle.html#load_duty_cycle",
        "title": "load_duty_cycle",
        "section": "load_duty_cycle",
        "text": "Load a duty cycle from a DAT file.\nName of the DAT file with the duty cycle to load. The default\ndirectory is the one with the MOT file. To use a different\ndirectory, specify the absolute filepath to the DAT file.\nUse the r'filepath' syntax to force Python to ignore\nspecial characters.\nload_duty_cycle\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_duty_cycle",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_duty_cycle.html#ansys.motorcad.core.motorcad_methods.MotorCAD.load_duty_cycle",
        "title": "load_duty_cycle > load_duty_cycle > load_duty_cycle",
        "section": "load_duty_cycle > load_duty_cycle",
        "text": "MotorCAD.load_duty_cycle(file_name)\n\nLoad a duty cycle from a DAT file.\n\nParameters\n\nfile_name\n\npython:str\n\nName of the DAT file with the duty cycle to load. The default\ndirectory is the one with the MOT file. To use a different\ndirectory, specify the absolute filepath to the DAT file.\nUse the r'filepath' syntax to force Python to ignore\nspecial characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.restore_compatibility_settings",
        "href": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.restore_compatibility_settings.html#restore_compatibility_settings",
        "title": "restore_compatibility_settings",
        "section": "restore_compatibility_settings",
        "text": "Restore model compatibility settings to default values to use the latest methods.\nrestore_compatibility_settings"
    },
    {
        "objectID": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.restore_compatibility_settings",
        "href": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.restore_compatibility_settings.html#ansys.motorcad.core.motorcad_methods.MotorCAD.restore_compatibility_settings",
        "title": "restore_compatibility_settings > restore_compatibility_settings > restore_compatibility_settings",
        "section": "restore_compatibility_settings > restore_compatibility_settings",
        "text": "MotorCAD.restore_compatibility_settings()\n\nRestore model compatibility settings to default values to use the latest methods.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.centroid",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.centroid.html#centroid",
        "title": "centroid",
        "section": "centroid",
        "text": "Get the region centroid.\ncentroid"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.centroid",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.centroid.html#ansys.motorcad.core.geometry.RegionMagnet.centroid",
        "title": "centroid > centroid > centroid",
        "section": "centroid > centroid",
        "text": "property RegionMagnet.centroid\n\nGet the region centroid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.delete_region",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.delete_region.html#delete_region",
        "title": "delete_region",
        "section": "delete_region",
        "text": "Delete region from Motor-CAD geometry engine.\nMotor-CAD region object\nWhether to remove regions children\ndelete_region\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.delete_region",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.delete_region.html#ansys.motorcad.core.motorcad_methods.MotorCAD.delete_region",
        "title": "delete_region > delete_region > delete_region",
        "section": "delete_region > delete_region",
        "text": "MotorCAD.delete_region(region, remove_children=False)\n\nDelete region from Motor-CAD geometry engine.\n\nParameters\n\nregion\n\nansys.motorcad.core.geometry.Region\n\nMotor-CAD region object\n\nremove_children\n\nbool\n\nWhether to remove regions children\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.from_polar_coords",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.from_polar_coords.html#from_polar_coords",
        "title": "from_polar_coords",
        "section": "from_polar_coords",
        "text": "Create Coordinate from polar coordinates.\nRadial coordinate.\nAngular coordinate.\nfrom_polar_coords\npython:float\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.from_polar_coords",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.from_polar_coords.html#ansys.motorcad.core.geometry.Coordinate.from_polar_coords",
        "title": "from_polar_coords > from_polar_coords > from_polar_coords",
        "section": "from_polar_coords > from_polar_coords",
        "text": "classmethod Coordinate.from_polar_coords(radius, theta)\n\nCreate Coordinate from polar coordinates.\n\nParameters\n\nradius\n\npython:float\n\nRadial coordinate.\n\ntheta\n\npython:float\n\nAngular coordinate.\n\nReturns\n\n\n\n——-\n\n\n\nCoordinate\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.entities",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.entities.html#entities",
        "title": "entities",
        "section": "entities",
        "text": "Get or set the list of entities in the region.\nentities"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.entities",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.entities.html#ansys.motorcad.core.geometry.RegionMagnet.entities",
        "title": "entities > entities > entities",
        "section": "entities > entities",
        "text": "property RegionMagnet.entities\n\nGet or set the list of entities in the region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Utility/ansys.motorcad.core.motorcad_methods.MotorCAD.is_file_loaded",
        "href": "methods/_autosummary_Utility/ansys.motorcad.core.motorcad_methods.MotorCAD.is_file_loaded.html#is_file_loaded",
        "title": "is_file_loaded",
        "section": "is_file_loaded",
        "text": "Check if a Motor-CAD file is loaded.\nTrue if a Motor-CAD file is loaded,\nFalse if no file is loaded in Motor-CAD.\nis_file_loaded\nTrue\nFalse"
    },
    {
        "objectID": "methods/_autosummary_Utility/ansys.motorcad.core.motorcad_methods.MotorCAD.is_file_loaded",
        "href": "methods/_autosummary_Utility/ansys.motorcad.core.motorcad_methods.MotorCAD.is_file_loaded.html#ansys.motorcad.core.motorcad_methods.MotorCAD.is_file_loaded",
        "title": "is_file_loaded > is_file_loaded > is_file_loaded",
        "section": "is_file_loaded > is_file_loaded",
        "text": "MotorCAD.is_file_loaded()\n\nCheck if a Motor-CAD file is loaded.\n\nReturns\n\nbool\n\nTrue if a Motor-CAD file is loaded,\nFalse if no file is loaded in Motor-CAD.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoMagneticCalculation",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoMagneticCalculation.html#domagneticcalculation",
        "title": "DoMagneticCalculation",
        "section": "DoMagneticCalculation",
        "text": "Deprecated function. Replaced by MotorCAD.do_magnetic_calculation().\nDoMagneticCalculation\nMotorCAD.do_magnetic_calculation()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoMagneticCalculation",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoMagneticCalculation.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoMagneticCalculation",
        "title": "DoMagneticCalculation > DoMagneticCalculation > DoMagneticCalculation",
        "section": "DoMagneticCalculation > DoMagneticCalculation",
        "text": "MotorCADCompatibility.DoMagneticCalculation()\n\nDeprecated function. Replaced by MotorCAD.do_magnetic_calculation().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DeleteRegions",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DeleteRegions.html#deleteregions",
        "title": "DeleteRegions",
        "section": "DeleteRegions",
        "text": "Deprecated function. Replaced by MotorCAD.delete_regions().\nDeleteRegions\nMotorCAD.delete_regions()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DeleteRegions",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DeleteRegions.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DeleteRegions",
        "title": "DeleteRegions > DeleteRegions > DeleteRegions",
        "section": "DeleteRegions > DeleteRegions",
        "text": "MotorCADCompatibility.DeleteRegions(*args)\n\nDeprecated function. Replaced by MotorCAD.delete_regions().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_resistance_value",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_resistance_value.html#set_resistance_value",
        "title": "set_resistance_value",
        "section": "set_resistance_value",
        "text": "Set or create a resistance.\nset_resistance_value"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_resistance_value",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_resistance_value.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_resistance_value",
        "title": "set_resistance_value > set_resistance_value > set_resistance_value",
        "section": "set_resistance_value > set_resistance_value",
        "text": "MotorCAD.set_resistance_value(name, node1, node2, value, description)\n\nSet or create a resistance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetComponentMaterial",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetComponentMaterial.html#getcomponentmaterial",
        "title": "GetComponentMaterial",
        "section": "GetComponentMaterial",
        "text": "Deprecated function. Replaced by MotorCAD.get_component_material().\nGetComponentMaterial\nMotorCAD.get_component_material()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetComponentMaterial",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetComponentMaterial.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetComponentMaterial",
        "title": "GetComponentMaterial > GetComponentMaterial > GetComponentMaterial",
        "section": "GetComponentMaterial > GetComponentMaterial",
        "text": "MotorCADCompatibility.GetComponentMaterial(*args)\n\nDeprecated function. Replaced by MotorCAD.get_component_material().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.get_coordinate_from_percentage_distance",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.get_coordinate_from_percentage_distance.html#get_coordinate_from_percentage_distance",
        "title": "get_coordinate_from_percentage_distance",
        "section": "get_coordinate_from_percentage_distance",
        "text": "Get the coordinate at a fractional distance along the line from the reference coord.\nThis method is deprecated. Use the Line.get_coordinate_from_distance()\nmethod with the fraction = ` or `percentage = argument.\nEntity reference coordinate.\nFractional distance along Line.\nCoordinate at fractional distance along Line.\nget_coordinate_from_percentage_distance\nLine.get_coordinate_from_distance()\nCoordinate\npython:float\nCoordinate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.get_coordinate_from_percentage_distance",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.get_coordinate_from_percentage_distance.html#ansys.motorcad.core.geometry.Line.get_coordinate_from_percentage_distance",
        "title": "get_coordinate_from_percentage_distance > get_coordinate_from_percentage_distance > get_coordinate_from_percentage_distance",
        "section": "get_coordinate_from_percentage_distance > get_coordinate_from_percentage_distance",
        "text": "Line.get_coordinate_from_percentage_distance(ref_coordinate, fraction)\n\nGet the coordinate at a fractional distance along the line from the reference coord.\n\nThis method is deprecated. Use the Line.get_coordinate_from_distance()\nmethod with the fraction = ` or `percentage = argument.\n\nParameters\n\nref_coordinate\n\nCoordinate\n\nEntity reference coordinate.\n\nfraction\n\npython:float\n\nFractional distance along Line.\n\nReturns\n\nCoordinate\n\nCoordinate at fractional distance along Line.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/basics/sg_execution_times",
        "href": "examples/basics/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "03:14.644 total execution time for 3 files from examplesbasics:\nExample\nTime\nMem (MB)\nsphx_glr_examples_basics_lab_basics.py (lab_basics.py)\n01:52.096\n0.0\nsphx_glr_examples_basics_thermal_basics.py (thermal_basics.py)\n00:42.798\n0.0\nsphx_glr_examples_basics_emag_basics.py (emag_basics.py)\n00:39.751\n0.0\nComputation times\nlab_basics.py\nthermal_basics.py\nemag_basics.py"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_template",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_template.html#save_template",
        "title": "save_template",
        "section": "save_template",
        "text": "Save the template to an MTT template file.\nsave_template\npython:str\npython:str\npython:str\npython:str\npython:str\npython:str\npython:str\npython:str\npython:str\npython:str\npython:str"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_template",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_template.html#ansys.motorcad.core.motorcad_methods.MotorCAD.save_template",
        "title": "save_template > save_template > save_template",
        "section": "save_template > save_template",
        "text": "MotorCAD.save_template(template_file_name, name, sector, machine_type, application, winding_type, max_speed, power, cooling, drive_type, notes)\n\nSave the template to an MTT template file.\n\nParameters\n\ntemplate_file_name\n\npython:str\n\n\n\nname\n\npython:str\n\n\n\nsector\n\npython:str\n\n\n\nmachine_type\n\npython:str\n\n\n\napplication\n\npython:str\n\n\n\nwinding_type\n\npython:str\n\n\n\nmax_speed\n\npython:str\n\n\n\npower\n\npython:str\n\n\n\ncooling\n\npython:str\n\n\n\ndrive_type\n\npython:str\n\n\n\nnotes\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.update",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.update.html#update",
        "title": "update",
        "section": "update",
        "text": "Update class fields from another region.\nMotor-CAD region object\nupdate\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.update",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.update.html#ansys.motorcad.core.geometry.Region.update",
        "title": "update > update > update",
        "section": "update > update",
        "text": "Region.update(region)\n\nUpdate class fields from another region.\n\nParameters\n\nregion\n\nansys.motorcad.core.geometry.Region\n\nMotor-CAD region object\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Internal Scripting/ansys.motorcad.core.motorcad_methods.MotorCAD.load_script",
        "href": "methods/_autosummary_Internal Scripting/ansys.motorcad.core.motorcad_methods.MotorCAD.load_script.html#load_script",
        "title": "load_script",
        "section": "load_script",
        "text": "Load a script file into Motor-CAD’s internal scripting.\nFull path to the script file, including the file name.\nUse the r'filepath' syntax to force Python to ignore\nspecial characters.\nload_script\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_Internal Scripting/ansys.motorcad.core.motorcad_methods.MotorCAD.load_script",
        "href": "methods/_autosummary_Internal Scripting/ansys.motorcad.core.motorcad_methods.MotorCAD.load_script.html#ansys.motorcad.core.motorcad_methods.MotorCAD.load_script",
        "title": "load_script > load_script > load_script",
        "section": "load_script > load_script",
        "text": "MotorCAD.load_script(script_file)\n\nLoad a script file into Motor-CAD’s internal scripting.\n\nParameters\n\nscript_file\n\npython:str\n\nFull path to the script file, including the file name.\nUse the r'filepath' syntax to force Python to ignore\nspecial characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.RemoveExternalComponent",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.RemoveExternalComponent.html#removeexternalcomponent",
        "title": "RemoveExternalComponent",
        "section": "RemoveExternalComponent",
        "text": "Deprecated function. Replaced by MotorCAD.remove_external_component().\nRemoveExternalComponent\nMotorCAD.remove_external_component()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.RemoveExternalComponent",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.RemoveExternalComponent.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.RemoveExternalComponent",
        "title": "RemoveExternalComponent > RemoveExternalComponent > RemoveExternalComponent",
        "section": "RemoveExternalComponent > RemoveExternalComponent",
        "text": "MotorCADCompatibility.RemoveExternalComponent(*args)\n\nDeprecated function. Replaced by MotorCAD.remove_external_component().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportMatrices",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportMatrices.html#exportmatrices",
        "title": "ExportMatrices",
        "section": "ExportMatrices",
        "text": "Deprecated function. Replaced by MotorCAD.export_matrices().\nExportMatrices\nMotorCAD.export_matrices()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportMatrices",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportMatrices.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportMatrices",
        "title": "ExportMatrices > ExportMatrices > ExportMatrices",
        "section": "ExportMatrices > ExportMatrices",
        "text": "MotorCADCompatibility.ExportMatrices(*args)\n\nDeprecated function. Replaced by MotorCAD.export_matrices().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/external_scripting",
        "href": "user_guide/external_scripting.html#adding-to-external-python-and-contributing",
        "title": "Adding to external python and contributing",
        "section": "Adding to external python and contributing",
        "text": "Adding to external python and contributing"
    },
    {
        "objectID": "user_guide/external_scripting",
        "href": "user_guide/external_scripting.html#pymotorcad",
        "title": "Adding to external python and contributing > PyMotorCAD",
        "section": "PyMotorCAD",
        "text": "PyAnsys Python PyPI GH-CI Codecov MIT Black\nPyMotorCAD"
    },
    {
        "objectID": "user_guide/external_scripting",
        "href": "user_guide/external_scripting.html#overview",
        "title": "Adding to external python and contributing > Overview",
        "section": "Overview",
        "text": "Ansys Motor-CAD is a dedicated design and analysis tool for electric motors. It enables rapid\nand accurate multiphysics design and analysis of electric machines across the full-operating\nspectrum.\nPyMotorCAD uses a Python JSON-RPC (remote procedure call) interface for\nMotor-CAD to launch or connect with a Motor-CAD instance, either locally or\nfrom a remote machine via HTTP. With PyMotorCAD, you can programmatically\ncreate, interact with, and control a Motor-CAD model, with or without using\nthe Motor-CAD GUI.\nOverview"
    },
    {
        "objectID": "user_guide/external_scripting",
        "href": "user_guide/external_scripting.html#documentation-and-issues",
        "title": "Adding to external python and contributing > Documentation and issues",
        "section": "Documentation and issues",
        "text": "Documentation for the latest stable release of PyMotorCAD is hosted at\nPyMotorCAD documentation.\nIn the upper right corner of the documentation’s title bar, there is an option for switching from\nviewing the documentation for the latest stable release to viewing the documentation for the\ndevelopment version or previously released versions.\nYou can also view or\ndownload the\nPyMotorCAD cheat sheet. This one-page reference provides syntax rules and commands\nfor using PyMotorCAD.\nOn the PyMotorCAD Issues page, you can create\nissues to report bugs and request new features. On the Discussions\npage on the Ansys Developer portal, you can post questions, share ideas, and get community feedback.\nTo reach the project support team, email pyansys.core@ansys.com.\nDocumentation and issues"
    },
    {
        "objectID": "user_guide/external_scripting",
        "href": "user_guide/external_scripting.html#installation",
        "title": "Adding to external python and contributing > Installation",
        "section": "Installation",
        "text": "PyMotorCAD has two installation modes: user and developer.\nInstallation"
    },
    {
        "objectID": "user_guide/external_scripting",
        "href": "user_guide/external_scripting.html#install-in-user-mode",
        "title": "Adding to external python and contributing > Install in user mode",
        "section": "Install in user mode",
        "text": "Before installing PyMotorCAD in user mode, run this command to ensure\nthat you have the latest version of pip:\nThen, run this command to install PyMotorCAD:\nInstall in user mode"
    },
    {
        "objectID": "user_guide/external_scripting",
        "href": "user_guide/external_scripting.html#install-in-developer-mode",
        "title": "Adding to external python and contributing > Install in developer mode",
        "section": "Install in developer mode",
        "text": "Installing PyMotorCAD in developer mode allows\nyou to modify the source and enhance it.\nNote: Before contributing to this project, ensure that you are familiar\nwith all guidelines in the PyAnsys Developer’s Guide.\nTo install in developer mode, complete these steps:\nClone the pymotorcad repository with this command:\nCreate a fresh-clean Python environment and then activate it with these\ncommands:\nEnsure that you have the latest required build system and\ndocumentation, testing, and CI tools with this command:\nInstall the project in editable mode with this command:\nVerify your development installation with this command:\nInstall in developer mode\npymotorcad"
    },
    {
        "objectID": "user_guide/external_scripting",
        "href": "user_guide/external_scripting.html#testing",
        "title": "Adding to external python and contributing > Testing",
        "section": "Testing",
        "text": "This project takes advantage of tox. This tool allows you to automate common\ndevelopment tasks (similar to Makefile), but it is oriented towards Python\ndevelopment.\nWhile Makefile has rules, tox has environments. In fact, tox creates\nits own virtual environment to guarantee the project’s integrity by isolating\nanything being tested.\nTesting\ntox\ntox"
    },
    {
        "objectID": "user_guide/external_scripting",
        "href": "user_guide/external_scripting.html#tox-commands",
        "title": "Adding to external python and contributing > tox commands",
        "section": "tox commands",
        "text": "Here are commands for running various checks in the  tox environment:\ntox -e style: Checks for coding style quality.\ntox -e py: Checks for unit tests.\ntox -e py-coverage: Checks for unit testing and code coverage.\ntox -e doc: Checks for the documentation-building process.\ntox commands\ntox\ntox"
    },
    {
        "objectID": "user_guide/external_scripting",
        "href": "user_guide/external_scripting.html#raw-testing",
        "title": "Adding to external python and contributing > Raw testing",
        "section": "Raw testing",
        "text": "If required, you can call style commands, such as black, isort,\nand flake8, or unit testing commands, such as`pytest`_, from the command line.\nHowever, using these commands does not guarantee that your project is being\ntested in an isolated environment, which is why tools like tox exist.\nRaw testing"
    },
    {
        "objectID": "user_guide/external_scripting",
        "href": "user_guide/external_scripting.html#style-checks",
        "title": "Adding to external python and contributing > Style checks",
        "section": "Style checks",
        "text": "The style checks take advantage of pre-commit. Developers are not forced but\nencouraged to install this tool by running this command:\nStyle checks"
    },
    {
        "objectID": "user_guide/external_scripting",
        "href": "user_guide/external_scripting.html#documentation-builds",
        "title": "Adding to external python and contributing > Documentation builds",
        "section": "Documentation builds",
        "text": "To build documentation, you can run the usual rules provided in the\nSphinx Makefile with a command like this:\nHowever, the recommended way of checking documentation integrity is to use\na tox command like this:\nDocumentation builds\ntox"
    },
    {
        "objectID": "user_guide/external_scripting",
        "href": "user_guide/external_scripting.html#distribution",
        "title": "Adding to external python and contributing > Distribution",
        "section": "Distribution",
        "text": "If you would like to create either source or wheel files, run the following\ncommands to install the building requirements and execute the build module:\nDistribution"
    },
    {
        "objectID": "user_guide/external_scripting",
        "href": "user_guide/external_scripting.html#license-and-acknowledgements",
        "title": "Adding to external python and contributing > License and acknowledgements",
        "section": "License and acknowledgements",
        "text": "PyMotorCAD is licensed under the MIT license. For more information, see the\nLICENSE file.\nPyMotorCAD makes no commercial claim over Ansys whatsoever. This library\nextends the capability of Ansys Motor-CAD by adding a Python interface\nto Motor-CAD without changing the core behaviour or license of the original\nsoftware. Using PyMotorCAD for interactive control of Motor-CAD requires\na legally licensed copy of Motor-CAD.\nFor more information on Motor-CAD, see the Ansys Motor-CAD\npage on the Ansys website.\nLicense and acknowledgements"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CreateOptimisedMesh_Thermal",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CreateOptimisedMesh_Thermal.html#createoptimisedmesh_thermal",
        "title": "CreateOptimisedMesh_Thermal",
        "section": "CreateOptimisedMesh_Thermal",
        "text": "Deprecated function.\nCreateOptimisedMesh_Thermal"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CreateOptimisedMesh_Thermal",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CreateOptimisedMesh_Thermal.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CreateOptimisedMesh_Thermal",
        "title": "CreateOptimisedMesh_Thermal > CreateOptimisedMesh_Thermal > CreateOptimisedMesh_Thermal",
        "section": "CreateOptimisedMesh_Thermal > CreateOptimisedMesh_Thermal",
        "text": "MotorCADCompatibility.CreateOptimisedMesh_Thermal(*args)\n\nDeprecated function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadResults",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadResults.html#loadresults",
        "title": "LoadResults",
        "section": "LoadResults",
        "text": "Deprecated function. Replaced by MotorCAD.load_results().\nLoadResults\nMotorCAD.load_results()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadResults",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadResults.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadResults",
        "title": "LoadResults > LoadResults > LoadResults",
        "section": "LoadResults > LoadResults",
        "text": "MotorCADCompatibility.LoadResults(*args)\n\nDeprecated function. Replaced by MotorCAD.load_results().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_functions/ansys.motorcad.core.geometry.rt_to_xy",
        "href": "methods/_autosummary_geometry_functions/ansys.motorcad.core.geometry.rt_to_xy.html#rt_to_xy",
        "title": "rt_to_xy",
        "section": "rt_to_xy",
        "text": "Convert Motor-CAD polar coordinates to Cartesian coordinates in degrees.\nRadial coordinate.\nAngular coordinate.\nX coordinate value.\nY coordinate value.\nrt_to_xy\npython:float\npython:float\npython:float\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_functions/ansys.motorcad.core.geometry.rt_to_xy",
        "href": "methods/_autosummary_geometry_functions/ansys.motorcad.core.geometry.rt_to_xy.html#ansys.motorcad.core.geometry.rt_to_xy",
        "title": "rt_to_xy > rt_to_xy > rt_to_xy",
        "section": "rt_to_xy > rt_to_xy",
        "text": "ansys.motorcad.core.geometry.rt_to_xy(radius, theta)\n\nConvert Motor-CAD polar coordinates to Cartesian coordinates in degrees.\n\nParameters\n\nradius\n\npython:float\n\nRadial coordinate.\n\ntheta\n\npython:float\n\nAngular coordinate.\n\nReturns\n\nx\n\npython:float\n\nX coordinate value.\n\ny\n\npython:float\n\nY coordinate value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/index",
        "href": "methods/index.html#api-reference",
        "title": "API reference",
        "section": "API reference",
        "text": "API reference"
    },
    {
        "objectID": "methods/index",
        "href": "methods/index.html#motor-cad-api",
        "title": "API reference > Motor-CAD API",
        "section": "Motor-CAD API",
        "text": "The MotorCAD object is used by default for PyMotorCAD scripting.\nFor descriptions of this object’s single class and its many methods,\nsee ref_MotorCAD_object.\nMotor-CAD API\nMotorCAD"
    },
    {
        "objectID": "methods/index",
        "href": "methods/index.html#motor-cad-compatibility-api",
        "title": "API reference > Motor-CAD compatibility API",
        "section": "Motor-CAD compatibility API",
        "text": "The MotorCADCompatibility object is used for running old ActiveX\nscripts. For information on backwards compatibility, see\nref_backwards_compatibility. For descriptions of this\nobject, its single class, and its many methods, see\nref_MotorCADCompatibility_object.\nIn addition to giving the available methods, their replacement functions\nhave been commented.\nMotor-CAD compatibility API\nMotorCADCompatibility"
    },
    {
        "objectID": "methods/index",
        "href": "methods/index.html#geometry-objects-and-functions",
        "title": "API reference > Geometry objects and functions",
        "section": "Geometry objects and functions",
        "text": "The ansys.motorcad.core.geometry library contains geometry objects and functions\nthat provide geometry capability in Python.\nGeometry objects and functions are used for\ndefining and modifying Adaptive Templates geometries in Python.\nFor descriptions of the objects and functions, see ref_geometry_functions.\nGeometry objects and functions\nansys.motorcad.core.geometry"
    },
    {
        "objectID": "methods/index",
        "href": "methods/index.html#geometry-drawing",
        "title": "API reference > Geometry drawing",
        "section": "Geometry drawing",
        "text": "The ansys.motorcad.core.geometry_drawing library contains functions for drawing\ngeometry objects as static visualisations in Python. Geometry drawing is used for plotting\nobjects such as regions, lines, arcs and coordinates within the x-y plane. Drawing Motor-CAD\ngeometry objects can make it easier to test and create Adaptive Templates scripts.\nFor descriptions of the geometry drawing functions, see ref_geometry_drawing.\nGeometry drawing\nansys.motorcad.core.geometry_drawing"
    },
    {
        "objectID": "methods/index",
        "href": "methods/index.html#geometry-shapes",
        "title": "API reference > Geometry shapes",
        "section": "Geometry shapes",
        "text": "The ansys.motorcad.core.geometry_shapes library contains geometry functions\nthat provide geometry calculations in Python.\nGeometry shapes functions are used for\ndefining and modifying Adaptive Templates geometries in Python.\nFor descriptions of the functions, see ref_geometry_shapes.\nGeometry shapes\nansys.motorcad.core.geometry_shapes"
    },
    {
        "objectID": "methods/index",
        "href": "methods/index.html#geometry-fitting",
        "title": "API reference > Geometry fitting",
        "section": "Geometry fitting",
        "text": "The ansys.motorcad.core.geometry_fitting library contains functions\nused to find line and arc entities to fit a list of coordinates within a defined\ntolerance.\nFor descriptions of the functions, see ref_geometry_fitting.\nGeometry fitting\nansys.motorcad.core.geometry_fitting"
    },
    {
        "objectID": "methods/index",
        "href": "methods/index.html#utility-functions",
        "title": "API reference > Utility functions",
        "section": "Utility functions",
        "text": "A number of utility functions are available.\nFor more information, see\nref_utility_functions.\nUtility functions"
    },
    {
        "objectID": "methods/index",
        "href": "methods/index.html#motor-cad-errors",
        "title": "API reference > Motor-CAD errors",
        "section": "Motor-CAD errors",
        "text": "A class/exception type is used to obtain and handle errors from Motor-CAD.\nFor more information, see\nMotorCAD_errors.\nMotor-CAD errors"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_winding_pattern",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_winding_pattern.html#load_winding_pattern",
        "title": "load_winding_pattern",
        "section": "load_winding_pattern",
        "text": "Load the winding pattern from a text file.\nAbsolute filepath of the text file to load. Use the r'filepath'\nsyntax to force Python to ignore special characters.\nload_winding_pattern\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_winding_pattern",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_winding_pattern.html#ansys.motorcad.core.motorcad_methods.MotorCAD.load_winding_pattern",
        "title": "load_winding_pattern > load_winding_pattern > load_winding_pattern",
        "section": "load_winding_pattern > load_winding_pattern",
        "text": "MotorCAD.load_winding_pattern(file_path)\n\nLoad the winding pattern from a text file.\n\nParameters\n\nfile_path\n\npython:str\n\nAbsolute filepath of the text file to load. Use the r'filepath'\nsyntax to force Python to ignore special characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.reverse",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.reverse.html#reverse",
        "title": "reverse",
        "section": "reverse",
        "text": "Reverse Entity class.\nreverse"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.reverse",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.reverse.html#ansys.motorcad.core.geometry.Entity.reverse",
        "title": "reverse > reverse > reverse",
        "section": "reverse > reverse",
        "text": "Entity.reverse()\n\nReverse Entity class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoWeightCalculation",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoWeightCalculation.html#doweightcalculation",
        "title": "DoWeightCalculation",
        "section": "DoWeightCalculation",
        "text": "Deprecated function. Replaced by MotorCAD.do_weight_calculation().\nDoWeightCalculation\nMotorCAD.do_weight_calculation()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoWeightCalculation",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoWeightCalculation.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoWeightCalculation",
        "title": "DoWeightCalculation > DoWeightCalculation > DoWeightCalculation",
        "section": "DoWeightCalculation > DoWeightCalculation",
        "text": "MotorCADCompatibility.DoWeightCalculation()\n\nDeprecated function. Replaced by MotorCAD.do_weight_calculation().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetMessages",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetMessages.html#getmessages",
        "title": "GetMessages",
        "section": "GetMessages",
        "text": "Deprecated function. Replaced by MotorCAD.get_messages().\nGetMessages\nMotorCAD.get_messages()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetMessages",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetMessages.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetMessages",
        "title": "GetMessages > GetMessages > GetMessages",
        "section": "GetMessages > GetMessages",
        "text": "MotorCADCompatibility.GetMessages(*args)\n\nDeprecated function. Replaced by MotorCAD.get_messages().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.initialise_tab_names",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.initialise_tab_names.html#initialise_tab_names",
        "title": "initialise_tab_names",
        "section": "initialise_tab_names",
        "text": "Initialize the available tabs in the Motor-CAD UI.\nCall this method prior to using the save_motorcad_screen_to_file or\ndisplay_screen method. The Motor-CAD UI must be visible.\ninitialise_tab_names\nsave_motorcad_screen_to_file\ndisplay_screen"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.initialise_tab_names",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.initialise_tab_names.html#ansys.motorcad.core.motorcad_methods.MotorCAD.initialise_tab_names",
        "title": "initialise_tab_names > initialise_tab_names > initialise_tab_names",
        "section": "initialise_tab_names > initialise_tab_names",
        "text": "MotorCAD.initialise_tab_names()\n\nInitialize the available tabs in the Motor-CAD UI.\n\nCall this method prior to using the save_motorcad_screen_to_file or\ndisplay_screen method. The Motor-CAD UI must be visible.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.remove",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.remove.html#remove",
        "title": "remove",
        "section": "remove",
        "text": "Remove first occurrence of value.\nRaises ValueError if the value is not present.\nremove"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.remove",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.remove.html#ansys.motorcad.core.geometry.EntityList.remove",
        "title": "remove > remove > remove",
        "section": "remove > remove",
        "text": "EntityList.remove(value, /)\n\nRemove first occurrence of value.\n\nRaises ValueError if the value is not present.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_external_circuit",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_external_circuit.html#clear_external_circuit",
        "title": "clear_external_circuit",
        "section": "clear_external_circuit",
        "text": "Clear the external circuit.\nclear_external_circuit"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_external_circuit",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_external_circuit.html#ansys.motorcad.core.motorcad_methods.MotorCAD.clear_external_circuit",
        "title": "clear_external_circuit > clear_external_circuit > clear_external_circuit",
        "section": "clear_external_circuit > clear_external_circuit",
        "text": "MotorCAD.clear_external_circuit()\n\nClear the external circuit.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#getting-started",
        "title": "Getting started",
        "section": "Getting started",
        "text": "PyMotorCAD provides access to Ansys Motor-CAD via Python.\nTo run PyMotorCAD, there must be a licensed copy of Motor-CAD v2023R1 or later installed locally.\nFor more information on Motor-CAD, see the Ansys Motor-CAD page\non the Ansys website.\nPyMotorCAD is installed with Motor-CAD v2023R1 and later for internal Motor-CAD Scripting tab use. To install PyMotorCAD\nfor use outside of Motor-CAD, it may be downloaded from GitHub. PyMotorCAD is available for install via pip in the\nnear future.\nGetting started"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#installation",
        "title": "Getting started > Installation",
        "section": "Installation",
        "text": "Installation"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#python-module",
        "title": "Getting started > Python module",
        "section": "Python module",
        "text": "The ansys.motorcad.core package currently supports Python 3.7 through Python 3.10 on Windows.\nInstall the latest release from\nPyPi with:\nAlternatively, install the latest from\nPyMotorCAD GitHub via:\nFor a local development version, install with:\nThis allows you to install the ansys-motorcad-core module, modify it locally and have the changes reflected in your\nsetup after restarting the Python kernel.\nPython module\nansys.motorcad.core\nansys-motorcad-core"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#ansys-software-requirements",
        "title": "Getting started > Ansys software requirements",
        "section": "Ansys software requirements",
        "text": "For the latest features, you must have a copy of Ansys Motor-CAD v2023R1\ninstalled locally.\nFor more information, see install_MotorCAD.\nAnsys software requirements"
    },
    {
        "objectID": "getting_started/index",
        "href": "getting_started/index.html#verify-your-installation",
        "title": "Getting started > Verify your installation",
        "section": "Verify your installation",
        "text": "Check that Motor-CAD can be started from Python by running:\nIf successful, a Motor-CAD instance is launched, appearing on the taskbar. You are now ready to start using\nMotor-CAD with PyMotorCAD. For more information on the PyMotorCAD interface, see the ref_user_guide.\nVerify your installation"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetRegionLoss",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetRegionLoss.html#getregionloss",
        "title": "GetRegionLoss",
        "section": "GetRegionLoss",
        "text": "Deprecated function. Replaced by MotorCAD.get_region_loss().\nGetRegionLoss\nMotorCAD.get_region_loss()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetRegionLoss",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetRegionLoss.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetRegionLoss",
        "title": "GetRegionLoss > GetRegionLoss > GetRegionLoss",
        "section": "GetRegionLoss > GetRegionLoss",
        "text": "MotorCADCompatibility.GetRegionLoss(*args)\n\nDeprecated function. Replaced by MotorCAD.get_region_loss().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_temperature_graph_point",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_temperature_graph_point.html#get_temperature_graph_point",
        "title": "get_temperature_graph_point",
        "section": "get_temperature_graph_point",
        "text": "Get a point from a Motor-CAD thermal graph.\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\nPoint number to get the x and y coordinate values from.\nValue of the x coordinate from the graph.\nValue of the y coordinate from the graph.\nget_temperature_graph_point\npython:str\npython:int\npython:int\npython:float\npython:float"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_temperature_graph_point",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_temperature_graph_point.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_temperature_graph_point",
        "title": "get_temperature_graph_point > get_temperature_graph_point > get_temperature_graph_point",
        "section": "get_temperature_graph_point > get_temperature_graph_point",
        "text": "MotorCAD.get_temperature_graph_point(graph_name, point_number)\n\nGet a point from a Motor-CAD thermal graph.\n\nParameters\n\ngraph_name\n\npython:str, python:int\n\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\n\npoint_number\n\npython:int\n\nPoint number to get the x and y coordinate values from.\n\nReturns\n\nxValue\n\npython:float\n\nValue of the x coordinate from the graph.\n\nyValue\n\npython:float\n\nValue of the y coordinate from the graph.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CreateOptimisedMesh",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CreateOptimisedMesh.html#createoptimisedmesh",
        "title": "CreateOptimisedMesh",
        "section": "CreateOptimisedMesh",
        "text": "Deprecated function. Replaced by MotorCAD.create_optimised_mesh().\nCreateOptimisedMesh\nMotorCAD.create_optimised_mesh()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CreateOptimisedMesh",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CreateOptimisedMesh.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CreateOptimisedMesh",
        "title": "CreateOptimisedMesh > CreateOptimisedMesh > CreateOptimisedMesh",
        "section": "CreateOptimisedMesh > CreateOptimisedMesh",
        "text": "MotorCADCompatibility.CreateOptimisedMesh()\n\nDeprecated function. Replaced by MotorCAD.create_optimised_mesh().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetVariable",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetVariable.html#setvariable",
        "title": "SetVariable",
        "section": "SetVariable",
        "text": "Deprecated function. Replaced by MotorCAD.set_variable().\nSetVariable\nMotorCAD.set_variable()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetVariable",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetVariable.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetVariable",
        "title": "SetVariable > SetVariable > SetVariable",
        "section": "SetVariable > SetVariable",
        "text": "MotorCADCompatibility.SetVariable(*args)\n\nDeprecated function. Replaced by MotorCAD.set_variable().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetMeshGeneratorParam",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetMeshGeneratorParam.html#setmeshgeneratorparam",
        "title": "SetMeshGeneratorParam",
        "section": "SetMeshGeneratorParam",
        "text": "Deprecated function.\nSetMeshGeneratorParam"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetMeshGeneratorParam",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetMeshGeneratorParam.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetMeshGeneratorParam",
        "title": "SetMeshGeneratorParam > SetMeshGeneratorParam > SetMeshGeneratorParam",
        "section": "SetMeshGeneratorParam > SetMeshGeneratorParam",
        "text": "MotorCADCompatibility.SetMeshGeneratorParam(*args)\n\nDeprecated function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.show_magnetic_context",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.show_magnetic_context.html#show_magnetic_context",
        "title": "show_magnetic_context",
        "section": "show_magnetic_context",
        "text": "Show the magnetic context in Motor-CAD.\nshow_magnetic_context"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.show_magnetic_context",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.show_magnetic_context.html#ansys.motorcad.core.motorcad_methods.MotorCAD.show_magnetic_context",
        "title": "show_magnetic_context > show_magnetic_context > show_magnetic_context",
        "section": "show_magnetic_context > show_magnetic_context",
        "text": "MotorCAD.show_magnetic_context()\n\nShow the magnetic context in Motor-CAD.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/matlab_scripting",
        "href": "user_guide/matlab_scripting.html#pymotorcad-scripting-in-matlab",
        "title": "PyMotorCAD scripting in MATLAB",
        "section": "PyMotorCAD scripting in MATLAB",
        "text": "PyMotorCAD is available to use in MATLAB in the same way as other Python modules.\nIf the ansys.motorcad.core package is installed for a version of Python,\nthis version of Python can be used in MATLAB and the PyMotorCAD API can be called.\nThis means that MATLAB scripts can make use of PyMotorCAD for controlling Motor-CAD and automation.\nPyMotorCAD scripting in MATLAB\nansys.motorcad.core"
    },
    {
        "objectID": "user_guide/matlab_scripting",
        "href": "user_guide/matlab_scripting.html#using-python-modules-in-matlab",
        "title": "PyMotorCAD scripting in MATLAB > Using Python modules in MATLAB",
        "section": "Using Python modules in MATLAB",
        "text": "Python modules can be called in MATLAB as long as Python is installed on the system.\nPlease refer to the Mathworks website for detailed information on configuring your system to use Python\nand accessing Python Modules from MATLAB.\nBy default, MATLAB selects the version of Python based on the system path.\nTo view the system path in MATLAB, use the getenv('path') command.\nTo see which version of Python MATLAB is using, call the pyenv function in MATLAB.\nFor example, if version Python version 3.10 is installed and added to path, MATLAB outputs:\nUsing Python modules in MATLAB\ngetenv('path')\npyenv"
    },
    {
        "objectID": "user_guide/matlab_scripting",
        "href": "user_guide/matlab_scripting.html#using-pymotorcad-in-matlab",
        "title": "PyMotorCAD scripting in MATLAB > Using PyMotorCAD in MATLAB",
        "section": "Using PyMotorCAD in MATLAB",
        "text": "If the Python version that MATLAB is using has the ansys.motorcad.core package installed, PyMotorCAD is available to use in MATLAB.\nSee ref_getting_started for details on installing ansys.motorcad.core.\nTo import the ansys.motorcad.core module as pymotorcad for use in scripts, use:\nThen ref_MotorCAD_object commands can be used in MATLAB in the same way as in Python.\nTo start and connect to a Motor-CAD instance, access the MotorCAD() object:\nUsing PyMotorCAD in MATLAB\nansys.motorcad.core\nansys.motorcad.core\nansys.motorcad.core\npymotorcad\nMotorCAD()"
    },
    {
        "objectID": "user_guide/matlab_scripting",
        "href": "user_guide/matlab_scripting.html#example-motor-cad-e-magnetic-scripting-in-matlab",
        "title": "PyMotorCAD scripting in MATLAB > Example: Motor-CAD E-magnetic scripting in MATLAB",
        "section": "Example: Motor-CAD E-magnetic scripting in MATLAB",
        "text": "An example of a MATLAB script using PyMotorCAD to change the motor geometry and materials,\nrun magnetic calculations and extract results for further analysis is presented.\nThis example is also included in the Automation tutorial supplied with Motor-CAD.\nExample: Motor-CAD E-magnetic scripting in MATLAB"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadDXFFile",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadDXFFile.html#loaddxffile",
        "title": "LoadDXFFile",
        "section": "LoadDXFFile",
        "text": "Deprecated function. Replaced by MotorCAD.load_dxf_file().\nLoadDXFFile\nMotorCAD.load_dxf_file()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadDXFFile",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadDXFFile.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.LoadDXFFile",
        "title": "LoadDXFFile > LoadDXFFile > LoadDXFFile",
        "section": "LoadDXFFile > LoadDXFFile",
        "text": "MotorCADCompatibility.LoadDXFFile(*args)\n\nDeprecated function. Replaced by MotorCAD.load_dxf_file().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoTransientAnalysis",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoTransientAnalysis.html#dotransientanalysis",
        "title": "DoTransientAnalysis",
        "section": "DoTransientAnalysis",
        "text": "Deprecated function. Replaced by MotorCAD.do_transient_analysis().\nDoTransientAnalysis\nMotorCAD.do_transient_analysis()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoTransientAnalysis",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoTransientAnalysis.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoTransientAnalysis",
        "title": "DoTransientAnalysis > DoTransientAnalysis > DoTransientAnalysis",
        "section": "DoTransientAnalysis > DoTransientAnalysis",
        "text": "MotorCADCompatibility.DoTransientAnalysis()\n\nDeprecated function. Replaced by MotorCAD.do_transient_analysis().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.parent",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.parent.html#parent",
        "title": "parent",
        "section": "parent",
        "text": "Get or set parent region from Motor-CAD.\nlist of Motor-CAD region object\nparent\npython:list\nof\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.parent",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.parent.html#ansys.motorcad.core.geometry.RegionMagnet.parent",
        "title": "parent > parent > parent",
        "section": "parent > parent",
        "text": "property RegionMagnet.parent\n\nGet or set parent region from Motor-CAD.\n\nReturns\n\npython:list of ansys.motorcad.core.geometry.Region\n\nlist of Motor-CAD region object\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_utility_functions/ansys.motorcad.core.rpc_client_core.set_server_ip",
        "href": "methods/_autosummary_utility_functions/ansys.motorcad.core.rpc_client_core.set_server_ip.html#set_server_ip",
        "title": "set_server_ip",
        "section": "set_server_ip",
        "text": "Set the IP address of the machine that Motor-CAD is running on.\nIP address of the machine that Motor-CAD is running on.\nset_server_ip\npython:str"
    },
    {
        "objectID": "methods/_autosummary_utility_functions/ansys.motorcad.core.rpc_client_core.set_server_ip",
        "href": "methods/_autosummary_utility_functions/ansys.motorcad.core.rpc_client_core.set_server_ip.html#ansys.motorcad.core.rpc_client_core.set_server_ip",
        "title": "set_server_ip > set_server_ip > set_server_ip",
        "section": "set_server_ip > set_server_ip",
        "text": "ansys.motorcad.core.rpc_client_core.set_server_ip(ip)\n\nSet the IP address of the machine that Motor-CAD is running on.\n\nParameters\n\nip\n\npython:str\n\nIP address of the machine that Motor-CAD is running on.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_operating_point_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_operating_point_lab.html#calculate_operating_point_lab",
        "title": "calculate_operating_point_lab",
        "section": "calculate_operating_point_lab",
        "text": "Run the Lab operating point calculation.\ncalculate_operating_point_lab"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_operating_point_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_operating_point_lab.html#ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_operating_point_lab",
        "title": "calculate_operating_point_lab > calculate_operating_point_lab > calculate_operating_point_lab",
        "section": "calculate_operating_point_lab > calculate_operating_point_lab",
        "text": "MotorCAD.calculate_operating_point_lab()\n\nRun the Lab operating point calculation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.get_intersection",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.get_intersection.html#get_intersection",
        "title": "get_intersection",
        "section": "get_intersection",
        "text": "Get intersection Coordinate of entity with another entity.\nReturns None if intersection not found.\nget_intersection\nansys.motorcad.core.geometry.Line\nansys.motorcad.core.geometry.Arc\nansys.motorcad.core.geometry.Coordinate\npython:list\nof\nCoordinate\npython:None"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.get_intersection",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.get_intersection.html#ansys.motorcad.core.geometry.Arc.get_intersection",
        "title": "get_intersection > get_intersection > get_intersection",
        "section": "get_intersection > get_intersection",
        "text": "Arc.get_intersection(entity)\n\nGet intersection Coordinate of entity with another entity.\n\nReturns None if intersection not found.\n\nParameters\n\nentity\n\nansys.motorcad.core.geometry.Line or ansys.motorcad.core.geometry.Arc\n\n\n\nReturns\n\nansys.motorcad.core.geometry.Coordinate or python:list of Coordinate or python:None\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.cowling_gril",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.cowling_gril.html#cowling_gril",
        "title": "cowling_gril",
        "section": "cowling_gril",
        "text": "cowling_gril"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.cowling_gril",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.cowling_gril.html#ansys.motorcad.core.geometry.RegionType.cowling_gril",
        "title": "cowling_gril > cowling_gril > cowling_gril",
        "section": "cowling_gril > cowling_gril",
        "text": "RegionType.cowling_gril = 'Cowling Grill'\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateMagnetParameters",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateMagnetParameters.html#calculatemagnetparameters",
        "title": "CalculateMagnetParameters",
        "section": "CalculateMagnetParameters",
        "text": "Deprecated function. Replaced by MotorCAD.calculate_magnet_parameters().\nCalculateMagnetParameters\nMotorCAD.calculate_magnet_parameters()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateMagnetParameters",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateMagnetParameters.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateMagnetParameters",
        "title": "CalculateMagnetParameters > CalculateMagnetParameters > CalculateMagnetParameters",
        "section": "CalculateMagnetParameters > CalculateMagnetParameters",
        "text": "MotorCADCompatibility.CalculateMagnetParameters(*args)\n\nDeprecated function. Replaced by MotorCAD.calculate_magnet_parameters().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.singular",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.singular.html#singular",
        "title": "singular",
        "section": "singular",
        "text": "Get or set if region is singular.\nsingular"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.singular",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.singular.html#ansys.motorcad.core.geometry.Region.singular",
        "title": "singular > singular > singular",
        "section": "singular > singular",
        "text": "property Region.singular\n\nGet or set if region is singular.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_multi_force_data",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_multi_force_data.html#export_multi_force_data",
        "title": "export_multi_force_data",
        "section": "export_multi_force_data",
        "text": "Export calculated multiforce data to a file.\nName of the file. Use the r'filepath'\nsyntax to force Python to ignore special characters.\nexport_multi_force_data\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_multi_force_data",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_multi_force_data.html#ansys.motorcad.core.motorcad_methods.MotorCAD.export_multi_force_data",
        "title": "export_multi_force_data > export_multi_force_data > export_multi_force_data",
        "section": "export_multi_force_data > export_multi_force_data",
        "text": "MotorCAD.export_multi_force_data(file_name)\n\nExport calculated multiforce data to a file.\n\nParameters\n\nfile_name\n\npython:str\n\nName of the file. Use the r'filepath'\nsyntax to force Python to ignore special characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_RT",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_RT.html#addarc_rt",
        "title": "AddArc_RT",
        "section": "AddArc_RT",
        "text": "Deprecated function. Replaced by MotorCAD.add_arc_rt().\nAddArc_RT\nMotorCAD.add_arc_rt()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_RT",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_RT.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_RT",
        "title": "AddArc_RT > AddArc_RT > AddArc_RT",
        "section": "AddArc_RT > AddArc_RT",
        "text": "MotorCADCompatibility.AddArc_RT(*args)\n\nDeprecated function. Replaced by MotorCAD.add_arc_rt().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.end_angle",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.end_angle.html#end_angle",
        "title": "end_angle",
        "section": "end_angle",
        "text": "Get angle of end point from centre point coordinates.\nend_angle\nreal"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.end_angle",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.end_angle.html#ansys.motorcad.core.geometry.Arc.end_angle",
        "title": "end_angle > end_angle > end_angle",
        "section": "end_angle > end_angle",
        "text": "property Arc.end_angle\n\nGet angle of end point from centre point coordinates.\n\nReturns\n\nreal\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.replace",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.replace.html#replace",
        "title": "replace",
        "section": "replace",
        "text": "Replace self with another region.\nThis method replaces region entities with entities from the replacement region object,\nsuch as an imported DXF region.\nMotor-CAD region object whose entities are to replace those of the\nexisting region.\nreplace\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.replace",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.replace.html#ansys.motorcad.core.geometry.Region.replace",
        "title": "replace > replace > replace",
        "section": "replace > replace",
        "text": "Region.replace(replacement_region)\n\nReplace self with another region.\n\nThis method replaces region entities with entities from the replacement region object,\nsuch as an imported DXF region.\n\nParameters\n\nreplacement_region\n\nansys.motorcad.core.geometry.Region\n\nMotor-CAD region object whose entities are to replace those of the\nexisting region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_wj_duct_no_detail",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_wj_duct_no_detail.html#slot_wj_duct_no_detail",
        "title": "slot_wj_duct_no_detail",
        "section": "slot_wj_duct_no_detail",
        "text": "slot_wj_duct_no_detail"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_wj_duct_no_detail",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_wj_duct_no_detail.html#ansys.motorcad.core.geometry.RegionType.slot_wj_duct_no_detail",
        "title": "slot_wj_duct_no_detail > slot_wj_duct_no_detail > slot_wj_duct_no_detail",
        "section": "slot_wj_duct_no_detail > slot_wj_duct_no_detail",
        "text": "RegionType.slot_wj_duct_no_detail = 'Slot Water Jacket Duct (no detail)'\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddRegion_XY",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddRegion_XY.html#addregion_xy",
        "title": "AddRegion_XY",
        "section": "AddRegion_XY",
        "text": "Deprecated function. Replaced by MotorCAD.add_region_xy().\nAddRegion_XY\nMotorCAD.add_region_xy()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddRegion_XY",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddRegion_XY.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddRegion_XY",
        "title": "AddRegion_XY > AddRegion_XY > AddRegion_XY",
        "section": "AddRegion_XY > AddRegion_XY",
        "text": "MotorCADCompatibility.AddRegion_XY(*args)\n\nDeprecated function. Replaced by MotorCAD.add_region_xy().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.get_license",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.get_license.html#get_license",
        "title": "get_license",
        "section": "get_license",
        "text": "Check if a license is available for the current context and machine type.\nThis method is deprecated. Use the MotorCAD.get_licence() method.\nget_license\nMotorCAD.get_licence()"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.get_license",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.get_license.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_license",
        "title": "get_license > get_license > get_license",
        "section": "get_license > get_license",
        "text": "MotorCAD.get_license()\n\nCheck if a license is available for the current context and machine type.\n\nThis method is deprecated. Use the MotorCAD.get_licence() method.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_template",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_template.html#load_template",
        "title": "load_template",
        "section": "load_template",
        "text": "Load a motor template.\nName of the template, which is given in the Template column when\nselecting File -> Open Template in Motor-CAD. For example, \"a1\"\nor \"e9\".\nload_template\npython:str\n\"a1\"\n\"e9\""
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_template",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_template.html#ansys.motorcad.core.motorcad_methods.MotorCAD.load_template",
        "title": "load_template > load_template > load_template",
        "section": "load_template > load_template",
        "text": "MotorCAD.load_template(template_name)\n\nLoad a motor template.\n\nParameters\n\ntemplate_name\n\npython:str\n\nName of the template, which is given in the Template column when\nselecting File -> Open Template in Motor-CAD. For example, \"a1\"\nor \"e9\".\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveScript",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveScript.html#savescript",
        "title": "SaveScript",
        "section": "SaveScript",
        "text": "Deprecated function. Replaced by MotorCAD.save_script().\nSaveScript\nMotorCAD.save_script()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveScript",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveScript.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveScript",
        "title": "SaveScript > SaveScript > SaveScript",
        "section": "SaveScript > SaveScript",
        "text": "MotorCADCompatibility.SaveScript(*args)\n\nDeprecated function. Replaced by MotorCAD.save_script().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddMagnetRegion_XY",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddMagnetRegion_XY.html#addmagnetregion_xy",
        "title": "AddMagnetRegion_XY",
        "section": "AddMagnetRegion_XY",
        "text": "Deprecated function. Replaced by MotorCAD.add_magnet_region_xy().\nAddMagnetRegion_XY\nMotorCAD.add_magnet_region_xy()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddMagnetRegion_XY",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddMagnetRegion_XY.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddMagnetRegion_XY",
        "title": "AddMagnetRegion_XY > AddMagnetRegion_XY > AddMagnetRegion_XY",
        "section": "AddMagnetRegion_XY > AddMagnetRegion_XY",
        "text": "MotorCADCompatibility.AddMagnetRegion_XY(*args)\n\nDeprecated function. Replaced by MotorCAD.add_magnet_region_xy().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_CentreStartEnd_XY",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_CentreStartEnd_XY.html#addarc_centrestartend_xy",
        "title": "AddArc_CentreStartEnd_XY",
        "section": "AddArc_CentreStartEnd_XY",
        "text": "Deprecated function. Replaced by MotorCAD.add_arc_centre_start_end_xy().\nAddArc_CentreStartEnd_XY\nMotorCAD.add_arc_centre_start_end_xy()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_CentreStartEnd_XY",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_CentreStartEnd_XY.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_CentreStartEnd_XY",
        "title": "AddArc_CentreStartEnd_XY > AddArc_CentreStartEnd_XY > AddArc_CentreStartEnd_XY",
        "section": "AddArc_CentreStartEnd_XY > AddArc_CentreStartEnd_XY",
        "text": "MotorCADCompatibility.AddArc_CentreStartEnd_XY(*args)\n\nDeprecated function. Replaced by MotorCAD.add_arc_centre_start_end_xy().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.add_point",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.add_point.html#add_point",
        "title": "add_point",
        "section": "add_point",
        "text": "Add a new point into region on an existing Line/Arc.\nThe point must already exist on a Line/Arc belonging to the region. The entity will be split\nand 2 new entities created.\nCoordinate at which to add new point\nadd_point\nCoordinate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.add_point",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.add_point.html#ansys.motorcad.core.geometry.Region.add_point",
        "title": "add_point > add_point > add_point",
        "section": "add_point > add_point",
        "text": "Region.add_point(point)\n\nAdd a new point into region on an existing Line/Arc.\n\nThe point must already exist on a Line/Arc belonging to the region. The entity will be split\nand 2 new entities created.\n\nParameters\n\npoint\n\nCoordinate\n\nCoordinate at which to add new point\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.round_corners",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.round_corners.html#round_corners",
        "title": "round_corners",
        "section": "round_corners",
        "text": "Round multiple corners of a region.\nEach corner coordinate must already exist on two entities belonging to the region.\nThe two entities adjacent to each corner are shortened, and an arc is created\nbetween them.\nList of coordinates of the corners to round.\nRadius to round the corners by.\nround_corners\npython:list\nof\nansys.motorcad.core.geometry.Coordinate\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.round_corners",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.round_corners.html#ansys.motorcad.core.geometry.Region.round_corners",
        "title": "round_corners > round_corners > round_corners",
        "section": "round_corners > round_corners",
        "text": "Region.round_corners(corner_coordinates, radius)\n\nRound multiple corners of a region.\n\nEach corner coordinate must already exist on two entities belonging to the region.\nThe two entities adjacent to each corner are shortened, and an arc is created\nbetween them.\n\nParameters\n\ncorner_coordinates\n\npython:list of ansys.motorcad.core.geometry.Coordinate\n\nList of coordinates of the corners to round.\n\nradius\n\npython:float\n\nRadius to round the corners by.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.subtract",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.subtract.html#subtract",
        "title": "subtract",
        "section": "subtract",
        "text": "Subtract region from self, returning any additional regions.\nMotor-CAD region object\nlist of Motor-CAD region object\nsubtract\nansys.motorcad.core.geometry.Region\npython:list\nof\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.subtract",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.subtract.html#ansys.motorcad.core.geometry.RegionMagnet.subtract",
        "title": "subtract > subtract > subtract",
        "section": "subtract > subtract",
        "text": "RegionMagnet.subtract(region)\n\nSubtract region from self, returning any additional regions.\n\nParameters\n\nregion\n\nansys.motorcad.core.geometry.Region\n\nMotor-CAD region object\n\nReturns\n\npython:list of ansys.motorcad.core.geometry.Region\n\nlist of Motor-CAD region object\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_wj_duct",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_wj_duct.html#slot_wj_duct",
        "title": "slot_wj_duct",
        "section": "slot_wj_duct",
        "text": "slot_wj_duct"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_wj_duct",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_wj_duct.html#ansys.motorcad.core.geometry.RegionType.slot_wj_duct",
        "title": "slot_wj_duct > slot_wj_duct > slot_wj_duct",
        "section": "slot_wj_duct > slot_wj_duct",
        "text": "RegionType.slot_wj_duct = 'Slot Water Jacket Duct'\n\n"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.check_collisions",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.check_collisions.html#check_collisions",
        "title": "check_collisions",
        "section": "check_collisions",
        "text": "Check region does not collide with other geometry regions.\nMotor-CAD region object.\nlist of Motor-CAD region object\ncheck_collisions\nansys.motorcad.core.geometry.Region\npython:list\nof\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.check_collisions",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.check_collisions.html#ansys.motorcad.core.motorcad_methods.MotorCAD.check_collisions",
        "title": "check_collisions > check_collisions > check_collisions",
        "section": "check_collisions > check_collisions",
        "text": "MotorCAD.check_collisions(region, regions_to_check)\n\nCheck region does not collide with other geometry regions.\n\nParameters\n\nregion\n\nansys.motorcad.core.geometry.Region\n\nMotor-CAD region object.\n\nregions_to_check\n\npython:list of ansys.motorcad.core.geometry.Region\n\nlist of Motor-CAD region object\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.housing_magnetic",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.housing_magnetic.html#housing_magnetic",
        "title": "housing_magnetic",
        "section": "housing_magnetic",
        "text": "housing_magnetic"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.housing_magnetic",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.housing_magnetic.html#ansys.motorcad.core.geometry.RegionType.housing_magnetic",
        "title": "housing_magnetic > housing_magnetic > housing_magnetic",
        "section": "housing_magnetic > housing_magnetic",
        "text": "RegionType.housing_magnetic = 'Magnetic Housing'\n\n"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_power_injection_value",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_power_injection_value.html#set_power_injection_value",
        "title": "set_power_injection_value",
        "section": "set_power_injection_value",
        "text": "Set or create a power injection.\nName of the power injection.\nset_power_injection_value\npython:str\npython:str"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_power_injection_value",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_power_injection_value.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_power_injection_value",
        "title": "set_power_injection_value > set_power_injection_value > set_power_injection_value",
        "section": "set_power_injection_value > set_power_injection_value",
        "text": "MotorCAD.set_power_injection_value(name, node1, value, rpm_ref, rpm_coef, description)\n\nSet or create a power injection.\n\nParameters\n\nname\n\npython:str\n\nName of the power injection.\n\nnode1\n\n\n\nvalue\n\n\n\nrpm_ref\n\n\n\nrpm_coef\n\n\n\ndescription\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.length",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.length.html#length",
        "title": "length",
        "section": "length",
        "text": "Get length of line.\nLength of line\nlength\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.length",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.length.html#ansys.motorcad.core.geometry.Line.length",
        "title": "length > length > length",
        "section": "length > length",
        "text": "property Line.length\n\nGet length of line.\n\nReturns\n\npython:float\n\nLength of line\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddMagnetRegion_RT",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddMagnetRegion_RT.html#addmagnetregion_rt",
        "title": "AddMagnetRegion_RT",
        "section": "AddMagnetRegion_RT",
        "text": "Deprecated function. Replaced by MotorCAD.add_magnet_region_rt().\nAddMagnetRegion_RT\nMotorCAD.add_magnet_region_rt()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddMagnetRegion_RT",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddMagnetRegion_RT.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddMagnetRegion_RT",
        "title": "AddMagnetRegion_RT > AddMagnetRegion_RT > AddMagnetRegion_RT",
        "section": "AddMagnetRegion_RT > AddMagnetRegion_RT",
        "text": "MotorCADCompatibility.AddMagnetRegion_RT(*args)\n\nDeprecated function. Replaced by MotorCAD.add_magnet_region_rt().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.get_arc_intersection",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.get_arc_intersection.html#get_arc_intersection",
        "title": "get_arc_intersection",
        "section": "get_arc_intersection",
        "text": "Get intersection Coordinates of arc with another arc.\nReturns None if intersection not found.\nget_arc_intersection\nansys.motorcad.core.geometry.Arc\npython:list\nof\nCoordinate\npython:None"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.get_arc_intersection",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.get_arc_intersection.html#ansys.motorcad.core.geometry.Arc.get_arc_intersection",
        "title": "get_arc_intersection > get_arc_intersection > get_arc_intersection",
        "section": "get_arc_intersection > get_arc_intersection",
        "text": "Arc.get_arc_intersection(arc)\n\nGet intersection Coordinates of arc with another arc.\n\nReturns None if intersection not found.\n\nParameters\n\narc\n\nansys.motorcad.core.geometry.Arc\n\n\n\nReturns\n\npython:list of Coordinate or python:None\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CreateReport",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CreateReport.html#createreport",
        "title": "CreateReport",
        "section": "CreateReport",
        "text": "Deprecated function. Replaced by MotorCAD.create_report().\nCreateReport\nMotorCAD.create_report()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CreateReport",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CreateReport.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CreateReport",
        "title": "CreateReport > CreateReport > CreateReport",
        "section": "CreateReport > CreateReport",
        "text": "MotorCADCompatibility.CreateReport(*args)\n\nDeprecated function. Replaced by MotorCAD.create_report().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/geometry_drawing",
        "href": "methods/geometry_drawing.html#geometry-drawing",
        "title": "Geometry drawing",
        "section": "Geometry drawing",
        "text": "Geometry drawing functions are used to visualise Motor-CAD\ngeometry objects using PyMotorCAD.\nMore information on Adaptive Templates is available\nin the ref_user_guide under ref_adaptive_templates_UG.\ndraw_objects(objects)\nDraw geometry objects on a plot.\ndraw_objects_debug(objects)\nDraw regions on plot if not being run in Motor-CAD.\nGeometry drawing\ndraw_objects\ndraw_objects_debug"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportFigure_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportFigure_Lab.html#exportfigure_lab",
        "title": "ExportFigure_Lab",
        "section": "ExportFigure_Lab",
        "text": "Deprecated function. Replaced by MotorCAD.export_figure_lab().\nExportFigure_Lab\nMotorCAD.export_figure_lab()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportFigure_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportFigure_Lab.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportFigure_Lab",
        "title": "ExportFigure_Lab > ExportFigure_Lab > ExportFigure_Lab",
        "section": "ExportFigure_Lab > ExportFigure_Lab",
        "text": "MotorCADCompatibility.ExportFigure_Lab(*args)\n\nDeprecated function. Replaced by MotorCAD.export_figure_lab().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetVariable",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetVariable.html#getvariable",
        "title": "GetVariable",
        "section": "GetVariable",
        "text": "Deprecated function. Replaced by MotorCAD.get_variable().\nGetVariable\nMotorCAD.get_variable()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetVariable",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetVariable.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetVariable",
        "title": "GetVariable > GetVariable > GetVariable",
        "section": "GetVariable > GetVariable",
        "text": "MotorCADCompatibility.GetVariable(*args)\n\nDeprecated function. Replaced by MotorCAD.get_variable().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_graph",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_graph.html#get_magnetic_graph",
        "title": "get_magnetic_graph",
        "section": "get_magnetic_graph",
        "text": "Get graph points from a Motor-CAD Magnetic graph.\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\nValue of x coordinates from graph\nValue of y coordinates from graph\nget_magnetic_graph\npython:str\npython:int\npython:list\npython:list"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_graph",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_graph.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_graph",
        "title": "get_magnetic_graph > get_magnetic_graph > get_magnetic_graph",
        "section": "get_magnetic_graph > get_magnetic_graph",
        "text": "MotorCAD.get_magnetic_graph(graph_name)\n\nGet graph points from a Motor-CAD Magnetic graph.\n\nParameters\n\ngraph_name\n\npython:str, python:int\n\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\n\nReturns\n\n\n\n——-\n\n\n\nx_values\n\npython:list\n\nValue of x coordinates from graph\n\ny_values\n\npython:list\n\nValue of y coordinates from graph\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_magnet_parameters",
        "href": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_magnet_parameters.html#calculate_magnet_parameters",
        "title": "calculate_magnet_parameters",
        "section": "calculate_magnet_parameters",
        "text": "Calculate parameters for the nonlinear demagnetization model.\nName of the solid material.\ncalculate_magnet_parameters\npython:str"
    },
    {
        "objectID": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_magnet_parameters",
        "href": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_magnet_parameters.html#ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_magnet_parameters",
        "title": "calculate_magnet_parameters > calculate_magnet_parameters > calculate_magnet_parameters",
        "section": "calculate_magnet_parameters > calculate_magnet_parameters",
        "text": "MotorCAD.calculate_magnet_parameters(material_name)\n\nCalculate parameters for the nonlinear demagnetization model.\n\nParameters\n\nmaterial_name\n\npython:str\n\nName of the solid material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.reset_adaptive_geometry",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.reset_adaptive_geometry.html#reset_adaptive_geometry",
        "title": "reset_adaptive_geometry",
        "section": "reset_adaptive_geometry",
        "text": "Reset geometry to default.\nreset_adaptive_geometry"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.reset_adaptive_geometry",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.reset_adaptive_geometry.html#ansys.motorcad.core.motorcad_methods.MotorCAD.reset_adaptive_geometry",
        "title": "reset_adaptive_geometry > reset_adaptive_geometry > reset_adaptive_geometry",
        "section": "reset_adaptive_geometry > reset_adaptive_geometry",
        "text": "MotorCAD.reset_adaptive_geometry()\n\nReset geometry to default.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.html#line",
        "title": "Line",
        "section": "Line",
        "text": "Python representation of Motor-CAD line entity based upon start and end coordinates.\nStart coordinate.\nEnd coordinate.\nLine.coordinate_on_entity(coordinate)\nGet if a coordinate exists on this line.\nLine.get_arc_intersection(arc)\nGet intersection Coordinates of line with an arc.\nLine.get_coordinate_from_distance(ref_coordinate)\nGet the coordinate at the specified distance along the line from the reference.\nLine.get_coordinate_from_percentage_distance(...)\nGet the coordinate at a fractional distance along the line from the reference coord.\nLine.get_intersection(entity)\nGet intersection Coordinate of entity with another entity.\nLine.get_line_intersection(line)\nGet intersection Coordinate of line with another line.\nLine.mirror(mirror_line)\nMirror line about a line.\nLine.reverse()\nReverse Entity class.\nLine.rotate(centre_point, angle)\nRotate entity around a point for a given angle.\nLine.translate(x, y)\nTranslate Entity by specified x,y distances.\nLine.angle\nGet angle of line vector.\nLine.gradient\nGet gradient of line - A in equation (y = Ax + B).\nLine.is_horizontal\nCheck whether line is horizontal.\nLine.is_vertical\nCheck whether line is vertical.\nLine.length\nGet length of line.\nLine.midpoint\nGet midpoint of Line.\nLine.y_intercept\nGet y intercept of line - B in equation (y = Ax + B).\nLine\nCoordinate\nCoordinate\nLine.coordinate_on_entity\nLine.get_arc_intersection\nLine.get_coordinate_from_distance\nLine.get_coordinate_from_percentage_distance\nLine.get_intersection\nLine.get_line_intersection\nLine.mirror\nLine.reverse\nLine.rotate\nLine.translate\nLine.angle\nLine.gradient\nLine.is_horizontal\nLine.is_vertical\nLine.length\nLine.midpoint\nLine.y_intercept"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.html#ansys.motorcad.core.geometry.Line",
        "title": "Line > Line > Line",
        "section": "Line > Line",
        "text": "class ansys.motorcad.core.geometry.Line(start, end)\n\nPython representation of Motor-CAD line entity based upon start and end coordinates.\n\nParameters\n\nstart\n\nCoordinate\n\nStart coordinate.\n\nend\n\nCoordinate\n\nEnd coordinate.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nLine.coordinate_on_entity(coordinate)\n\nGet if a coordinate exists on this line.\n\nLine.get_arc_intersection(arc)\n\nGet intersection Coordinates of line with an arc.\n\nLine.get_coordinate_from_distance(ref_coordinate)\n\nGet the coordinate at the specified distance along the line from the reference.\n\nLine.get_coordinate_from_percentage_distance(...)\n\nGet the coordinate at a fractional distance along the line from the reference coord.\n\nLine.get_intersection(entity)\n\nGet intersection Coordinate of entity with another entity.\n\nLine.get_line_intersection(line)\n\nGet intersection Coordinate of line with another line.\n\nLine.mirror(mirror_line)\n\nMirror line about a line.\n\nLine.reverse()\n\nReverse Entity class.\n\nLine.rotate(centre_point, angle)\n\nRotate entity around a point for a given angle.\n\nLine.translate(x, y)\n\nTranslate Entity by specified x,y distances.\n\n\n\nAttributes\n\n\n\n\n\n\n\nLine.angle\n\nGet angle of line vector.\n\nLine.gradient\n\nGet gradient of line - A in equation (y = Ax + B).\n\nLine.is_horizontal\n\nCheck whether line is horizontal.\n\nLine.is_vertical\n\nCheck whether line is vertical.\n\nLine.length\n\nGet length of line.\n\nLine.midpoint\n\nGet midpoint of Line.\n\nLine.y_intercept\n\nGet y intercept of line - B in equation (y = Ax + B).\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.cowling",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.cowling.html#cowling",
        "title": "cowling",
        "section": "cowling",
        "text": "cowling"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.cowling",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.cowling.html#ansys.motorcad.core.geometry.RegionType.cowling",
        "title": "cowling > cowling > cowling",
        "section": "cowling > cowling",
        "text": "RegionType.cowling = 'Cowling'\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_copper",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_copper.html#stator_copper",
        "title": "stator_copper",
        "section": "stator_copper",
        "text": "stator_copper"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_copper",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_copper.html#ansys.motorcad.core.geometry.RegionType.stator_copper",
        "title": "stator_copper > stator_copper > stator_copper",
        "section": "stator_copper > stator_copper",
        "text": "RegionType.stator_copper = 'Stator Copper'\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.insert_polyline",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.insert_polyline.html#insert_polyline",
        "title": "insert_polyline",
        "section": "insert_polyline",
        "text": "Insert polyline at given index, polyline can be made up of line/arc entities.\nIndex of which to insert at\nlist of Line or list of Arc\ninsert_polyline\npython:int\nEntityList"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.insert_polyline",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.insert_polyline.html#ansys.motorcad.core.geometry.RegionMagnet.insert_polyline",
        "title": "insert_polyline > insert_polyline > insert_polyline",
        "section": "insert_polyline > insert_polyline",
        "text": "RegionMagnet.insert_polyline(index, polyline)\n\nInsert polyline at given index, polyline can be made up of line/arc entities.\n\nParameters\n\nindex\n\npython:int\n\nIndex of which to insert at\n\npolyline\n\nEntityList\n\nlist of Line or list of Arc\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.material",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.material.html#material",
        "title": "material",
        "section": "material",
        "text": "Get or set region material name.\nmaterial"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.material",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.material.html#ansys.motorcad.core.geometry.RegionMagnet.material",
        "title": "material > material > material",
        "section": "material > material",
        "text": "property RegionMagnet.material\n\nGet or set region material name.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.insert_polyline",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.insert_polyline.html#insert_polyline",
        "title": "insert_polyline",
        "section": "insert_polyline",
        "text": "Insert polyline at given index, polyline can be made up of line/arc entities.\nIndex of which to insert at\nlist of Line or list of Arc\ninsert_polyline\npython:int\nEntityList"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.insert_polyline",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.insert_polyline.html#ansys.motorcad.core.geometry.Region.insert_polyline",
        "title": "insert_polyline > insert_polyline > insert_polyline",
        "section": "insert_polyline > insert_polyline",
        "text": "Region.insert_polyline(index, polyline)\n\nInsert polyline at given index, polyline can be made up of line/arc entities.\n\nParameters\n\nindex\n\npython:int\n\nIndex of which to insert at\n\npolyline\n\nEntityList\n\nlist of Line or list of Arc\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.remove_entity",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.remove_entity.html#remove_entity",
        "title": "remove_entity",
        "section": "remove_entity",
        "text": "Remove the entity from the region.\nLine/arc entity class instance\nremove_entity\nLine\nArc"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.remove_entity",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.remove_entity.html#ansys.motorcad.core.geometry.Region.remove_entity",
        "title": "remove_entity > remove_entity > remove_entity",
        "section": "remove_entity > remove_entity",
        "text": "Region.remove_entity(entity_remove)\n\nRemove the entity from the region.\n\nParameters\n\nentity_remove\n\nLine or Arc\n\nLine/arc entity class instance\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowMessage",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowMessage.html#showmessage",
        "title": "ShowMessage",
        "section": "ShowMessage",
        "text": "Deprecated function. Replaced by MotorCAD.show_message().\nShowMessage\nMotorCAD.show_message()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowMessage",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowMessage.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowMessage",
        "title": "ShowMessage > ShowMessage > ShowMessage",
        "section": "ShowMessage > ShowMessage",
        "text": "MotorCADCompatibility.ShowMessage(*args)\n\nDeprecated function. Replaced by MotorCAD.show_message().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.edit_magnet_region",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.edit_magnet_region.html#edit_magnet_region",
        "title": "edit_magnet_region",
        "section": "edit_magnet_region",
        "text": "Edit a magnet region.\nDeprecated since version 0.6.0: edit_magnet_region will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\nName of the magnet region.\nMagnet material.\nBr angle of the magnet.\nBr multiplier for the magnet.\nedit_magnet_region\npython:str\npython:str\npython:float\npython:float"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.edit_magnet_region",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.edit_magnet_region.html#ansys.motorcad.core.motorcad_methods.MotorCAD.edit_magnet_region",
        "title": "edit_magnet_region > edit_magnet_region > edit_magnet_region",
        "section": "edit_magnet_region > edit_magnet_region",
        "text": "MotorCAD.edit_magnet_region(region_name, magnet_material, br_angle, br_multiplier)\n\nEdit a magnet region.\n\nDeprecated since version 0.6.0: edit_magnet_region will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\nParameters\n\nregion_name\n\npython:str\n\nName of the magnet region.\n\nmagnet_material\n\npython:str\n\nMagnet material.\n\nbr_angle\n\npython:float\n\nBr angle of the magnet.\n\nbr_multiplier\n\npython:float\n\nBr multiplier for the magnet.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.children",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.children.html#children",
        "title": "children",
        "section": "children",
        "text": "Return list of child regions from Motor-CAD.\nlist of Motor-CAD region object\nchildren\npython:list\nof\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.children",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.children.html#ansys.motorcad.core.geometry.RegionMagnet.children",
        "title": "children > children > children",
        "section": "children > children",
        "text": "property RegionMagnet.children\n\nReturn list of child regions from Motor-CAD.\n\nReturns\n\npython:list of ansys.motorcad.core.geometry.Region\n\nlist of Motor-CAD region object\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.save_screen_to_file",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.save_screen_to_file.html#save_screen_to_file",
        "title": "save_screen_to_file",
        "section": "save_screen_to_file",
        "text": "Save the image from a Motor-CAD tab to an image file.\nThis method is only available for select tabs (such as Geometry Radial and Axial tabs).\nName of the screen with the image to save. The name must be in this format:\n\"tabName\". For example, \"Axial\".\nFull path for the image file, including the file name and file extension. The\nextensions supported are BMP, JPG, and PNG.\nsave_screen_to_file\npython:str\n\"tabName\"\n\"Axial\"\npython:str\npathlib.Path"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.save_screen_to_file",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.save_screen_to_file.html#ansys.motorcad.core.motorcad_methods.MotorCAD.save_screen_to_file",
        "title": "save_screen_to_file > save_screen_to_file > save_screen_to_file",
        "section": "save_screen_to_file > save_screen_to_file",
        "text": "MotorCAD.save_screen_to_file(screen_name, file_name)\n\nSave the image from a Motor-CAD tab to an image file.\n\nThis method is only available for select tabs (such as Geometry Radial and Axial tabs).\n\nParameters\n\nscreen_name\n\npython:str\n\nName of the screen with the image to save. The name must be in this format:\n\"tabName\". For example, \"Axial\".\n\nfile_name\n\npython:str or pathlib.Path\n\nFull path for the image file, including the file name and file extension. The\nextensions supported are BMP, JPG, and PNG.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateTestPerformance_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateTestPerformance_Lab.html#calculatetestperformance_lab",
        "title": "CalculateTestPerformance_Lab",
        "section": "CalculateTestPerformance_Lab",
        "text": "Deprecated function. Replaced by MotorCAD.calculate_test_performance_lab().\nCalculateTestPerformance_Lab\nMotorCAD.calculate_test_performance_lab()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateTestPerformance_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateTestPerformance_Lab.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateTestPerformance_Lab",
        "title": "CalculateTestPerformance_Lab > CalculateTestPerformance_Lab > CalculateTestPerformance_Lab",
        "section": "CalculateTestPerformance_Lab > CalculateTestPerformance_Lab",
        "text": "MotorCADCompatibility.CalculateTestPerformance_Lab()\n\nDeprecated function. Replaced by MotorCAD.calculate_test_performance_lab().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodeExists",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodeExists.html#getnodeexists",
        "title": "GetNodeExists",
        "section": "GetNodeExists",
        "text": "Deprecated function. Replaced by MotorCAD.get_node_exists().\nGetNodeExists\nMotorCAD.get_node_exists()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodeExists",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodeExists.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodeExists",
        "title": "GetNodeExists > GetNodeExists > GetNodeExists",
        "section": "GetNodeExists > GetNodeExists",
        "text": "MotorCADCompatibility.GetNodeExists(*args)\n\nDeprecated function. Replaced by MotorCAD.get_node_exists().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.subtract_region",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.subtract_region.html#subtract_region",
        "title": "subtract_region",
        "section": "subtract_region",
        "text": "Subtract Motor-CAD region (region_subtract) from another Motor-CAD region (region).\nMotor-CAD region object\nMotor-CAD region object\nMotor-CAD region objects\nsubtract_region\nansys.motorcad.core.geometry.Region\nansys.motorcad.core.geometry.Region\npython:list\nof\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.subtract_region",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.subtract_region.html#ansys.motorcad.core.motorcad_methods.MotorCAD.subtract_region",
        "title": "subtract_region > subtract_region > subtract_region",
        "section": "subtract_region > subtract_region",
        "text": "MotorCAD.subtract_region(region, region_subtract)\n\nSubtract Motor-CAD region (region_subtract) from another Motor-CAD region (region).\n\nParameters\n\nregion\n\nansys.motorcad.core.geometry.Region\n\nMotor-CAD region object\n\nregion_subtract\n\nansys.motorcad.core.geometry.Region\n\nMotor-CAD region object\n\nReturns\n\npython:list of ansys.motorcad.core.geometry.Region\n\nMotor-CAD region objects\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.translate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.translate.html#translate",
        "title": "translate",
        "section": "translate",
        "text": "Translate Region by specified x,y distances.\nx distance.\ny distance.\ntranslate\npython:float\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.translate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.translate.html#ansys.motorcad.core.geometry.RegionMagnet.translate",
        "title": "translate > translate > translate",
        "section": "translate > translate",
        "text": "RegionMagnet.translate(x, y)\n\nTranslate Region by specified x,y distances.\n\nParameters\n\nx\n\npython:float\n\nx distance.\n\ny\n\npython:float\n\ny distance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFEAPathPoint",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFEAPathPoint.html#setfeapathpoint",
        "title": "SetFEAPathPoint",
        "section": "SetFEAPathPoint",
        "text": "Deprecated function. Replaced by MotorCAD.set_fea_path_point().\nSetFEAPathPoint\nMotorCAD.set_fea_path_point()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFEAPathPoint",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFEAPathPoint.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFEAPathPoint",
        "title": "SetFEAPathPoint > SetFEAPathPoint > SetFEAPathPoint",
        "section": "SetFEAPathPoint > SetFEAPathPoint",
        "text": "MotorCADCompatibility.SetFEAPathPoint(*args)\n\nDeprecated function. Replaced by MotorCAD.set_fea_path_point().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_all_data",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_all_data.html#clear_all_data",
        "title": "clear_all_data",
        "section": "clear_all_data",
        "text": "Clear data and initialize the FEA.\nDeprecated since version 0.6.0: clear_all_data will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\nclear_all_data"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_all_data",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_all_data.html#ansys.motorcad.core.motorcad_methods.MotorCAD.clear_all_data",
        "title": "clear_all_data > clear_all_data > clear_all_data",
        "section": "clear_all_data > clear_all_data",
        "text": "MotorCAD.clear_all_data()\n\nClear data and initialize the FEA.\n\nDeprecated since version 0.6.0: clear_all_data will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetArrayVariable_2d",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetArrayVariable_2d.html#getarrayvariable_2d",
        "title": "GetArrayVariable_2d",
        "section": "GetArrayVariable_2d",
        "text": "Deprecated function. Replaced by MotorCAD.get_array_variable_2d().\nGetArrayVariable_2d\nMotorCAD.get_array_variable_2d()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetArrayVariable_2d",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetArrayVariable_2d.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetArrayVariable_2d",
        "title": "GetArrayVariable_2d > GetArrayVariable_2d > GetArrayVariable_2d",
        "section": "GetArrayVariable_2d > GetArrayVariable_2d",
        "text": "MotorCADCompatibility.GetArrayVariable_2d(*args)\n\nDeprecated function. Replaced by MotorCAD.get_array_variable_2d().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.linked_region",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.linked_region.html#linked_region",
        "title": "linked_region",
        "section": "linked_region",
        "text": "Get or set linked duplication/unite region.\nlinked_region"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.linked_region",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.linked_region.html#ansys.motorcad.core.geometry.RegionMagnet.linked_region",
        "title": "linked_region > linked_region > linked_region",
        "section": "linked_region > linked_region",
        "text": "property RegionMagnet.linked_region\n\nGet or set linked duplication/unite region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.show_thermal_context",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.show_thermal_context.html#show_thermal_context",
        "title": "show_thermal_context",
        "section": "show_thermal_context",
        "text": "Show the thermal context in Motor-CAD.\nshow_thermal_context"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.show_thermal_context",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.show_thermal_context.html#ansys.motorcad.core.motorcad_methods.MotorCAD.show_thermal_context",
        "title": "show_thermal_context > show_thermal_context > show_thermal_context",
        "section": "show_thermal_context > show_thermal_context",
        "text": "MotorCAD.show_thermal_context()\n\nShow the thermal context in Motor-CAD.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.find_entity_from_coordinates",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.find_entity_from_coordinates.html#find_entity_from_coordinates",
        "title": "find_entity_from_coordinates",
        "section": "find_entity_from_coordinates",
        "text": "Search through region to find an entity with start and end coordinates.\nOrder of coordinates does not matter.\nfind_entity_from_coordinates\nLine\nArc\nentity"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.find_entity_from_coordinates",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.find_entity_from_coordinates.html#ansys.motorcad.core.geometry.Region.find_entity_from_coordinates",
        "title": "find_entity_from_coordinates > find_entity_from_coordinates > find_entity_from_coordinates",
        "section": "find_entity_from_coordinates > find_entity_from_coordinates",
        "text": "Region.find_entity_from_coordinates(coordinate_1, coordinate_2)\n\nSearch through region to find an entity with start and end coordinates.\n\nOrder of coordinates does not matter.\n\nParameters\n\ncoordinate_1: ansys.motorcad.core.geometry.Coordinate\n\n\n\ncoordinate_2: ansys.motorcad.core.geometry.Coordinate\n\n\n\nReturns\n\nLine or Arc entity\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#user-guide",
        "title": "User guide",
        "section": "User guide",
        "text": "PyMotorCAD provides Python access to Motor-CAD. The RPC-based ref_MotorCAD_object\nallows you to create a Motor-CAD instance on a local machine or connect to an existing\ninstance on a remote machine over HTTP. Using the many methods available in this API’s\nsingle class, you can create scripts for fully controlling and automating Motor-CAD\nwithout using the GUI.\nAdditionally, Motor-CAD scripts can be used via the internal\nScripting tab within Ansys Motor-CAD or externally.\nUser guide"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#using-pymotorcad-scripts-internally",
        "title": "User guide > Using PyMotorCAD scripts internally",
        "section": "Using PyMotorCAD scripts internally",
        "text": "Motor-CAD is installed with an internal Python interpreter that includes a stable version\nof PyMotorCAD. This Python package is based around the MotorCAD() Python object.\nEach individual MotorCAD() object represents an instance of Motor-CAD.\nFor more information on using PyMotorCAD via the internal Scripting tab in Motor-CAD, see ref_internal_scripting.\nUsing PyMotorCAD scripts internally\nMotorCAD()\nMotorCAD()"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#using-pymotorcad-scripts-externally",
        "title": "User guide > Using PyMotorCAD scripts externally",
        "section": "Using PyMotorCAD scripts externally",
        "text": "PyMotorCAD can be added to any Python installation and used to control Motor-CAD from\nthe command line or via scripts from a Python IDE of your choice.\nFor more information on using PyMotorCAD with an external Python installation, see ref_external_scripting.\nPyMotorCAD can also be used in MATLAB, for information on this, see ref_matlab_scripting.\nUsing PyMotorCAD scripts externally"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#adaptive-templates-scripts",
        "title": "User guide > Adaptive templates scripts",
        "section": "Adaptive templates scripts",
        "text": "PyMotorCAD can be used to define Adaptive Templates Scripts\nfor designing models with geometries that cannot be modelled\nusing the standard Motor-CAD template geometries.\nAdaptive Templates Scripts can be defined using the internal\nGeometry -> Editor -> Adaptive Templates tab,\nand are run whenever the Motor-CAD geometry is created.\nFor more information on Adaptive Templates Scripting, see ref_adaptive_templates_UG.\nAdaptive templates scripts"
    },
    {
        "objectID": "user_guide/index",
        "href": "user_guide/index.html#backwards-compatibility-with-old-scripts",
        "title": "User guide > Backwards compatibility with old scripts",
        "section": "Backwards compatibility with old scripts",
        "text": "Altering old scripts for use with PyMotorCAD is straightforward and allows the user to take advantage of the improvements\noffered by PyMotorCAD over the previous Motor-CAD communication method (ActiveX).\nFor information on converting ActiveX scripts to use PyMotorCAD, see ref_backwards_compatibility.\nBackwards compatibility with old scripts"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.show_mechanical_context",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.show_mechanical_context.html#show_mechanical_context",
        "title": "show_mechanical_context",
        "section": "show_mechanical_context",
        "text": "Show the mechanical context in Motor-CAD.\nshow_mechanical_context"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.show_mechanical_context",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.show_mechanical_context.html#ansys.motorcad.core.motorcad_methods.MotorCAD.show_mechanical_context",
        "title": "show_mechanical_context > show_mechanical_context > show_mechanical_context",
        "section": "show_mechanical_context > show_mechanical_context",
        "text": "MotorCAD.show_mechanical_context()\n\nShow the mechanical context in Motor-CAD.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_air_exc_liner",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_air_exc_liner.html#rotor_air_exc_liner",
        "title": "rotor_air_exc_liner",
        "section": "rotor_air_exc_liner",
        "text": "rotor_air_exc_liner"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_air_exc_liner",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_air_exc_liner.html#ansys.motorcad.core.geometry.RegionType.rotor_air_exc_liner",
        "title": "rotor_air_exc_liner > rotor_air_exc_liner > rotor_air_exc_liner",
        "section": "rotor_air_exc_liner > rotor_air_exc_liner",
        "text": "RegionType.rotor_air_exc_liner = 'Rotor Air (excluding liner area)'\n\n"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_magnet_region_rt",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_magnet_region_rt.html#add_magnet_region_rt",
        "title": "add_magnet_region_rt",
        "section": "add_magnet_region_rt",
        "text": "Add a magnet region to the Motor-CAD geometry with an r, t (polar) coordinate system.\nIf a region already exists, this method overwrites the existing region.\nUse degrees for angles.\nDeprecated since version 0.6.0: add_magnet_region_rt will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\nRegion position for the radial coordinate.\nRegion position for the angular coordinate in degrees.\nName of the region.\nMagnet material.\nMagnet angle in degrees.\nMagnet Br multiplier. The default is 1.\nMagnet polarity, where 0 is north and 1 is south.\nadd_magnet_region_rt\npython:float\npython:float\npython:str\npython:str\npython:float\npython:float\noptional\n1\ninteger\n0\n1"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_magnet_region_rt",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_magnet_region_rt.html#ansys.motorcad.core.motorcad_methods.MotorCAD.add_magnet_region_rt",
        "title": "add_magnet_region_rt > add_magnet_region_rt > add_magnet_region_rt",
        "section": "add_magnet_region_rt > add_magnet_region_rt",
        "text": "MotorCAD.add_magnet_region_rt(radius, theta, region_name, magnet_material, br_angle, br_multiplier, polarity_code)\n\nAdd a magnet region to the Motor-CAD geometry with an r, t (polar) coordinate system.\n\nIf a region already exists, this method overwrites the existing region.\n\nUse degrees for angles.\n\nDeprecated since version 0.6.0: add_magnet_region_rt will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\nParameters\n\nradius\n\npython:float\n\nRegion position for the radial coordinate.\n\ntheta\n\npython:float\n\nRegion position for the angular coordinate in degrees.\n\nregion_name\n\npython:str\n\nName of the region.\n\nmagnet_material\n\npython:str\n\nMagnet material.\n\nbr_angle\n\npython:float\n\nMagnet angle in degrees.\n\nbr_multiplier\n\npython:float, optional\n\nMagnet Br multiplier. The default is 1.\n\npolarity_code\n\ninteger\n\nMagnet polarity, where 0 is north and 1 is south.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_winding_coil",
        "href": "methods/_autosummary_Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_winding_coil.html#set_winding_coil",
        "title": "set_winding_coil",
        "section": "set_winding_coil",
        "text": "Set go and return slots, positions, and turns for the winding coil.\nPosition values for the upper and lower paths of a go slot can\nbe lowercase alphabetic characters, such as \"a\", \"b\",\nand \"c\". Position values for left and right paths of a go\nslot are \"L\" and \"R\".\nPosition values for the upper and lower paths of a return slot can\nbe lowercase alphabetic characters, such as \"a\", \"b\",\nand \"c\". Position values for left and right paths of a return\nslot are \"L\" and \"R\".\nset_winding_coil\npython:int\npython:int\npython:int\npython:int\npython:str\n\"a\"\n\"b\"\n\"c\"\n\"L\"\n\"R\"\npython:int\npython:str\n\"a\"\n\"b\"\n\"c\"\n\"L\"\n\"R\"\npython:int"
    },
    {
        "objectID": "methods/_autosummary_Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_winding_coil",
        "href": "methods/_autosummary_Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_winding_coil.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_winding_coil",
        "title": "set_winding_coil > set_winding_coil > set_winding_coil",
        "section": "set_winding_coil > set_winding_coil",
        "text": "MotorCAD.set_winding_coil(phase, path, coil, go_slot, go_position, return_slot, return_position, turns)\n\nSet go and return slots, positions, and turns for the winding coil.\n\nParameters\n\nphase\n\npython:int\n\n\n\npath\n\npython:int\n\n\n\ncoil\n\npython:int\n\n\n\ngo_slot\n\npython:int\n\n\n\ngo_position\n\npython:str\n\nPosition values for the upper and lower paths of a go slot can\nbe lowercase alphabetic characters, such as \"a\", \"b\",\nand \"c\". Position values for left and right paths of a go\nslot are \"L\" and \"R\".\n\nreturn_slot\n\npython:int\n\n\n\nreturn_position\n\npython:str\n\nPosition values for the upper and lower paths of a return slot can\nbe lowercase alphabetic characters, such as \"a\", \"b\",\nand \"c\". Position values for left and right paths of a return\nslot are \"L\" and \"R\".\n\nturns\n\npython:int\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.save_external_circuit",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.save_external_circuit.html#save_external_circuit",
        "title": "save_external_circuit",
        "section": "save_external_circuit",
        "text": "Save the external circuit to a file.\nsave_external_circuit"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.save_external_circuit",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.save_external_circuit.html#ansys.motorcad.core.motorcad_methods.MotorCAD.save_external_circuit",
        "title": "save_external_circuit > save_external_circuit > save_external_circuit",
        "section": "save_external_circuit > save_external_circuit",
        "text": "MotorCAD.save_external_circuit(circuit_file_name)\n\nSave the external circuit to a file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_winding_pattern",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_winding_pattern.html#save_winding_pattern",
        "title": "save_winding_pattern",
        "section": "save_winding_pattern",
        "text": "Save the winding pattern to a file.\nAbsolute filepath for the file. The default filepath is the\nWindows directory on the C: drive. The filepath must include\nthe name of the file. If the file is to be re-loaded into\nMotor-CAD, the file extension must be TXT. Use the r'filepath'\nsyntax to force Python to ignore special characters.\nsave_winding_pattern\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_winding_pattern",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_winding_pattern.html#ansys.motorcad.core.motorcad_methods.MotorCAD.save_winding_pattern",
        "title": "save_winding_pattern > save_winding_pattern > save_winding_pattern",
        "section": "save_winding_pattern > save_winding_pattern",
        "text": "MotorCAD.save_winding_pattern(file_path)\n\nSave the winding pattern to a file.\n\nParameters\n\nfile_path\n\npython:str\n\nAbsolute filepath for the file. The default filepath is the\nWindows directory on the C: drive. The filepath must include\nthe name of the file. If the file is to be re-loaded into\nMotor-CAD, the file extension must be TXT. Use the r'filepath'\nsyntax to force Python to ignore special characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Internal Scripting/ansys.motorcad.core.motorcad_methods.MotorCAD.run_script",
        "href": "methods/_autosummary_Internal Scripting/ansys.motorcad.core.motorcad_methods.MotorCAD.run_script.html#run_script",
        "title": "run_script",
        "section": "run_script",
        "text": "Run the script file in Motor-CAD’s internal scripting.\nrun_script"
    },
    {
        "objectID": "methods/_autosummary_Internal Scripting/ansys.motorcad.core.motorcad_methods.MotorCAD.run_script",
        "href": "methods/_autosummary_Internal Scripting/ansys.motorcad.core.motorcad_methods.MotorCAD.run_script.html#ansys.motorcad.core.motorcad_methods.MotorCAD.run_script",
        "title": "run_script > run_script > run_script",
        "section": "run_script > run_script",
        "text": "MotorCAD.run_script()\n\nRun the script file in Motor-CAD’s internal scripting.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/links/thermal_twinbuilder",
        "href": "examples/links/thermal_twinbuilder.html#motor-cad-thermal-twin-builder-rom",
        "title": "Motor-CAD Thermal Twin Builder ROM",
        "section": "Motor-CAD Thermal Twin Builder ROM",
        "text": "This example shows how to create the files needed to generate a Motor-CAD Thermal model using the\nTwin Builder Motor-CAD ROM component.\nMotor-CAD Thermal Twin Builder ROM"
    },
    {
        "objectID": "examples/links/thermal_twinbuilder",
        "href": "examples/links/thermal_twinbuilder.html#background",
        "title": "Motor-CAD Thermal Twin Builder ROM > Background",
        "section": "Background",
        "text": "The Twin Builder Motor-CAD ROM component is available in Twin Builder 2024 R2 or\nlater.\nMotor-CAD creates a thermal model of the motor using a Lumped Parameter Thermal Network (LPTN),\nwhich allows the machine temperatures to be calculated. This LPTN thermal model can be formulated\nas a set of thermal matrices. Motor-CAD provides the capability to export these, allowing the\nthermal model to be imported into other engineering software packages. In general, the exported\nmodel is accurate at a single speed, housing temperature, and airgap temperature (“operating\npoint”).\nIn Twin Builder 2024 R2 and later, a Motor-CAD ROM component can be created which extends upon\nthis idea, allowing for the creation of a Motor-CAD thermal model that is valid at a range of\noperating points. It does this by utilizing data exported from several discrete operating points\nto generate the component, and then automatically interpolating between these during a solve. The\ncomponent also solves the coolant flow model, ensuring accuracy for Motor-CAD models with cooling\nsystems enabled.\nThe Motor-CAD ROM component is quick to set up and provides a significantly more accurate model\ncompared to the single operating point export. It has a user friendly interface with losses and\nRPM as input pins, and component temperatures as output pins. Once generated, the component is\nstandalone (does not require Motor-CAD), thus allowing it to be shared/used in alternate systems\nwhilst obscuring the underlying Motor-CAD geometry.\nBackground"
    },
    {
        "objectID": "examples/links/thermal_twinbuilder",
        "href": "examples/links/thermal_twinbuilder.html#data-required-to-generate-a-motor-cad-rom-component",
        "title": "Motor-CAD Thermal Twin Builder ROM > Data required to generate a Motor-CAD ROM component",
        "section": "Data required to generate a Motor-CAD ROM component",
        "text": "To generate the component, within Ansys Electronics Desktop, go to the menu bar and select Twin\nBuilder > Add Component > Add Motor-CAD ROM Component…. This will present the\nfollowing window:\nThe Input Files must point to the folder which contains the Motor-CAD data at the appropriate\noperating points of interest, formatted in the appropriate manner. The script below is an example\nshowing how this can be done.\nThis script demonstrates how to obtain the data needed to generate a\nMotor-CAD ROM component, as well as how to generate the component in Twin Builder.\nFor details on how the resulting Motor-CAD ROM component can be used, please\nconsult the Twin Builder Help Manual.\nThis script is designed to be run using Motor-CAD template “e8”. For other models,\nmodification of this script may be required.\nData required to generate a Motor-CAD ROM component"
    },
    {
        "objectID": "examples/links/thermal_twinbuilder",
        "href": "examples/links/thermal_twinbuilder.html#perform-required-imports",
        "title": "Motor-CAD Thermal Twin Builder ROM > Perform required imports",
        "section": "Perform required imports",
        "text": "Perform required imports"
    },
    {
        "objectID": "examples/links/thermal_twinbuilder",
        "href": "examples/links/thermal_twinbuilder.html#define-the-required-class",
        "title": "Motor-CAD Thermal Twin Builder ROM > Define the required Class",
        "section": "Define the required Class",
        "text": "A MotorCADTwinModel class has been created to encapsulate the required logic. The resulting\nobject contains the data and functions to export the required Motor-CAD in the appropriate format.\nA summary of the operations performed is as follows:\nThe Motor-CAD model calculation settings are configured\nThe thermal node numbers, node names and other required node data is determined\nThe cooling system nodes and flow path are identified and saved to the CoolingSystems.csv\nfile\nFor each desired speed, the thermal model is solved and thermal matrices exported and saved to\nthe dpxxxxxx folders\nThe distribution of the losses onto the individual nodes is determined and saved to the\nLossDistribution.csv file\nNatural convection cooling of the Housing is characterized and saved to the\nHousingTempDependency folder\nTemperature dependent Airgap heat transfer is characterized and saved to the\nAirGapTempDependency folder\nDefine the required Class\nMotorCADTwinModel\nCoolingSystems.csv\ndpxxxxxx\nLossDistribution.csv\nHousingTempDependency\nAirGapTempDependency"
    },
    {
        "objectID": "examples/links/thermal_twinbuilder",
        "href": "examples/links/thermal_twinbuilder.html#example-use-case",
        "title": "Motor-CAD Thermal Twin Builder ROM > Example use case",
        "section": "Example use case",
        "text": "Below is an example of how the above MotorCADTwinModel class can be used using the\ne8_eMobility template .mot file.\nThe generateTwinData method accepts as an optional parameter a dictionary of Housing and\nAmbient temperatures to be investigated. This can be provided if Natural Convection cooling of the\nhousing should be modelled in the Twin Builder Motor-CAD ROM component. For this example, a\nfunction has been defined to return this dictionary. As can be seen in the code comments, more\ndata points are calculated when the housing and ambient temperatures are close together, as this\nis where the natural convection heat transfer coefficients vary the most.\nSpecify the input .mot file and the directory to save the output data to.\nCreate the e8 input file if it does not exist already.\nChoose the speed points that the model should be solved at. The generated Motor-CAD ROM\ncomponent will interpolate between these, so it is important to cover the complete speed range\nwith the appropriate sampling in order to maintain accuracy. Three points have been chosen here to\nreduce calculation time, but in real use it is recommended that this be greater.\nSpecify the airgap temperatures to investigate, in order for the temperature dependent nature\nof the airgap heat transfer to be included in the Motor-CAD ROM component. The generated\nMotor-CAD ROM component will interpolate between these, so it is important to cover the complete\nexpected airgap temperature range with the appropriate sampling in order to maintain accuracy.\nThis parameter can be set to None should this not be required.\nSpecify the housing and ambient temperatures to investigate, in order for the natural\nconvection cooling of the housing to be be included in the Motor-CAD ROM component. The\ngenerated Motor-CAD ROM component will interpolate between these, so it is important to cover\nthe complete expected housing and ambient temperature range with the appropriate sampling in order\nto maintain accuracy. This parameter can be set to None should this not be required.\nSpecify the cooling systems for which input dependencies need to be taken into account.\nFor each cooling system involved, define the parameters values to sweep to extract the\ncorresponding training data.\nCreate a MotorCADTwinModel object, passing as arguments the path to the input .mot file as\nwell as the directory to which the results should be saved.\nFinally, generate the required data. This function will write the data to the directory\nspecified above. The identified cooling system node flow path is automatically plotted.\nExample use case\nMotorCADTwinModel\ne8_eMobility\ngenerateTwinData\nNone\nNone\nMotorCADTwinModel"
    },
    {
        "objectID": "examples/links/thermal_twinbuilder",
        "href": "examples/links/thermal_twinbuilder.html#generating-the-motor-cad-rom-component",
        "title": "Motor-CAD Thermal Twin Builder ROM > Generating the Motor-CAD ROM component",
        "section": "Generating the Motor-CAD ROM component",
        "text": "To generate the component, within Ansys Electronics Desktop, go to the menu bar and select Twin\nBuilder > Add Component > Add Motor-CAD ROM Component…. Under Input Files, press\nthe ... icon and choose the outputDir as specified in the previous step. Then press the\nGenerate button.\nShould the generation be successful, the Log will indicate that the SML model has been written\nand the Select Interfaces table will be populated.\nThe resulting Motor-CAD ROM component will then be available to use.\nFor informtation on how to use the Motor-CAD ROM component, please consult the\nTwin Builder Help Manual.\nTotal running time of the script: (16 minutes 9.939 seconds)\nDownload Jupyter notebook: thermal_twinbuilder.ipynb\nDownload Python source code: thermal_twinbuilder.py\nDownload zipped: thermal_twinbuilder.zip\nGallery generated by Sphinx-Gallery\nGenerating the Motor-CAD ROM component\n...\noutputDir\nDownload Jupyter notebook: thermal_twinbuilder.ipynb\nDownload Python source code: thermal_twinbuilder.py\nDownload zipped: thermal_twinbuilder.zip"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.get_arc_intersection",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.get_arc_intersection.html#get_arc_intersection",
        "title": "get_arc_intersection",
        "section": "get_arc_intersection",
        "text": "Get intersection Coordinates of line with an arc.\nReturns None if intersection not found.\nget_arc_intersection\nansys.motorcad.core.geometry.Arc\nansys.motorcad.core.geometry.Coordinate\npython:list\nof\nCoordinate\npython:None"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.get_arc_intersection",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.get_arc_intersection.html#ansys.motorcad.core.geometry.Line.get_arc_intersection",
        "title": "get_arc_intersection > get_arc_intersection > get_arc_intersection",
        "section": "get_arc_intersection > get_arc_intersection",
        "text": "Line.get_arc_intersection(arc)\n\nGet intersection Coordinates of line with an arc.\n\nReturns None if intersection not found.\n\nParameters\n\narc\n\nansys.motorcad.core.geometry.Arc\n\n\n\nReturns\n\nansys.motorcad.core.geometry.Coordinate or python:list of Coordinate or python:None\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.html#entity",
        "title": "Entity",
        "section": "Entity",
        "text": "Generic parent class for geometric entities based upon a start and end coordinate.\nStart coordinate.\nEnd coordinate.\nEntity.get_intersection(entity)\nGet intersection Coordinate of entity with another entity.\nEntity.mirror(mirror_line)\nMirror entity about a line.\nEntity.reverse()\nReverse Entity class.\nEntity.rotate(centre_point, angle)\nRotate entity around a point for a given angle.\nEntity.translate(x, y)\nTranslate Entity by specified x,y distances.\nEntity\nCoordinate\nCoordinate\nEntity.get_intersection\nEntity.mirror\nEntity.reverse\nEntity.rotate\nEntity.translate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Entity.html#ansys.motorcad.core.geometry.Entity",
        "title": "Entity > Entity > Entity",
        "section": "Entity > Entity",
        "text": "class ansys.motorcad.core.geometry.Entity(start, end)\n\nGeneric parent class for geometric entities based upon a start and end coordinate.\n\nParameters\n\nstart\n\nCoordinate\n\nStart coordinate.\n\nend\n\nCoordinate\n\nEnd coordinate.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nEntity.get_intersection(entity)\n\nGet intersection Coordinate of entity with another entity.\n\nEntity.mirror(mirror_line)\n\nMirror entity about a line.\n\nEntity.reverse()\n\nReverse Entity class.\n\nEntity.rotate(centre_point, angle)\n\nRotate entity around a point for a given angle.\n\nEntity.translate(x, y)\n\nTranslate Entity by specified x,y distances.\n\n"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.load_adaptive_script",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.load_adaptive_script.html#load_adaptive_script",
        "title": "load_adaptive_script",
        "section": "load_adaptive_script",
        "text": "Load adaptive templates script file to Motor-CAD.\nfull file path of script\nload_adaptive_script\npython:str\npathlib.Path"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.load_adaptive_script",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.load_adaptive_script.html#ansys.motorcad.core.motorcad_methods.MotorCAD.load_adaptive_script",
        "title": "load_adaptive_script > load_adaptive_script > load_adaptive_script",
        "section": "load_adaptive_script > load_adaptive_script",
        "text": "MotorCAD.load_adaptive_script(filepath)\n\nLoad adaptive templates script file to Motor-CAD.\n\nParameters\n\nfilepath\n\npython:str or pathlib.Path\n\nfull file path of script\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/MotorCADCompatibility_object",
        "href": "methods/MotorCADCompatibility_object.html#motorcadcompatibility-api",
        "title": "MotorCADCompatibility API",
        "section": "MotorCADCompatibility API",
        "text": "MotorCADCompatibility([port, ...])\nCreate a MotorCAD object that behaves the same as old ActiveX methods.\nMotorCADCompatibility API\nMotorCADCompatibility"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_graph_harmonics",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_graph_harmonics.html#get_magnetic_graph_harmonics",
        "title": "get_magnetic_graph_harmonics",
        "section": "get_magnetic_graph_harmonics",
        "text": "Get harmonic analysis from Motor-CAD magnetic graph.\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\nValue of harmonic orders from graph\nValue of harmonic amplitudes from graph\nValue of harmonic angles from graph in degrees\nget_magnetic_graph_harmonics\npython:str\npython:int\npython:list\npython:list\npython:list"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_graph_harmonics",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_graph_harmonics.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_magnetic_graph_harmonics",
        "title": "get_magnetic_graph_harmonics > get_magnetic_graph_harmonics > get_magnetic_graph_harmonics",
        "section": "get_magnetic_graph_harmonics > get_magnetic_graph_harmonics",
        "text": "MotorCAD.get_magnetic_graph_harmonics(graph_name)\n\nGet harmonic analysis from Motor-CAD magnetic graph.\n\nParameters\n\ngraph_name\n\npython:str, python:int\n\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\n\nReturns\n\n\n\n——-\n\n\n\norder_values\n\npython:list\n\nValue of harmonic orders from graph\n\namplitude_values\n\npython:list\n\nValue of harmonic amplitudes from graph\n\nangle_values\n\npython:list\n\nValue of harmonic angles from graph in degrees\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.colour",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.colour.html#colour",
        "title": "colour",
        "section": "colour",
        "text": "Get or set region colour.\ncolour"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.colour",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.colour.html#ansys.motorcad.core.geometry.Region.colour",
        "title": "colour > colour > colour",
        "section": "colour > colour",
        "text": "property Region.colour\n\nGet or set region colour.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.create_new_node",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.create_new_node.html#create_new_node",
        "title": "create_new_node",
        "section": "create_new_node",
        "text": "Create a node.\ncreate_new_node"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.create_new_node",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.create_new_node.html#ansys.motorcad.core.motorcad_methods.MotorCAD.create_new_node",
        "title": "create_new_node > create_new_node > create_new_node",
        "section": "create_new_node > create_new_node",
        "text": "MotorCAD.create_new_node(name, node1, row, column, colour, description)\n\nCreate a node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_torque_envelope",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_torque_envelope.html#calculate_torque_envelope",
        "title": "calculate_torque_envelope",
        "section": "calculate_torque_envelope",
        "text": "Calculate the torque envelope for the machine.\ncalculate_torque_envelope"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_torque_envelope",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_torque_envelope.html#ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_torque_envelope",
        "title": "calculate_torque_envelope > calculate_torque_envelope > calculate_torque_envelope",
        "section": "calculate_torque_envelope > calculate_torque_envelope",
        "text": "MotorCAD.calculate_torque_envelope()\n\nCalculate the torque envelope for the machine.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_force_harmonics_temporal",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_force_harmonics_temporal.html#calculate_force_harmonics_temporal",
        "title": "calculate_force_harmonics_temporal",
        "section": "calculate_force_harmonics_temporal",
        "text": "Calculate 1D force harmonics on the time axis.\ncalculate_force_harmonics_temporal"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_force_harmonics_temporal",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_force_harmonics_temporal.html#ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_force_harmonics_temporal",
        "title": "calculate_force_harmonics_temporal > calculate_force_harmonics_temporal > calculate_force_harmonics_temporal",
        "section": "calculate_force_harmonics_temporal > calculate_force_harmonics_temporal",
        "text": "MotorCAD.calculate_force_harmonics_temporal()\n\nCalculate 1D force harmonics on the time axis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.motorcad_instance",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.motorcad_instance.html#motorcad_instance",
        "title": "motorcad_instance",
        "section": "motorcad_instance",
        "text": "Get or set the linked Motor-CAD instance.\nmotorcad_instance"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.motorcad_instance",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.motorcad_instance.html#ansys.motorcad.core.geometry.RegionMagnet.motorcad_instance",
        "title": "motorcad_instance > motorcad_instance > motorcad_instance",
        "section": "motorcad_instance > motorcad_instance",
        "text": "property RegionMagnet.motorcad_instance\n\nGet or set the linked Motor-CAD instance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowThermalContext",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowThermalContext.html#showthermalcontext",
        "title": "ShowThermalContext",
        "section": "ShowThermalContext",
        "text": "Deprecated function. Replaced by MotorCAD.show_thermal_context().\nShowThermalContext\nMotorCAD.show_thermal_context()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowThermalContext",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowThermalContext.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ShowThermalContext",
        "title": "ShowThermalContext > ShowThermalContext > ShowThermalContext",
        "section": "ShowThermalContext > ShowThermalContext",
        "text": "MotorCADCompatibility.ShowThermalContext()\n\nDeprecated function. Replaced by MotorCAD.show_thermal_context().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_adaptive_parameter_default",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_adaptive_parameter_default.html#set_adaptive_parameter_default",
        "title": "set_adaptive_parameter_default",
        "section": "set_adaptive_parameter_default",
        "text": "Set default value for an adaptive parameter, if the parameter does not already exist.\nname of parameter.\nvalue of parameter.\nset_adaptive_parameter_default\npython:str\npython:float"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_adaptive_parameter_default",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_adaptive_parameter_default.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_adaptive_parameter_default",
        "title": "set_adaptive_parameter_default > set_adaptive_parameter_default > set_adaptive_parameter_default",
        "section": "set_adaptive_parameter_default > set_adaptive_parameter_default",
        "text": "MotorCAD.set_adaptive_parameter_default(name, value)\n\nSet default value for an adaptive parameter, if the parameter does not already exist.\n\nParameters\n\nname\n\npython:str\n\nname of parameter.\n\nvalue\n\npython:float\n\nvalue of parameter.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.region_coordinate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.region_coordinate.html#region_coordinate",
        "title": "region_coordinate",
        "section": "region_coordinate",
        "text": "Get the reference coordinate within the region.\nregion_coordinate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.region_coordinate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.region_coordinate.html#ansys.motorcad.core.geometry.RegionMagnet.region_coordinate",
        "title": "region_coordinate > region_coordinate > region_coordinate",
        "section": "region_coordinate > region_coordinate",
        "text": "property RegionMagnet.region_coordinate\n\nGet the reference coordinate within the region.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.dxf_import",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.dxf_import.html#dxf_import",
        "title": "dxf_import",
        "section": "dxf_import",
        "text": "dxf_import"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.dxf_import",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.dxf_import.html#ansys.motorcad.core.geometry.RegionType.dxf_import",
        "title": "dxf_import > dxf_import > dxf_import",
        "section": "dxf_import > dxf_import",
        "text": "RegionType.dxf_import = 'DXF Import'\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetComponentMaterial",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetComponentMaterial.html#setcomponentmaterial",
        "title": "SetComponentMaterial",
        "section": "SetComponentMaterial",
        "text": "Deprecated function. Replaced by MotorCAD.set_component_material().\nSetComponentMaterial\nMotorCAD.set_component_material()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetComponentMaterial",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetComponentMaterial.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetComponentMaterial",
        "title": "SetComponentMaterial > SetComponentMaterial > SetComponentMaterial",
        "section": "SetComponentMaterial > SetComponentMaterial",
        "text": "MotorCADCompatibility.SetComponentMaterial(*args)\n\nDeprecated function. Replaced by MotorCAD.set_component_material().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/geometry_functions",
        "href": "methods/geometry_functions.html#geometry-objects-and-functions",
        "title": "Geometry objects and functions",
        "section": "Geometry objects and functions",
        "text": "Geometry functions are used to define and modify\nthe Motor-CAD Adaptive Templates geometry using PyMotorCAD.\nMore information on Adaptive Templates is available\nin the ref_user_guide under ref_adaptive_templates_UG.\nGeometry objects and functions"
    },
    {
        "objectID": "methods/geometry_functions",
        "href": "methods/geometry_functions.html#geometry-objects",
        "title": "Geometry objects and functions > Geometry objects",
        "section": "Geometry objects",
        "text": "Region([motorcad_instance])\nPython representation of Motor-CAD geometry region.\nRegionMagnet([motorcad_instance])\nProvides the Python representation of a Motor-CAD magnet geometry region.\nRegionType(value)\nProvides an enumeration for storing Motor-CAD region types.\nCoordinate(x, y)\nProvides the Python representation of a coordinate in two-dimensional space.\nEntity(start, end)\nGeneric parent class for geometric entities based upon a start and end coordinate.\nEntityList([iterable])\nGeneric class for list of Entities.\nLine(start, end)\nPython representation of Motor-CAD line entity based upon start and end coordinates.\nArc(start, end[, centre, radius])\nPython representation of Motor-CAD arc entity based upon start, end, (centre or radius).\nGeometry objects\nRegion\nRegionMagnet\nRegionType\nCoordinate\nEntity\nEntityList\nLine\nArc"
    },
    {
        "objectID": "methods/geometry_functions",
        "href": "methods/geometry_functions.html#geometry-functions",
        "title": "Geometry objects and functions > Geometry functions",
        "section": "Geometry functions",
        "text": "get_entities_have_common_coordinate(...)\nCheck whether region entities create a closed region.\nxy_to_rt(x, y)\nConvert Motor-CAD Cartesian coordinates to polar coordinates in degrees.\nrt_to_xy(radius, theta)\nConvert Motor-CAD polar coordinates to Cartesian coordinates in degrees.\nGeometry functions\nget_entities_have_common_coordinate\nxy_to_rt\nrt_to_xy"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_centre_start_end_xy",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_centre_start_end_xy.html#add_arc_centre_start_end_xy",
        "title": "add_arc_centre_start_end_xy",
        "section": "add_arc_centre_start_end_xy",
        "text": "Add an arc to the Motor-CAD axial geometry with an r, t (polar) coordinate system.\nThis method uses start, end, and center coordinates. Use degrees for angles.\nDeprecated since version 0.6.0: add_arc_centre_start_end_xy will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\nCenter position for the x coordinate.\nCenter position for the y coordinate.\nStart position for the x coordinate.\nStart position for the y coordinate.\nEnd position for the x coordinate.\nEnd position for the y coordinate.\nadd_arc_centre_start_end_xy\npython:float\npython:float\npython:float\npython:float\npython:float\npython:float"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_centre_start_end_xy",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_centre_start_end_xy.html#ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_centre_start_end_xy",
        "title": "add_arc_centre_start_end_xy > add_arc_centre_start_end_xy > add_arc_centre_start_end_xy",
        "section": "add_arc_centre_start_end_xy > add_arc_centre_start_end_xy",
        "text": "MotorCAD.add_arc_centre_start_end_xy(x_centre, y_centre, x_start, y_start, x_end, y_end)\n\nAdd an arc to the Motor-CAD axial geometry with an r, t (polar) coordinate system.\n\nThis method uses start, end, and center coordinates. Use degrees for angles.\n\nDeprecated since version 0.6.0: add_arc_centre_start_end_xy will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\nParameters\n\nx_centre\n\npython:float\n\nCenter position for the x coordinate.\n\ny_centre\n\npython:float\n\nCenter position for the y coordinate.\n\nx_start\n\npython:float\n\nStart position for the x coordinate.\n\ny_start\n\npython:float\n\nStart position for the y coordinate.\n\nx_end\n\npython:float\n\nEnd position for the x coordinate.\n\ny_end\n\npython:float\n\nEnd position for the y coordinate.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportToAnsysDiscovery",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportToAnsysDiscovery.html#exporttoansysdiscovery",
        "title": "ExportToAnsysDiscovery",
        "section": "ExportToAnsysDiscovery",
        "text": "Deprecated function. Replaced by MotorCAD.export_to_ansys_discovery().\nExportToAnsysDiscovery\nMotorCAD.export_to_ansys_discovery()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportToAnsysDiscovery",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportToAnsysDiscovery.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportToAnsysDiscovery",
        "title": "ExportToAnsysDiscovery > ExportToAnsysDiscovery > ExportToAnsysDiscovery",
        "section": "ExportToAnsysDiscovery > ExportToAnsysDiscovery",
        "text": "MotorCADCompatibility.ExportToAnsysDiscovery(*args)\n\nDeprecated function. Replaced by MotorCAD.export_to_ansys_discovery().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/internal_scripting/sg_execution_times",
        "href": "examples/internal_scripting/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "05:06.287 total execution time for 5 files from examplesinternal_scripting:\nExample\nTime\nMem (MB)\nsphx_glr_examples_internal_scripting_mechanical_force.py (mechanical_force.py)\n02:09.440\n0.0\nsphx_glr_examples_internal_scripting_thermal_transient.py (thermal_transient.py)\n01:42.377\n0.0\nsphx_glr_examples_internal_scripting_thermal_steady_state.py (thermal_steady_state.py)\n00:27.875\n0.0\nsphx_glr_examples_internal_scripting_emag.py (emag.py)\n00:26.079\n0.0\nsphx_glr_examples_internal_scripting_mechanical_stress.py (mechanical_stress.py)\n00:20.516\n0.0\nComputation times\nmechanical_force.py\nthermal_transient.py\nthermal_steady_state.py\nemag.py\nmechanical_stress.py"
    },
    {
        "objectID": "methods/_autosummary_geometry_shapes/ansys.motorcad.core.geometry_shapes.eq_triangle_h",
        "href": "methods/_autosummary_geometry_shapes/ansys.motorcad.core.geometry_shapes.eq_triangle_h.html#eq_triangle_h",
        "title": "eq_triangle_h",
        "section": "eq_triangle_h",
        "text": "Create an equilateral triangle of given height at a given set of coordinates.\nHeight value.\nRadial coordinate of the triangle centre.\nAngular coordinate of the triangle centre.\nRegion type with three Line entity types.\neq_triangle_h\npython:float\npython:float\npython:float\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_geometry_shapes/ansys.motorcad.core.geometry_shapes.eq_triangle_h",
        "href": "methods/_autosummary_geometry_shapes/ansys.motorcad.core.geometry_shapes.eq_triangle_h.html#ansys.motorcad.core.geometry_shapes.eq_triangle_h",
        "title": "eq_triangle_h > eq_triangle_h > eq_triangle_h",
        "section": "eq_triangle_h > eq_triangle_h",
        "text": "ansys.motorcad.core.geometry_shapes.eq_triangle_h(height, r_O, th_O)\n\nCreate an equilateral triangle of given height at a given set of coordinates.\n\nParameters\n\nheight\n\npython:float\n\nHeight value.\n\nr_O\n\npython:float\n\nRadial coordinate of the triangle centre.\n\nth_O\n\npython:float\n\nAngular coordinate of the triangle centre.\n\nReturns\n\nthis_triangle\n\nansys.motorcad.core.geometry.Region\n\nRegion type with three Line entity types.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_air",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_air.html#stator_air",
        "title": "stator_air",
        "section": "stator_air",
        "text": "stator_air"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_air",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_air.html#ansys.motorcad.core.geometry.RegionType.stator_air",
        "title": "stator_air > stator_air > stator_air",
        "section": "stator_air > stator_air",
        "text": "RegionType.stator_air = 'Stator Air'\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.RunScript",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.RunScript.html#runscript",
        "title": "RunScript",
        "section": "RunScript",
        "text": "Deprecated function. Replaced by MotorCAD.run_script().\nRunScript\nMotorCAD.run_script()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.RunScript",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.RunScript.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.RunScript",
        "title": "RunScript > RunScript > RunScript",
        "section": "RunScript > RunScript",
        "text": "MotorCADCompatibility.RunScript()\n\nDeprecated function. Replaced by MotorCAD.run_script().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_XY",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_XY.html#addpoint_xy",
        "title": "AddPoint_XY",
        "section": "AddPoint_XY",
        "text": "Deprecated function.\nAddPoint_XY"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_XY",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_XY.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddPoint_XY",
        "title": "AddPoint_XY > AddPoint_XY > AddPoint_XY",
        "section": "AddPoint_XY > AddPoint_XY",
        "text": "MotorCADCompatibility.AddPoint_XY(*args)\n\nDeprecated function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ImportSolidMaterial",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ImportSolidMaterial.html#importsolidmaterial",
        "title": "ImportSolidMaterial",
        "section": "ImportSolidMaterial",
        "text": "Deprecated function. Replaced by MotorCAD.import_solid_material().\nImportSolidMaterial\nMotorCAD.import_solid_material()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ImportSolidMaterial",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ImportSolidMaterial.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ImportSolidMaterial",
        "title": "ImportSolidMaterial > ImportSolidMaterial > ImportSolidMaterial",
        "section": "ImportSolidMaterial > ImportSolidMaterial",
        "text": "MotorCADCompatibility.ImportSolidMaterial(*args)\n\nDeprecated function. Replaced by MotorCAD.import_solid_material().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.save_iron_loss_coefficients",
        "href": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.save_iron_loss_coefficients.html#save_iron_loss_coefficients",
        "title": "save_iron_loss_coefficients",
        "section": "save_iron_loss_coefficients",
        "text": "Save the calculated iron loss coefficients to the materials database.\nName of the solid material.\nsave_iron_loss_coefficients\npython:str"
    },
    {
        "objectID": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.save_iron_loss_coefficients",
        "href": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.save_iron_loss_coefficients.html#ansys.motorcad.core.motorcad_methods.MotorCAD.save_iron_loss_coefficients",
        "title": "save_iron_loss_coefficients > save_iron_loss_coefficients > save_iron_loss_coefficients",
        "section": "save_iron_loss_coefficients > save_iron_loss_coefficients",
        "text": "MotorCAD.save_iron_loss_coefficients(material_name)\n\nSave the calculated iron loss coefficients to the materials database.\n\nParameters\n\nmaterial_name\n\npython:str\n\nName of the solid material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.Set3DComponentVisibility",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.Set3DComponentVisibility.html#set3dcomponentvisibility",
        "title": "Set3DComponentVisibility",
        "section": "Set3DComponentVisibility",
        "text": "Deprecated function. Replaced by MotorCAD.set_3d_component_visibility().\nSet3DComponentVisibility\nMotorCAD.set_3d_component_visibility()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.Set3DComponentVisibility",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.Set3DComponentVisibility.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.Set3DComponentVisibility",
        "title": "Set3DComponentVisibility > Set3DComponentVisibility > Set3DComponentVisibility",
        "section": "Set3DComponentVisibility > Set3DComponentVisibility",
        "text": "MotorCADCompatibility.Set3DComponentVisibility(*args)\n\nDeprecated function. Replaced by MotorCAD.set_3d_component_visibility().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_force_animation",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_force_animation.html#export_force_animation",
        "title": "export_force_animation",
        "section": "export_force_animation",
        "text": "Export a force animation to a GIF file.\nAnimation is exported from the caption name. For example,\n\"Radial OL\" or \"Radial OL (12th harmonic)\".\nAnimation name.\nName for the GIF file. Use the r'filepath' syntax\nto force Python to ignore special characters.\nexport_force_animation\n\"Radial OL\"\n\"Radial OL (12th harmonic)\"\npython:str\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_force_animation",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_force_animation.html#ansys.motorcad.core.motorcad_methods.MotorCAD.export_force_animation",
        "title": "export_force_animation > export_force_animation > export_force_animation",
        "section": "export_force_animation > export_force_animation",
        "text": "MotorCAD.export_force_animation(animation, file_name)\n\nExport a force animation to a GIF file.\n\nAnimation is exported from the caption name. For example,\n\"Radial OL\" or \"Radial OL (12th harmonic)\".\n\nParameters\n\nanimation\n\npython:str\n\nAnimation name.\n\nfile_name\n\npython:str\n\nName for the GIF file. Use the r'filepath' syntax\nto force Python to ignore special characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.clear",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.clear.html#clear",
        "title": "clear",
        "section": "clear",
        "text": "Remove all items from list.\nclear"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.clear",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.clear.html#ansys.motorcad.core.geometry.EntityList.clear",
        "title": "clear > clear > clear",
        "section": "clear > clear",
        "text": "EntityList.clear(/)\n\nRemove all items from list.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.adaptive",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.adaptive.html#adaptive",
        "title": "adaptive",
        "section": "adaptive",
        "text": "adaptive"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.adaptive",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.adaptive.html#ansys.motorcad.core.geometry.RegionType.adaptive",
        "title": "adaptive > adaptive > adaptive",
        "section": "adaptive > adaptive",
        "text": "RegionType.adaptive = 'Adaptive Region'\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.mounting_plate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.mounting_plate.html#mounting_plate",
        "title": "mounting_plate",
        "section": "mounting_plate",
        "text": "mounting_plate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.mounting_plate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.mounting_plate.html#ansys.motorcad.core.geometry.RegionType.mounting_plate",
        "title": "mounting_plate > mounting_plate > mounting_plate",
        "section": "mounting_plate > mounting_plate",
        "text": "RegionType.mounting_plate = 'Plate Mount'\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_Boundary_XY",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_Boundary_XY.html#addarc_boundary_xy",
        "title": "AddArc_Boundary_XY",
        "section": "AddArc_Boundary_XY",
        "text": "Deprecated function. Replaced by MotorCAD.add_arc_boundary_xy().\nAddArc_Boundary_XY\nMotorCAD.add_arc_boundary_xy()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_Boundary_XY",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_Boundary_XY.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddArc_Boundary_XY",
        "title": "AddArc_Boundary_XY > AddArc_Boundary_XY > AddArc_Boundary_XY",
        "section": "AddArc_Boundary_XY > AddArc_Boundary_XY",
        "text": "MotorCADCompatibility.AddArc_Boundary_XY(*args)\n\nDeprecated function. Replaced by MotorCAD.add_arc_boundary_xy().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_magnet_region_xy",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_magnet_region_xy.html#add_magnet_region_xy",
        "title": "add_magnet_region_xy",
        "section": "add_magnet_region_xy",
        "text": "Add a magnet region to the Motor-CAD geometry with an x, y coordinate system.\nIf a region already exists, this method overwrites the existing region.\nUse degrees for angles.\nDeprecated since version 0.6.0: add_magnet_region_xy will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\nRegion position for the x coordinate.\nRegion position for the y coordinate.\nName of the region.\nMagnet material.\nMagnet angle in degrees.\nMagnet Br multiplier. The default is 1.\nMagnet polarity, where 0 is north and 1 is south.\nadd_magnet_region_xy\npython:float\npython:float\npython:str\npython:str\npython:float\npython:float\noptional\n1\ninteger\n0\n1"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_magnet_region_xy",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_magnet_region_xy.html#ansys.motorcad.core.motorcad_methods.MotorCAD.add_magnet_region_xy",
        "title": "add_magnet_region_xy > add_magnet_region_xy > add_magnet_region_xy",
        "section": "add_magnet_region_xy > add_magnet_region_xy",
        "text": "MotorCAD.add_magnet_region_xy(x, y, region_name, magnet_material, br_angle, br_multiplier, polarity_code)\n\nAdd a magnet region to the Motor-CAD geometry with an x, y coordinate system.\n\nIf a region already exists, this method overwrites the existing region.\n\nUse degrees for angles.\n\nDeprecated since version 0.6.0: add_magnet_region_xy will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\nParameters\n\nx\n\npython:float\n\nRegion position for the x coordinate.\n\ny\n\npython:float\n\nRegion position for the y coordinate.\n\nregion_name\n\npython:str\n\nName of the region.\n\nmagnet_material\n\npython:str\n\nMagnet material.\n\nbr_angle\n\npython:float\n\nMagnet angle in degrees.\n\nbr_multiplier\n\npython:float, optional\n\nMagnet Br multiplier. The default is 1.\n\npolarity_code\n\ninteger\n\nMagnet polarity, where 0 is north and 1 is south.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearMessageLog",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearMessageLog.html#clearmessagelog",
        "title": "ClearMessageLog",
        "section": "ClearMessageLog",
        "text": "Deprecated function. Replaced by MotorCAD.clear_message_log().\nClearMessageLog\nMotorCAD.clear_message_log()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearMessageLog",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearMessageLog.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearMessageLog",
        "title": "ClearMessageLog > ClearMessageLog > ClearMessageLog",
        "section": "ClearMessageLog > ClearMessageLog",
        "text": "MotorCADCompatibility.ClearMessageLog()\n\nDeprecated function. Replaced by MotorCAD.clear_message_log().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.get_array_variable",
        "href": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.get_array_variable.html#get_array_variable",
        "title": "get_array_variable",
        "section": "get_array_variable",
        "text": "Get a Motor-CAD array variable.\nName of the array.\nPosition variable in the array.\nValue of the Motor-CAD variable\nget_array_variable\npython:str\npython:int"
    },
    {
        "objectID": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.get_array_variable",
        "href": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.get_array_variable.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_array_variable",
        "title": "get_array_variable > get_array_variable > get_array_variable",
        "section": "get_array_variable > get_array_variable",
        "text": "MotorCAD.get_array_variable(array_name, array_index)\n\nGet a Motor-CAD array variable.\n\nParameters\n\narray_name\n\npython:str\n\nName of the array.\n\narray_index\n\npython:int\n\nPosition variable in the array.\n\nReturns\n\nint|float|str|bool\n\nValue of the Motor-CAD variable\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_wj_wall",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_wj_wall.html#slot_wj_wall",
        "title": "slot_wj_wall",
        "section": "slot_wj_wall",
        "text": "slot_wj_wall"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_wj_wall",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.slot_wj_wall.html#ansys.motorcad.core.geometry.RegionType.slot_wj_wall",
        "title": "slot_wj_wall > slot_wj_wall > slot_wj_wall",
        "section": "slot_wj_wall > slot_wj_wall",
        "text": "RegionType.slot_wj_wall = 'Slot Water Jacket Wall'\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetCapacitanceValue",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetCapacitanceValue.html#setcapacitancevalue",
        "title": "SetCapacitanceValue",
        "section": "SetCapacitanceValue",
        "text": "Deprecated function. Replaced by MotorCAD.set_capacitance_value().\nSetCapacitanceValue\nMotorCAD.set_capacitance_value()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetCapacitanceValue",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetCapacitanceValue.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetCapacitanceValue",
        "title": "SetCapacitanceValue > SetCapacitanceValue > SetCapacitanceValue",
        "section": "SetCapacitanceValue > SetCapacitanceValue",
        "text": "MotorCADCompatibility.SetCapacitanceValue(*args)\n\nDeprecated function. Replaced by MotorCAD.set_capacitance_value().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoMagneticThermalCalculation",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoMagneticThermalCalculation.html#domagneticthermalcalculation",
        "title": "DoMagneticThermalCalculation",
        "section": "DoMagneticThermalCalculation",
        "text": "Deprecated function. Replaced by MotorCAD.do_magnetic_thermal_calculation().\nDoMagneticThermalCalculation\nMotorCAD.do_magnetic_thermal_calculation()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoMagneticThermalCalculation",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoMagneticThermalCalculation.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.DoMagneticThermalCalculation",
        "title": "DoMagneticThermalCalculation > DoMagneticThermalCalculation > DoMagneticThermalCalculation",
        "section": "DoMagneticThermalCalculation > DoMagneticThermalCalculation",
        "text": "MotorCADCompatibility.DoMagneticThermalCalculation()\n\nDeprecated function. Replaced by MotorCAD.do_magnetic_thermal_calculation().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetOffsetNodeNumber",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetOffsetNodeNumber.html#getoffsetnodenumber",
        "title": "GetOffsetNodeNumber",
        "section": "GetOffsetNodeNumber",
        "text": "Deprecated function. Replaced by MotorCAD.get_offset_node_number().\nGetOffsetNodeNumber\nMotorCAD.get_offset_node_number()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetOffsetNodeNumber",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetOffsetNodeNumber.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetOffsetNodeNumber",
        "title": "GetOffsetNodeNumber > GetOffsetNodeNumber > GetOffsetNodeNumber",
        "section": "GetOffsetNodeNumber > GetOffsetNodeNumber",
        "text": "MotorCADCompatibility.GetOffsetNodeNumber(*args)\n\nDeprecated function. Replaced by MotorCAD.get_offset_node_number().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.get_variable",
        "href": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.get_variable.html#get_variable",
        "title": "get_variable",
        "section": "get_variable",
        "text": "Get a Motor-CAD variable.\nName of the variable.\nValue of the Motor-CAD variable.\nget_variable\npython:str"
    },
    {
        "objectID": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.get_variable",
        "href": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.get_variable.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_variable",
        "title": "get_variable > get_variable > get_variable",
        "section": "get_variable > get_variable",
        "text": "MotorCAD.get_variable(variable_name)\n\nGet a Motor-CAD variable.\n\nParameters\n\nvariable_name\n\npython:str\n\nName of the variable.\n\nReturns\n\nint|float|str|bool\n\nValue of the Motor-CAD variable.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetMagneticGraphPoint",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetMagneticGraphPoint.html#getmagneticgraphpoint",
        "title": "GetMagneticGraphPoint",
        "section": "GetMagneticGraphPoint",
        "text": "Deprecated function. Replaced by MotorCAD.get_magnetic_graph_point().\nGetMagneticGraphPoint\nMotorCAD.get_magnetic_graph_point()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetMagneticGraphPoint",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetMagneticGraphPoint.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetMagneticGraphPoint",
        "title": "GetMagneticGraphPoint > GetMagneticGraphPoint > GetMagneticGraphPoint",
        "section": "GetMagneticGraphPoint > GetMagneticGraphPoint",
        "text": "MotorCADCompatibility.GetMagneticGraphPoint(*args)\n\nDeprecated function. Replaced by MotorCAD.get_magnetic_graph_point().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetMotorLABContext",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetMotorLABContext.html#setmotorlabcontext",
        "title": "SetMotorLABContext",
        "section": "SetMotorLABContext",
        "text": "Deprecated function. Replaced by MotorCAD.set_motorlab_context().\nSetMotorLABContext\nMotorCAD.set_motorlab_context()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetMotorLABContext",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetMotorLABContext.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetMotorLABContext",
        "title": "SetMotorLABContext > SetMotorLABContext > SetMotorLABContext",
        "section": "SetMotorLABContext > SetMotorLABContext",
        "text": "MotorCADCompatibility.SetMotorLABContext()\n\nDeprecated function. Replaced by MotorCAD.set_motorlab_context().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.set_free",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.set_free.html#set_free",
        "title": "set_free",
        "section": "set_free",
        "text": "Deprecated function. Replaced by MotorCAD.set_free().\nset_free\nMotorCAD.set_free()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.set_free",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.set_free.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.set_free",
        "title": "set_free > set_free > set_free",
        "section": "set_free > set_free",
        "text": "MotorCADCompatibility.set_free()\n\nDeprecated function. Replaced by MotorCAD.set_free().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_pocket",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_pocket.html#rotor_pocket",
        "title": "rotor_pocket",
        "section": "rotor_pocket",
        "text": "rotor_pocket"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_pocket",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_pocket.html#ansys.motorcad.core.geometry.RegionType.rotor_pocket",
        "title": "rotor_pocket > rotor_pocket > rotor_pocket",
        "section": "rotor_pocket > rotor_pocket",
        "text": "RegionType.rotor_pocket = 'Rotor Pocket'\n\n"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_to_node_resistance",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_to_node_resistance.html#get_node_to_node_resistance",
        "title": "get_node_to_node_resistance",
        "section": "get_node_to_node_resistance",
        "text": "Get the node-to-node resistance.\nNumber of the first thermal node.\nNumber of the second thermal node.\nResistance value.\nget_node_to_node_resistance\npython:int\npython:int\npython:float"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_to_node_resistance",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_to_node_resistance.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_to_node_resistance",
        "title": "get_node_to_node_resistance > get_node_to_node_resistance > get_node_to_node_resistance",
        "section": "get_node_to_node_resistance > get_node_to_node_resistance",
        "text": "MotorCAD.get_node_to_node_resistance(node1, node2)\n\nGet the node-to-node resistance.\n\nParameters\n\nnode1\n\npython:int\n\nNumber of the first thermal node.\n\nnode2\n\npython:int\n\nNumber of the second thermal node.\n\nReturns\n\npython:float\n\nResistance value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_heatflow_graph",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_heatflow_graph.html#get_heatflow_graph",
        "title": "get_heatflow_graph",
        "section": "get_heatflow_graph",
        "text": "Get graph points from a Motor-CAD heat flow graph.\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\nvalue of x coordinates from graph\nvalue of y coordinates from graph\nget_heatflow_graph\npython:str\npython:int\npython:list\npython:list"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_heatflow_graph",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_heatflow_graph.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_heatflow_graph",
        "title": "get_heatflow_graph > get_heatflow_graph > get_heatflow_graph",
        "section": "get_heatflow_graph > get_heatflow_graph",
        "text": "MotorCAD.get_heatflow_graph(graph_name)\n\nGet graph points from a Motor-CAD heat flow graph.\n\nParameters\n\ngraph_name\n\npython:str, python:int\n\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\n\nReturns\n\n\n\n——-\n\n\n\nx_values\n\npython:list\n\nvalue of x coordinates from graph\n\ny_values\n\npython:list\n\nvalue of y coordinates from graph\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.export_solid_material",
        "href": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.export_solid_material.html#export_solid_material",
        "title": "export_solid_material",
        "section": "export_solid_material",
        "text": "Export the solid material to the materials database.\nName of the materials database.\nName of the solid material.\nexport_solid_material\npython:str\npython:str"
    },
    {
        "objectID": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.export_solid_material",
        "href": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.export_solid_material.html#ansys.motorcad.core.motorcad_methods.MotorCAD.export_solid_material",
        "title": "export_solid_material > export_solid_material > export_solid_material",
        "section": "export_solid_material > export_solid_material",
        "text": "MotorCAD.export_solid_material(file_name, material_name)\n\nExport the solid material to the materials database.\n\nParameters\n\nfile_name\n\npython:str\n\nName of the materials database.\n\nmaterial_name\n\npython:str\n\nName of the solid material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_line_boundary_rt",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_line_boundary_rt.html#add_line_boundary_rt",
        "title": "add_line_boundary_rt",
        "section": "add_line_boundary_rt",
        "text": "Add a boundary condition line using r, t coordinates for the start and end points.\nDeprecated since version 0.6.0: add_line_boundary_rt will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\nadd_line_boundary_rt"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_line_boundary_rt",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_line_boundary_rt.html#ansys.motorcad.core.motorcad_methods.MotorCAD.add_line_boundary_rt",
        "title": "add_line_boundary_rt > add_line_boundary_rt > add_line_boundary_rt",
        "section": "add_line_boundary_rt > add_line_boundary_rt",
        "text": "MotorCAD.add_line_boundary_rt(rs, ts, re, t_e, dir_code, sym_code, virt_code, init_code)\n\nAdd a boundary condition line using r, t coordinates for the start and end points.\n\nDeprecated since version 0.6.0: add_line_boundary_rt will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.coordinate_on_entity",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.coordinate_on_entity.html#coordinate_on_entity",
        "title": "coordinate_on_entity",
        "section": "coordinate_on_entity",
        "text": "Get if a coordinate exists on this Arc.\nCheck if this coordinate is on the Arc\ncoordinate_on_entity\nCoordinate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.coordinate_on_entity",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.coordinate_on_entity.html#ansys.motorcad.core.geometry.Arc.coordinate_on_entity",
        "title": "coordinate_on_entity > coordinate_on_entity > coordinate_on_entity",
        "section": "coordinate_on_entity > coordinate_on_entity",
        "text": "Arc.coordinate_on_entity(coordinate)\n\nGet if a coordinate exists on this Arc.\n\nParameters\n\ncoordinate\n\nCoordinate\n\nCheck if this coordinate is on the Arc\n\nReturns\n\n\n\n——-\n\n\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/utility_functions",
        "href": "methods/utility_functions.html#utility-functions",
        "title": "Utility functions",
        "section": "Utility functions",
        "text": "set_default_instance(port)\nSet the Motor-CAD instance to use as the default when running scripts from MotorCAD.\nset_motorcad_exe(exe_location)\nSet the path of the Motor-CAD executable file to launch.\nset_server_ip(ip)\nSet the IP address of the machine that Motor-CAD is running on.\nUtility functions\nset_default_instance\nset_motorcad_exe\nset_server_ip"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetPowerInjectionValue",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetPowerInjectionValue.html#setpowerinjectionvalue",
        "title": "SetPowerInjectionValue",
        "section": "SetPowerInjectionValue",
        "text": "Deprecated function. Replaced by MotorCAD.set_power_injection_value().\nSetPowerInjectionValue\nMotorCAD.set_power_injection_value()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetPowerInjectionValue",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetPowerInjectionValue.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetPowerInjectionValue",
        "title": "SetPowerInjectionValue > SetPowerInjectionValue > SetPowerInjectionValue",
        "section": "SetPowerInjectionValue > SetPowerInjectionValue",
        "text": "MotorCADCompatibility.SetPowerInjectionValue(*args)\n\nDeprecated function. Replaced by MotorCAD.set_power_injection_value().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#examples",
        "title": "Examples",
        "section": "Examples",
        "text": "End-to-end examples show how you can use PyMotorCAD. If PyMotorCAD is installed\non your machine, you can download these examples as Python files or Jupyter\nnotebooks and run them locally.\nSome examples require additional Python packages.\nExamples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#adaptive-templates-examples",
        "title": "Examples > Adaptive templates examples",
        "section": "Adaptive templates examples",
        "text": "Library of adaptive templates examples for setting up custom geometries in Motor-CAD.\nThese scripts can be loaded into the Motor-CAD Adaptive Templates tab.\nAdaptive Templates in Motor-CAD require v2024.1.2 (Motor-CAD 2024 R1 Update) or later.\nFor more information on the use of Adaptive Templates in Motor-CAD,\nand how to create, modify and debug Adaptive Templates Scripts,\nsee ref_adaptive_templates_UG in the ref_user_guide.\nsphx_glr_examples_adaptive_library_BPMTriangularRotorNotches.py\nsphx_glr_examples_adaptive_library_BezierCurveRotorPockets.py\nsphx_glr_examples_adaptive_library_DXFImport.py\nsphx_glr_examples_adaptive_library_OblongStatorDuct.py\nsphx_glr_examples_adaptive_library_RoundParallelSlotBttm.py\nsphx_glr_examples_adaptive_library_TrapezoidalDuct.py\nsphx_glr_examples_adaptive_library_UShapeSYNCRELCurvedFluxBarriers.py\nsphx_glr_examples_adaptive_library_UpdateMaterialMesh.py\nAdaptive templates examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#advanced-examples",
        "title": "Examples > Advanced examples",
        "section": "Advanced examples",
        "text": "These examples show you how to use the basic functionality of PyMotorCAD.\nsphx_glr_examples_advanced_force_extraction.py\nAdvanced examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#basic-examples",
        "title": "Examples > Basic examples",
        "section": "Basic examples",
        "text": "These examples show you how to use the basic functionality of PyMotorCAD.\nsphx_glr_examples_basics_emag_basics.py\nsphx_glr_examples_basics_lab_basics.py\nsphx_glr_examples_basics_thermal_basics.py\nBasic examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#internal-scripting-examples",
        "title": "Examples > Internal scripting examples",
        "section": "Internal scripting examples",
        "text": "These examples show you how to use the internal scripting functionality of PyMotorCAD.\nsphx_glr_examples_internal_scripting_emag.py\nsphx_glr_examples_internal_scripting_mechanical_force.py\nsphx_glr_examples_internal_scripting_mechanical_stress.py\nsphx_glr_examples_internal_scripting_thermal_steady_state.py\nsphx_glr_examples_internal_scripting_thermal_transient.py\nInternal scripting examples"
    },
    {
        "objectID": "examples/index",
        "href": "examples/index.html#linking-examples",
        "title": "Examples > Linking examples",
        "section": "Linking examples",
        "text": "These examples show how you can link PyMotorCAD to other Ansys products.\nsphx_glr_examples_links_ece_export_for_twinbuilder.py\nsphx_glr_examples_links_thermal_twinbuilder.py\nGallery generated by Sphinx-Gallery\nLinking examples"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_generator_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_generator_lab.html#calculate_generator_lab",
        "title": "calculate_generator_lab",
        "section": "calculate_generator_lab",
        "text": "Calculate generator performance.\nResults are saved in the MOT file results folder as LabResults_Generator.mat.\ncalculate_generator_lab\nLabResults_Generator.mat"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_generator_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_generator_lab.html#ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_generator_lab",
        "title": "calculate_generator_lab > calculate_generator_lab > calculate_generator_lab",
        "section": "calculate_generator_lab > calculate_generator_lab",
        "text": "MotorCAD.calculate_generator_lab()\n\nCalculate generator performance.\n\nResults are saved in the MOT file results folder as LabResults_Generator.mat.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_thermal_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_thermal_lab.html#calculate_thermal_lab",
        "title": "calculate_thermal_lab",
        "section": "calculate_thermal_lab",
        "text": "Run the Lab thermal calculation.\ncalculate_thermal_lab"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_thermal_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_thermal_lab.html#ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_thermal_lab",
        "title": "calculate_thermal_lab > calculate_thermal_lab > calculate_thermal_lab",
        "section": "calculate_thermal_lab > calculate_thermal_lab",
        "text": "MotorCAD.calculate_thermal_lab()\n\nRun the Lab thermal calculation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveResults",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveResults.html#saveresults",
        "title": "SaveResults",
        "section": "SaveResults",
        "text": "Deprecated function. Replaced by MotorCAD.save_results().\nSaveResults\nMotorCAD.save_results()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveResults",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveResults.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveResults",
        "title": "SaveResults > SaveResults > SaveResults",
        "section": "SaveResults > SaveResults",
        "text": "MotorCADCompatibility.SaveResults(*args)\n\nDeprecated function. Replaced by MotorCAD.save_results().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_power",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_power.html#get_node_power",
        "title": "get_node_power",
        "section": "get_node_power",
        "text": "Get the power of a thermal node.\nNumber of the thermal node.\nPower of the thermal node.\nget_node_power\npython:int\npython:float"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_power",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_power.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_node_power",
        "title": "get_node_power > get_node_power > get_node_power",
        "section": "get_node_power > get_node_power",
        "text": "MotorCAD.get_node_power(node_number)\n\nGet the power of a thermal node.\n\nParameters\n\nnode_number\n\npython:int\n\nNumber of the thermal node.\n\nReturns\n\npython:float\n\nPower of the thermal node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.is_closed",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.is_closed.html#is_closed",
        "title": "is_closed",
        "section": "is_closed",
        "text": "Check whether region entities create a closed region.\nWhether region is closed\nis_closed\nBoolean"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.is_closed",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.is_closed.html#ansys.motorcad.core.geometry.Region.is_closed",
        "title": "is_closed > is_closed > is_closed",
        "section": "is_closed > is_closed",
        "text": "Region.is_closed()\n\nCheck whether region entities create a closed region.\n\nReturns\n\nBoolean\n\nWhether region is closed\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.remove_entity",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.remove_entity.html#remove_entity",
        "title": "remove_entity",
        "section": "remove_entity",
        "text": "Remove the entity from the region.\nLine/arc entity class instance\nremove_entity\nLine\nArc"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.remove_entity",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.remove_entity.html#ansys.motorcad.core.geometry.RegionMagnet.remove_entity",
        "title": "remove_entity > remove_entity > remove_entity",
        "section": "remove_entity > remove_entity",
        "text": "RegionMagnet.remove_entity(entity_remove)\n\nRemove the entity from the region.\n\nParameters\n\nentity_remove\n\nLine or Arc\n\nLine/arc entity class instance\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetRegionColour",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetRegionColour.html#setregioncolour",
        "title": "SetRegionColour",
        "section": "SetRegionColour",
        "text": "Deprecated function.\nSetRegionColour"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetRegionColour",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetRegionColour.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetRegionColour",
        "title": "SetRegionColour > SetRegionColour > SetRegionColour",
        "section": "SetRegionColour > SetRegionColour",
        "text": "MotorCADCompatibility.SetRegionColour(*args)\n\nDeprecated function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.unite",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.unite.html#unite",
        "title": "unite",
        "section": "unite",
        "text": "Unite one or more other regions with self.\nMotor-CAD region object/list of objects\nunite\nansys.motorcad.core.geometry.Region\npython:list\nof\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.unite",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.unite.html#ansys.motorcad.core.geometry.RegionMagnet.unite",
        "title": "unite > unite > unite",
        "section": "unite > unite",
        "text": "RegionMagnet.unite(regions)\n\nUnite one or more other regions with self.\n\nParameters\n\nregions\n\nansys.motorcad.core.geometry.Region or python:list of ansys.motorcad.core.geometry.Region\n\nMotor-CAD region object/list of objects\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_hub",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_hub.html#rotor_hub",
        "title": "rotor_hub",
        "section": "rotor_hub",
        "text": "rotor_hub"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_hub",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_hub.html#ansys.motorcad.core.geometry.RegionType.rotor_hub",
        "title": "rotor_hub > rotor_hub > rotor_hub",
        "section": "rotor_hub > rotor_hub",
        "text": "RegionType.rotor_hub = 'Rotor hub'\n\n"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_test_performance_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_test_performance_lab.html#calculate_test_performance_lab",
        "title": "calculate_test_performance_lab",
        "section": "calculate_test_performance_lab",
        "text": "Calculate the test performance.\nResults are saved in the MOT file results folder as MotorLAB_caldata.mat.\ncalculate_test_performance_lab\nMotorLAB_caldata.mat"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_test_performance_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_test_performance_lab.html#ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_test_performance_lab",
        "title": "calculate_test_performance_lab > calculate_test_performance_lab > calculate_test_performance_lab",
        "section": "calculate_test_performance_lab > calculate_test_performance_lab",
        "text": "MotorCAD.calculate_test_performance_lab()\n\nCalculate the test performance.\n\nResults are saved in the MOT file results folder as MotorLAB_caldata.mat.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_copper",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_copper.html#rotor_copper",
        "title": "rotor_copper",
        "section": "rotor_copper",
        "text": "rotor_copper"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_copper",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_copper.html#ansys.motorcad.core.geometry.RegionType.rotor_copper",
        "title": "rotor_copper > rotor_copper > rotor_copper",
        "section": "rotor_copper > rotor_copper",
        "text": "RegionType.rotor_copper = 'Rotor Copper'\n\n"
    },
    {
        "objectID": "index",
        "href": "index.html#pymotorcad-documentation-074",
        "title": "PyMotorCAD documentation 0.7.4",
        "section": "PyMotorCAD documentation 0.7.4",
        "text": "PyMotorCAD documentation 0.7.4"
    },
    {
        "objectID": "index",
        "href": "index.html#introduction",
        "title": "PyMotorCAD documentation 0.7.4 > Introduction",
        "section": "Introduction",
        "text": "Ansys Motor-CAD is a dedicated design and analysis tool for electric motors.\nIt enables rapid and accurate multiphysics design and analysis of electric\nmachines across the full operating spectrum.\nToday’s electric motor design requires multiphysics analysis across wide\ntorque and speed operating ranges to accommodate rapid development cycles and\nsystem integration. Motor-CAD facilitates this cutting-edge design approach\nby providing:\nIntuitive, template-based setups for fast initial electric machine designs\nBuilt-in electromagnetic, thermal, and mechanical solvers for multiphysics insights\nRapid analysis of efficiency maps, torque and speed characteristics, and drive cycles\nQuick evaluation of motor topologies and concepts to produce designs that are\noptimized for size, performance. and efficiency\nIntroduction"
    },
    {
        "objectID": "index",
        "href": "index.html#what-is-pymotorcad",
        "title": "PyMotorCAD documentation 0.7.4 > What is PyMotorCAD?",
        "section": "What is PyMotorCAD?",
        "text": "PyMotorCAD is part of the PyAnsys ecosystem\nthat facilitates the use of Motor-CAD within a Python environment in\nconjunction with other PyAnsys libraries and external Python libraries.\nPyMotorCAD uses a Python JSON-RPC (remote procedure call) interface for\nMotor-CAD to launch or connect with a Motor-CAD instance, either locally or\nfrom a remote machine via HTTP.\nPyMotorCAD allows you to programmatically create, interact with,\nand control a Motor-CAD model, with or without using the Motor-CAD GUI.\nYou can achieve Motor-CAD automation by running scripts, either internally\nvia the Motor-CAD Scripting tab or externally.\nWhat is PyMotorCAD?"
    },
    {
        "objectID": "index",
        "href": "index.html#features",
        "title": "PyMotorCAD documentation 0.7.4 > Features",
        "section": "Features",
        "text": "Features of PyMotorCAD include:\nThe ability to launch Motor-CAD instances and connect to already-running\ninstances of Motor-CAD.\nThe ability to control Motor-CAD by automation using PyMotorCAD API methods\nto carry out Motor-CAD actions, such as setting and retrieving Motor-CAD\nparameters. For the list of API methods, see the ref_MotorCAD_object.\nThe ability to automate workflows and methodologies within an instance of\nMotor-CAD via its internal Scripting tab. For information internal\nscripting in Motor-CAD see the ref_user_guide.\nAutomation control of Motor-CAD via external scripts. Workflows and\nmethodologies can be carried out with either a visible Motor-CAD GUI\nor via BlackBox mode. For adding PyMotorCAD to your own Python, see\nref_external_scripting.\nThe ability to control communication and couple or link Motor-CAD\nwith other software such as Ansys optiSLang.\nThe ability to run automated sensitivity analysis studies and/or select\ntolerance buildup to produce robust designs.\nAllowing users to introduce their own formulations into Motor-CAD.\nThe running of multiple parallel Motor-CAD instances via an external script.\nAnsys optiSLang can be employed to carry out detailed optimizations by\ncontrolling multiple Motor-CAD instances in parallel.\nExample scripts for tutorials on Motor-CAD features and abilities.\nCustomizable example scripts for common or advanced workflows, both within\nMotor-CAD and involving the coupling of Motor-CAD to other software.\nFeatures"
    },
    {
        "objectID": "index",
        "href": "index.html#documentation-and-issues",
        "title": "PyMotorCAD documentation 0.7.4 > Documentation and issues",
        "section": "Documentation and issues",
        "text": "Documentation for the latest stable release of PyMotorCAD is hosted at\nPyMotorCAD documentation.\nIn the upper right corner of the documentation’s title bar, there is an option for switching from\nviewing the documentation for the latest stable release to viewing the documentation for the\ndevelopment version or previously released versions.\nYou can also view or\ndownload the\nPyMotorCAD cheat sheet. This one-page reference provides syntax rules and commands\nfor using PyMotorCAD.\nOn the PyMotorCAD Issues page, you can create\nissues to report bugs and request new features. On the Discussions\npage on the Ansys Developer portal, you can post questions, share ideas, and get community feedback.\nTo reach the project support team, email pyansys.core@ansys.com.\nDocumentation and issues"
    },
    {
        "objectID": "index",
        "href": "index.html#project-index",
        "title": "PyMotorCAD documentation 0.7.4 > Project index",
        "section": "Project index",
        "text": "genindex\nProject index"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_divider",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_divider.html#rotor_divider",
        "title": "rotor_divider",
        "section": "rotor_divider",
        "text": "rotor_divider"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_divider",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_divider.html#ansys.motorcad.core.geometry.RegionType.rotor_divider",
        "title": "rotor_divider > rotor_divider > rotor_divider",
        "section": "rotor_divider > rotor_divider",
        "text": "RegionType.rotor_divider = 'Rotor Divider'\n\n"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_duty_cycle_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_duty_cycle_lab.html#calculate_duty_cycle_lab",
        "title": "calculate_duty_cycle_lab",
        "section": "calculate_duty_cycle_lab",
        "text": "Run the Lab duty cycle.\ncalculate_duty_cycle_lab"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_duty_cycle_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_duty_cycle_lab.html#ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_duty_cycle_lab",
        "title": "calculate_duty_cycle_lab > calculate_duty_cycle_lab > calculate_duty_cycle_lab",
        "section": "calculate_duty_cycle_lab > calculate_duty_cycle_lab",
        "text": "MotorCAD.calculate_duty_cycle_lab()\n\nRun the Lab duty cycle.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/basics/index",
        "href": "examples/basics/index.html#basic-examples",
        "title": "Basic examples",
        "section": "Basic examples",
        "text": "These examples show you how to use the basic functionality of PyMotorCAD.\nsphx_glr_examples_basics_emag_basics.py\nsphx_glr_examples_basics_lab_basics.py\nsphx_glr_examples_basics_thermal_basics.py\nBasic examples"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_fixed_temperature_value",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_fixed_temperature_value.html#clear_fixed_temperature_value",
        "title": "clear_fixed_temperature_value",
        "section": "clear_fixed_temperature_value",
        "text": "Remove a fixed temperature from a node.\nclear_fixed_temperature_value"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_fixed_temperature_value",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_fixed_temperature_value.html#ansys.motorcad.core.motorcad_methods.MotorCAD.clear_fixed_temperature_value",
        "title": "clear_fixed_temperature_value > clear_fixed_temperature_value > clear_fixed_temperature_value",
        "section": "clear_fixed_temperature_value > clear_fixed_temperature_value",
        "text": "MotorCAD.clear_fixed_temperature_value(node1)\n\nRemove a fixed temperature from a node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.export_lab_model",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.export_lab_model.html#export_lab_model",
        "title": "export_lab_model",
        "section": "export_lab_model",
        "text": "Export lab model.\nFile path including lab model file name and file extension (.lab)\nexport_lab_model\npython:str"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.export_lab_model",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.export_lab_model.html#ansys.motorcad.core.motorcad_methods.MotorCAD.export_lab_model",
        "title": "export_lab_model > export_lab_model > export_lab_model",
        "section": "export_lab_model > export_lab_model",
        "text": "MotorCAD.export_lab_model(file_path)\n\nExport lab model.\n\nParameters\n\nfile_path\n\npython:str\n\nFile path including lab model file name and file extension (.lab)\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/MotorCAD_object",
        "href": "methods/MotorCAD_object.html#motorcad-api",
        "title": "MotorCAD API",
        "section": "MotorCAD API",
        "text": "Connect to an existing Motor-CAD instance or open a new instance.\nPort to use for communication.\nOpen a new instance or try to connect to an existing instance.\nWhether to show Motor-CAD communication errors as Python exceptions.\nWhether Motor-CAD methods return a success variable (first object in tuple).\nWhether to reuse Motor-CAD instances when running in parallel. You must\nfree instances after use.\nWhether to keep the Motor-CAD instance open after the instance becomes free.\nFull url for Motor-CAD connection. Assumes we are connecting to existing instance.\nAsk Motor-CAD to consume blackbox licence.\nMotorCAD API\npython:int\nBoolean\npython:True\nBoolean\npython:True\nBoolean\npython:False\nBoolean\npython:False\nBoolean\npython:False\nMotorCAD"
    },
    {
        "objectID": "methods/MotorCAD_object",
        "href": "methods/MotorCAD_object.html#ansys.motorcad.core.motorcad_methods.MotorCAD",
        "title": "MotorCAD API > MotorCAD API > MotorCAD",
        "section": "MotorCAD API > MotorCAD",
        "text": "class ansys.motorcad.core.motorcad_methods.MotorCAD(port=-1, open_new_instance=True, enable_exceptions=True, enable_success_variable=False, reuse_parallel_instances=False, keep_instance_open=False, url='', use_blackbox_licence=False)\n\nConnect to an existing Motor-CAD instance or open a new instance.\n\nParameters\n\nport\n\npython:int, default: -1\n\nPort to use for communication.\n\nopen_new_instance\n\nBoolean, default: python:True\n\nOpen a new instance or try to connect to an existing instance.\n\nenable_exceptions\n\nBoolean, default: python:True\n\nWhether to show Motor-CAD communication errors as Python exceptions.\n\nenable_success_variable\n\nBoolean, default: python:False\n\nWhether Motor-CAD methods return a success variable (first object in tuple).\n\nreuse_parallel_instances\n\nBoolean, default: python:False\n\nWhether to reuse Motor-CAD instances when running in parallel. You must\nfree instances after use.\n\nkeep_instance_open\n\nBoolean, default: python:False\n\nWhether to keep the Motor-CAD instance open after the instance becomes free.\n\nurl: string, default = “”\n\nFull url for Motor-CAD connection. Assumes we are connecting to existing instance.\n\nuse_blackbox_licence: Boolean, default: False\n\nAsk Motor-CAD to consume blackbox licence.\n\nReturns\n\nMotorCAD object.\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_separator",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_separator.html#stator_separator",
        "title": "stator_separator",
        "section": "stator_separator",
        "text": "stator_separator"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_separator",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_separator.html#ansys.motorcad.core.geometry.RegionType.stator_separator",
        "title": "stator_separator > stator_separator > stator_separator",
        "section": "stator_separator > stator_separator",
        "text": "RegionType.stator_separator = 'Stator slot separator'\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetForceFrequencyDomainAmplitude",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetForceFrequencyDomainAmplitude.html#getforcefrequencydomainamplitude",
        "title": "GetForceFrequencyDomainAmplitude",
        "section": "GetForceFrequencyDomainAmplitude",
        "text": "Deprecated function. Replaced by MotorCAD.get_force_frequency_domain_amplitude().\nGetForceFrequencyDomainAmplitude\nMotorCAD.get_force_frequency_domain_amplitude()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetForceFrequencyDomainAmplitude",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetForceFrequencyDomainAmplitude.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetForceFrequencyDomainAmplitude",
        "title": "GetForceFrequencyDomainAmplitude > GetForceFrequencyDomainAmplitude > GetForceFrequencyDomainAmplitude",
        "section": "GetForceFrequencyDomainAmplitude > GetForceFrequencyDomainAmplitude",
        "text": "MotorCADCompatibility.GetForceFrequencyDomainAmplitude(*args)\n\nDeprecated function. Replaced by MotorCAD.get_force_frequency_domain_amplitude().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.children",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.children.html#children",
        "title": "children",
        "section": "children",
        "text": "Return list of child regions from Motor-CAD.\nlist of Motor-CAD region object\nchildren\npython:list\nof\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.children",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.children.html#ansys.motorcad.core.geometry.Region.children",
        "title": "children > children > children",
        "section": "children > children",
        "text": "property Region.children\n\nReturn list of child regions from Motor-CAD.\n\nReturns\n\npython:list of ansys.motorcad.core.geometry.Region\n\nlist of Motor-CAD region object\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.region_type",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.region_type.html#region_type",
        "title": "region_type",
        "section": "region_type",
        "text": "Get region type.\nregion_type\nRegionType"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.region_type",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.region_type.html#ansys.motorcad.core.geometry.RegionMagnet.region_type",
        "title": "region_type > region_type > region_type",
        "section": "region_type > region_type",
        "text": "property RegionMagnet.region_type\n\nGet region type.\n\nReturns\n\nRegionType\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.rotate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.rotate.html#rotate",
        "title": "rotate",
        "section": "rotate",
        "text": "Rotate Coordinate around a point for a given angle.\nPoint to rotate Coordinate around.\nAngle of rotation in degrees. Anticlockwise direction is positive.\nrotate\nCoordinate\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.rotate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.rotate.html#ansys.motorcad.core.geometry.Coordinate.rotate",
        "title": "rotate > rotate > rotate",
        "section": "rotate > rotate",
        "text": "Coordinate.rotate(centre_point, angle)\n\nRotate Coordinate around a point for a given angle.\n\nParameters\n\ncentre_point\n\nCoordinate\n\nPoint to rotate Coordinate around.\n\nangle\n\npython:float\n\nAngle of rotation in degrees. Anticlockwise direction is positive.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFluid",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFluid.html#setfluid",
        "title": "SetFluid",
        "section": "SetFluid",
        "text": "Deprecated function. Replaced by MotorCAD.set_fluid().\nSetFluid\nMotorCAD.set_fluid()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFluid",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFluid.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SetFluid",
        "title": "SetFluid > SetFluid > SetFluid",
        "section": "SetFluid > SetFluid",
        "text": "MotorCADCompatibility.SetFluid(*args)\n\nDeprecated function. Replaced by MotorCAD.set_fluid().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.coil_insulation",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.coil_insulation.html#coil_insulation",
        "title": "coil_insulation",
        "section": "coil_insulation",
        "text": "coil_insulation"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.coil_insulation",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.coil_insulation.html#ansys.motorcad.core.geometry.RegionType.coil_insulation",
        "title": "coil_insulation > coil_insulation > coil_insulation",
        "section": "coil_insulation > coil_insulation",
        "text": "RegionType.coil_insulation = 'Coil Insulation'\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetPowerGraphPoint",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetPowerGraphPoint.html#getpowergraphpoint",
        "title": "GetPowerGraphPoint",
        "section": "GetPowerGraphPoint",
        "text": "Deprecated function. Replaced by MotorCAD.get_power_graph_point().\nGetPowerGraphPoint\nMotorCAD.get_power_graph_point()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetPowerGraphPoint",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetPowerGraphPoint.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetPowerGraphPoint",
        "title": "GetPowerGraphPoint > GetPowerGraphPoint > GetPowerGraphPoint",
        "section": "GetPowerGraphPoint > GetPowerGraphPoint",
        "text": "MotorCADCompatibility.GetPowerGraphPoint(*args)\n\nDeprecated function. Replaced by MotorCAD.get_power_graph_point().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.create_optimised_mesh",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.create_optimised_mesh.html#create_optimised_mesh",
        "title": "create_optimised_mesh",
        "section": "create_optimised_mesh",
        "text": "Create the FEA geometry and an optimized mesh.\nCall this method at the end of creating a custom scripting geometry.\nDeprecated since version 0.6.0: create_optimised_mesh will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\ncreate_optimised_mesh"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.create_optimised_mesh",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.create_optimised_mesh.html#ansys.motorcad.core.motorcad_methods.MotorCAD.create_optimised_mesh",
        "title": "create_optimised_mesh > create_optimised_mesh > create_optimised_mesh",
        "section": "create_optimised_mesh > create_optimised_mesh",
        "text": "MotorCAD.create_optimised_mesh()\n\nCreate the FEA geometry and an optimized mesh.\n\nCall this method at the end of creating a custom scripting geometry.\n\nDeprecated since version 0.6.0: create_optimised_mesh will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_region",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_region.html#set_region",
        "title": "set_region",
        "section": "set_region",
        "text": "Set Motor-CAD geometry region.\nMotor-CAD region object.\nset_region\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_region",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_region.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_region",
        "title": "set_region > set_region > set_region",
        "section": "set_region > set_region",
        "text": "MotorCAD.set_region(region)\n\nSet Motor-CAD geometry region.\n\nParameters\n\nregion\n\nansys.motorcad.core.geometry.Region\n\nMotor-CAD region object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autogen_Calculations",
        "href": "methods/_autogen_Calculations.html#calculations",
        "title": "Calculations",
        "section": "Calculations",
        "text": "calculate_force_harmonics_spatial()\nCalculate 1D force harmonics on the space axis.\ncalculate_force_harmonics_temporal()\nCalculate 1D force harmonics on the time axis.\ncalculate_im_saturation_model()\nCalculate saturation lookup tables for IM machines.\ncalculate_saturation_map()\nGenerate electromagnetic saturation and loss data.\ncalculate_torque_envelope()\nCalculate the torque envelope for the machine.\ncreate_winding_pattern()\nCreate winding pattern.\ndo_magnetic_calculation()\nRun the Motor-CAD magnetic calculation.\ndo_magnetic_thermal_calculation()\nRun coupled e-magnetic and thermal calculations.\ndo_mechanical_calculation()\nRun the Motor-CAD mechanical calculation.\ndo_multi_force_calculation()\nRun the multiforce operating point calculation.\ndo_steady_state_analysis()\nRun the thermal steady state analysis.\ndo_transient_analysis()\nRun the thermal transient analysis.\ndo_weight_calculation()\nRun the Motor-CAD weight calculation.\nget_force_frequency_domain_amplitude(row, ...)\nExport the matrix value from a force space time harmonics matrix for a 2D FFT.\nupdate_force_analysis_results(fft_data_type)\nUpdate force analysis results for the multiforce operating point.\nCalculations\ncalculate_force_harmonics_spatial\ncalculate_force_harmonics_temporal\ncalculate_im_saturation_model\ncalculate_saturation_map\ncalculate_torque_envelope\ncreate_winding_pattern\ndo_magnetic_calculation\ndo_magnetic_thermal_calculation\ndo_mechanical_calculation\ndo_multi_force_calculation\ndo_steady_state_analysis\ndo_transient_analysis\ndo_weight_calculation\nget_force_frequency_domain_amplitude\nupdate_force_analysis_results"
    },
    {
        "objectID": "examples/adaptive_library/index",
        "href": "examples/adaptive_library/index.html#adaptive-templates-examples",
        "title": "Adaptive templates examples",
        "section": "Adaptive templates examples",
        "text": "Library of adaptive templates examples for setting up custom geometries in Motor-CAD.\nThese scripts can be loaded into the Motor-CAD Adaptive Templates tab.\nAdaptive Templates in Motor-CAD require v2024.1.2 (Motor-CAD 2024 R1 Update) or later.\nFor more information on the use of Adaptive Templates in Motor-CAD,\nand how to create, modify and debug Adaptive Templates Scripts,\nsee ref_adaptive_templates_UG in the ref_user_guide.\nsphx_glr_examples_adaptive_library_BPMTriangularRotorNotches.py\nsphx_glr_examples_adaptive_library_BezierCurveRotorPockets.py\nsphx_glr_examples_adaptive_library_DXFImport.py\nsphx_glr_examples_adaptive_library_OblongStatorDuct.py\nsphx_glr_examples_adaptive_library_RoundParallelSlotBttm.py\nsphx_glr_examples_adaptive_library_TrapezoidalDuct.py\nsphx_glr_examples_adaptive_library_UShapeSYNCRELCurvedFluxBarriers.py\nsphx_glr_examples_adaptive_library_UpdateMaterialMesh.py\nAdaptive templates examples"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateForceHarmonics_Spatial",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateForceHarmonics_Spatial.html#calculateforceharmonics_spatial",
        "title": "CalculateForceHarmonics_Spatial",
        "section": "CalculateForceHarmonics_Spatial",
        "text": "Deprecated function. Replaced by MotorCAD.calculate_force_harmonics_spatial().\nCalculateForceHarmonics_Spatial\nMotorCAD.calculate_force_harmonics_spatial()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateForceHarmonics_Spatial",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateForceHarmonics_Spatial.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateForceHarmonics_Spatial",
        "title": "CalculateForceHarmonics_Spatial > CalculateForceHarmonics_Spatial > CalculateForceHarmonics_Spatial",
        "section": "CalculateForceHarmonics_Spatial > CalculateForceHarmonics_Spatial",
        "text": "MotorCADCompatibility.CalculateForceHarmonics_Spatial()\n\nDeprecated function. Replaced by MotorCAD.calculate_force_harmonics_spatial().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.points",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.points.html#points",
        "title": "points",
        "section": "points",
        "text": "Get points that exist in region.\npoints\nList\nof\nCoordinate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.points",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.points.html#ansys.motorcad.core.geometry.Region.points",
        "title": "points > points > points",
        "section": "points > points",
        "text": "property Region.points\n\nGet points that exist in region.\n\nReturns\n\nList of Coordinate\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/links/sg_execution_times",
        "href": "examples/links/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "27:08.841 total execution time for 2 files from exampleslinks:\nExample\nTime\nMem (MB)\nsphx_glr_examples_links_thermal_twinbuilder.py (thermal_twinbuilder.py)\n16:09.939\n0.0\nsphx_glr_examples_links_ece_export_for_twinbuilder.py (ece_export_for_twinbuilder.py)\n10:58.902\n0.0\nComputation times\nthermal_twinbuilder.py\nece_export_for_twinbuilder.py"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetRegionValue",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetRegionValue.html#getregionvalue",
        "title": "GetRegionValue",
        "section": "GetRegionValue",
        "text": "Deprecated function. Replaced by MotorCAD.get_region_value().\nGetRegionValue\nMotorCAD.get_region_value()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetRegionValue",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetRegionValue.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetRegionValue",
        "title": "GetRegionValue > GetRegionValue > GetRegionValue",
        "section": "GetRegionValue > GetRegionValue",
        "text": "MotorCADCompatibility.GetRegionValue(*args)\n\nDeprecated function. Replaced by MotorCAD.get_region_value().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/adaptive_library/UpdateMaterialMesh",
        "href": "examples/adaptive_library/UpdateMaterialMesh.html#material-and-mesh-properties",
        "title": "Material and Mesh Properties",
        "section": "Material and Mesh Properties",
        "text": "This script applies the adaptive templates functionality to modify material and mesh properties\nin a turbocharger machine.\nAdaptive Templates material and mesh properties described in this example require v2025.1.1\n(Motor-CAD 2025 R1 Update) or later\nMaterial and Mesh Properties"
    },
    {
        "objectID": "examples/adaptive_library/UpdateMaterialMesh",
        "href": "examples/adaptive_library/UpdateMaterialMesh.html#perform-required-imports",
        "title": "Material and Mesh Properties > Perform required imports",
        "section": "Perform required imports",
        "text": "Import pymotorcad to access Motor-CAD.\nImport Arc, EntityList, Coordinate, Line, Line, Region, rt_to_xy\nto define the adaptive template geometry.\nImport os, shutil, sys, and tempfile\nto open and save a temporary .mot file if none is open.\nPerform required imports\npymotorcad\nArc\nEntityList\nCoordinate\nLine\nLine\nRegion\nrt_to_xy\nos\nshutil\nsys\ntempfile"
    },
    {
        "objectID": "examples/adaptive_library/UpdateMaterialMesh",
        "href": "examples/adaptive_library/UpdateMaterialMesh.html#connect-to-motor-cad",
        "title": "Material and Mesh Properties > Connect to Motor-CAD",
        "section": "Connect to Motor-CAD",
        "text": "If this script is loaded into the Adaptive Templates file in Motor-CAD, the current Motor-CAD\ninstance is used.\nIf the script is run externally, these actions occur: a new Motor-CAD instance is opened,\nthe e7 IPM motor template is loaded and  the file is saved to a temporary folder.\nTo keep a new Motor-CAD instance open after executing the script, use\nthe MotorCAD(keep_instance_open=True) option when opening the new instance.\nAlternatively, use the MotorCAD() method, which closes the Motor-CAD instance after the\nscript is executed.\nThe Geometry -> Editor tab contains the Geometry Tree. Here the user can select a region to\nvisualise relevant information such as entities, material type etc. For example, the Rotor\nmaterial is defined as Laminated with material N10 0.1 strip. From Motor-CAD version 2025 R1\nonwards, a user can define different materials as well as the lamination type such as Solid or\nLaminated as will be demonstrated in this example.\nConnect to Motor-CAD\nMotorCAD(keep_instance_open=True)\nMotorCAD()"
    },
    {
        "objectID": "examples/adaptive_library/UpdateMaterialMesh",
        "href": "examples/adaptive_library/UpdateMaterialMesh.html#create-the-adaptive-templates-geometry",
        "title": "Material and Mesh Properties > Create the Adaptive Templates geometry",
        "section": "Create the Adaptive Templates geometry",
        "text": "Create the Adaptive Templates geometry"
    },
    {
        "objectID": "examples/adaptive_library/UpdateMaterialMesh",
        "href": "examples/adaptive_library/UpdateMaterialMesh.html#set-adaptive-parameter-if-required",
        "title": "Material and Mesh Properties > Set adaptive parameter if required",
        "section": "Set adaptive parameter if required",
        "text": "Set adaptive parameter if required"
    },
    {
        "objectID": "examples/adaptive_library/UpdateMaterialMesh",
        "href": "examples/adaptive_library/UpdateMaterialMesh.html#create-points-and-entities-for-rotor-band",
        "title": "Material and Mesh Properties > Create points and entities for rotor band",
        "section": "Create points and entities for rotor band",
        "text": "Create points and entities for rotor band"
    },
    {
        "objectID": "examples/adaptive_library/UpdateMaterialMesh",
        "href": "examples/adaptive_library/UpdateMaterialMesh.html#create-rotor-band-region-with-material-and-mesh-properties",
        "title": "Material and Mesh Properties > Create rotor band region with material and mesh properties",
        "section": "Create rotor band region with material and mesh properties",
        "text": "Change the material using the Region.material method.\nChange the mesh length / density using the Region.mesh_length method.\nChange the lamination type to Solid from Laminated using the Region.lamination_type method.\nThe new rotor band region should be visible in the Geometry tab, with the updated material and\nlamination type.\nCreate rotor band region with material and mesh properties\nRegion.material\nRegion.mesh_length\nRegion.lamination_type"
    },
    {
        "objectID": "examples/adaptive_library/UpdateMaterialMesh",
        "href": "examples/adaptive_library/UpdateMaterialMesh.html#run-the-emag-on-load--torque-calculation",
        "title": "Material and Mesh Properties > Run the EMag (On Load > Torque) calculation",
        "section": "Run the EMag (On Load > Torque) calculation",
        "text": "The flux density distribution of the rotor with rotor band will be visible as shown below.\nAs the rotor band region is defined as Solid lamination type, eddy current losses can also be\nobserved.\nThe eddy current losses are confined to the narrow band, as shown above. Hence, by creating a band\nregion and controlling the mesh length of specific regions, the user can make a computationally\nefficient model as presented in this example.\nNotice the different mesh densities of the rotor and rotor-band regions. As rotor band density is\nan adaptive parameter, the user can change it accordingly.\nEddy current losses of the rotor band region created by the adaptive templates script will be\nreported under the Output Data -> Losses tab as Additional Custom Materials Loss.\nRun the EMag (On Load > Torque) calculation"
    },
    {
        "objectID": "examples/adaptive_library/UpdateMaterialMesh",
        "href": "examples/adaptive_library/UpdateMaterialMesh.html#load-in-adaptive-templates-script-if-required",
        "title": "Material and Mesh Properties > Load in Adaptive Templates script if required",
        "section": "Load in Adaptive Templates script if required",
        "text": "When this script is run externally, the script executes the following:\nSet Geometry type to Adaptive.\nLoad the script into the Adaptive Templates tab.\nGo to the Geometry -> Radial tab to run the Adaptive Templates script and display the new\ngeometry.\nWhen running in a Jupyter Notebook, you must provide the path for the Adaptive Templates script\n(PY file) instead of sys.argv[0] when using the load_adaptive_script() method.\nTotal running time of the script: (0 minutes 19.500 seconds)\nDownload Jupyter notebook: UpdateMaterialMesh.ipynb\nDownload Python source code: UpdateMaterialMesh.py\nDownload zipped: UpdateMaterialMesh.zip\nGallery generated by Sphinx-Gallery\nLoad in Adaptive Templates script if required\nsys.argv[0]\nload_adaptive_script()\nDownload Jupyter notebook: UpdateMaterialMesh.ipynb\nDownload Python source code: UpdateMaterialMesh.py\nDownload zipped: UpdateMaterialMesh.zip"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.InitiateGeometryFromScript",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.InitiateGeometryFromScript.html#initiategeometryfromscript",
        "title": "InitiateGeometryFromScript",
        "section": "InitiateGeometryFromScript",
        "text": "Deprecated function. Replaced by MotorCAD.initiate_geometry_from_script().\nInitiateGeometryFromScript\nMotorCAD.initiate_geometry_from_script()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.InitiateGeometryFromScript",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.InitiateGeometryFromScript.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.InitiateGeometryFromScript",
        "title": "InitiateGeometryFromScript > InitiateGeometryFromScript > InitiateGeometryFromScript",
        "section": "InitiateGeometryFromScript > InitiateGeometryFromScript",
        "text": "MotorCADCompatibility.InitiateGeometryFromScript()\n\nDeprecated function. Replaced by MotorCAD.initiate_geometry_from_script().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.child_names",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.child_names.html#child_names",
        "title": "child_names",
        "section": "child_names",
        "text": "Get child names list.\nlist of child region names\nchild_names\npython:list\nof\npython:str"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.child_names",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.child_names.html#ansys.motorcad.core.geometry.RegionMagnet.child_names",
        "title": "child_names > child_names > child_names",
        "section": "child_names > child_names",
        "text": "property RegionMagnet.child_names\n\nGet child names list.\n\nReturns\n\npython:list of python:str\n\nlist of child region names\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_from_file",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_from_file.html#load_from_file",
        "title": "load_from_file",
        "section": "load_from_file",
        "text": "Load a MOT file into the Motor-CAD instance.\nFull path to the MOT file, including the file name.\nUse the r'filepath' syntax to force Python to ignore special characters.\nload_from_file\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_from_file",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_from_file.html#ansys.motorcad.core.motorcad_methods.MotorCAD.load_from_file",
        "title": "load_from_file > load_from_file > load_from_file",
        "section": "load_from_file > load_from_file",
        "text": "MotorCAD.load_from_file(mot_file)\n\nLoad a MOT file into the Motor-CAD instance.\n\nParameters\n\nmot_file\n\npython:str\n\nFull path to the MOT file, including the file name.\nUse the r'filepath' syntax to force Python to ignore special characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.get_coordinate_from_distance",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.get_coordinate_from_distance.html#get_coordinate_from_distance",
        "title": "get_coordinate_from_distance",
        "section": "get_coordinate_from_distance",
        "text": "Get the coordinate at the specified distance along the arc from the reference coordinate.\nEntity reference coordinate.\nDistance along arc.\nFractional distance along Arc.\nPercentage distance along Arc.\nCoordinate at distance along Arc.\nget_coordinate_from_distance\nCoordinate\npython:float\noptional\npython:float\noptional\npython:float\noptional\nCoordinate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.get_coordinate_from_distance",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.get_coordinate_from_distance.html#ansys.motorcad.core.geometry.Arc.get_coordinate_from_distance",
        "title": "get_coordinate_from_distance > get_coordinate_from_distance > get_coordinate_from_distance",
        "section": "get_coordinate_from_distance > get_coordinate_from_distance",
        "text": "Arc.get_coordinate_from_distance(ref_coordinate, distance=None, fraction=None, percentage=None)\n\nGet the coordinate at the specified distance along the arc from the reference coordinate.\n\nParameters\n\nref_coordinate\n\nCoordinate\n\nEntity reference coordinate.\n\ndistance\n\npython:float, optional\n\nDistance along arc.\n\nfraction\n\npython:float, optional\n\nFractional distance along Arc.\n\npercentage\n\npython:float, optional\n\nPercentage distance along Arc.\n\nReturns\n\nCoordinate\n\nCoordinate at distance along Arc.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveTemplate",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveTemplate.html#savetemplate",
        "title": "SaveTemplate",
        "section": "SaveTemplate",
        "text": "Deprecated function. Replaced by MotorCAD.save_template().\nSaveTemplate\nMotorCAD.save_template()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveTemplate",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveTemplate.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveTemplate",
        "title": "SaveTemplate > SaveTemplate > SaveTemplate",
        "section": "SaveTemplate > SaveTemplate",
        "text": "MotorCADCompatibility.SaveTemplate(*args)\n\nDeprecated function. Replaced by MotorCAD.save_template().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_cover",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_cover.html#rotor_cover",
        "title": "rotor_cover",
        "section": "rotor_cover",
        "text": "rotor_cover"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_cover",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_cover.html#ansys.motorcad.core.geometry.RegionType.rotor_cover",
        "title": "rotor_cover > rotor_cover > rotor_cover",
        "section": "rotor_cover > rotor_cover",
        "text": "RegionType.rotor_cover = 'Rotor Cover'\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveMagnetParameters",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveMagnetParameters.html#savemagnetparameters",
        "title": "SaveMagnetParameters",
        "section": "SaveMagnetParameters",
        "text": "Deprecated function. Replaced by MotorCAD.save_magnet_parameters().\nSaveMagnetParameters\nMotorCAD.save_magnet_parameters()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveMagnetParameters",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveMagnetParameters.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveMagnetParameters",
        "title": "SaveMagnetParameters > SaveMagnetParameters > SaveMagnetParameters",
        "section": "SaveMagnetParameters > SaveMagnetParameters",
        "text": "MotorCADCompatibility.SaveMagnetParameters(*args)\n\nDeprecated function. Replaced by MotorCAD.save_magnet_parameters().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.lamination_type",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.lamination_type.html#lamination_type",
        "title": "lamination_type",
        "section": "lamination_type",
        "text": "Get or set lamination type of region from Motor-CAD.\nlamination_type\npython:str"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.lamination_type",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.lamination_type.html#ansys.motorcad.core.geometry.Region.lamination_type",
        "title": "lamination_type > lamination_type > lamination_type",
        "section": "lamination_type > lamination_type",
        "text": "property Region.lamination_type\n\nGet or set lamination type of region from Motor-CAD.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearFixedTemperatureValue",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearFixedTemperatureValue.html#clearfixedtemperaturevalue",
        "title": "ClearFixedTemperatureValue",
        "section": "ClearFixedTemperatureValue",
        "text": "Deprecated function. Replaced by MotorCAD.clear_fixed_temperature_value().\nClearFixedTemperatureValue\nMotorCAD.clear_fixed_temperature_value()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearFixedTemperatureValue",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearFixedTemperatureValue.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearFixedTemperatureValue",
        "title": "ClearFixedTemperatureValue > ClearFixedTemperatureValue > ClearFixedTemperatureValue",
        "section": "ClearFixedTemperatureValue > ClearFixedTemperatureValue",
        "text": "MotorCADCompatibility.ClearFixedTemperatureValue(*args)\n\nDeprecated function. Replaced by MotorCAD.clear_fixed_temperature_value().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.delete_regions",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.delete_regions.html#delete_regions",
        "title": "delete_regions",
        "section": "delete_regions",
        "text": "Delete a comma-separated list of named regions or all regions.\nDeprecated since version 0.6.0: delete_regions will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\nList of names for the regions to delete. If the list is empty,\nall regions are deleted. If the name of a region to delete contains\na space, enclose the name in double quotation marks. For example,\n\"Rotor Pocket\".\ndelete_regions\n\"Rotor Pocket\""
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.delete_regions",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.delete_regions.html#ansys.motorcad.core.motorcad_methods.MotorCAD.delete_regions",
        "title": "delete_regions > delete_regions > delete_regions",
        "section": "delete_regions > delete_regions",
        "text": "MotorCAD.delete_regions(region_name)\n\nDelete a comma-separated list of named regions or all regions.\n\nDeprecated since version 0.6.0: delete_regions will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\nParameters\n\nregion_name: list\n\nList of names for the regions to delete. If the list is empty,\nall regions are deleted. If the name of a region to delete contains\na space, enclose the name in double quotation marks. For example,\n\"Rotor Pocket\".\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_point_custom_material_xy",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_point_custom_material_xy.html#add_point_custom_material_xy",
        "title": "add_point_custom_material_xy",
        "section": "add_point_custom_material_xy",
        "text": "Add a region to the geometry and specify the material.\nDo not use this method to add a magnet. Use the add_magnet_region_xy method.\nDeprecated since version 0.6.0: add_point_custom_material_xy will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\nRegion position for the x coordinate.\nRegion position for the y coordinate.\nName of the region.\nName of the material. In Motor-CAD, material names can be found in\nInput Data -> materials. The material type (laminated, solid,\nor air) is set automatically.\nVCL color. For more information, see https://wiki.freepascal.org/Colors.\nThe color can be designaed as a hexadecimal value, such as \"$008000\"\nor a color name such as \"clGreen\".\nadd_point_custom_material_xy\nadd_magnet_region_xy\npython:float\npython:float\npython:str\npython:str\nlaminated\nsolid\nair\npython:str\n\"$008000\"\n\"clGreen\""
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_point_custom_material_xy",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_point_custom_material_xy.html#ansys.motorcad.core.motorcad_methods.MotorCAD.add_point_custom_material_xy",
        "title": "add_point_custom_material_xy > add_point_custom_material_xy > add_point_custom_material_xy",
        "section": "add_point_custom_material_xy > add_point_custom_material_xy",
        "text": "MotorCAD.add_point_custom_material_xy(x, y, region_name, material_name, colour)\n\nAdd a region to the geometry and specify the material.\n\nDo not use this method to add a magnet. Use the add_magnet_region_xy method.\n\nDeprecated since version 0.6.0: add_point_custom_material_xy will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\nParameters\n\nx\n\npython:float\n\nRegion position for the x coordinate.\n\ny\n\npython:float\n\nRegion position for the y coordinate.\n\nregion_name\n\npython:str\n\nName of the region.\n\nmaterial_name\n\npython:str\n\nName of the material. In Motor-CAD, material names can be found in\nInput Data -> materials. The material type (laminated, solid,\nor air) is set automatically.\n\ncolour\n\npython:str\n\nVCL color. For more information, see https://wiki.freepascal.org/Colors.\nThe color can be designaed as a hexadecimal value, such as \"$008000\"\nor a color name such as \"clGreen\".\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.save_magnet_parameters",
        "href": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.save_magnet_parameters.html#save_magnet_parameters",
        "title": "save_magnet_parameters",
        "section": "save_magnet_parameters",
        "text": "Save the calculated magnet parameters of the solid material to the materials database.\nName of the solid material.\nsave_magnet_parameters\npython:str"
    },
    {
        "objectID": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.save_magnet_parameters",
        "href": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.save_magnet_parameters.html#ansys.motorcad.core.motorcad_methods.MotorCAD.save_magnet_parameters",
        "title": "save_magnet_parameters > save_magnet_parameters > save_magnet_parameters",
        "section": "save_magnet_parameters > save_magnet_parameters",
        "text": "MotorCAD.save_magnet_parameters(material_name)\n\nSave the calculated magnet parameters of the solid material to the materials database.\n\nParameters\n\nmaterial_name\n\npython:str\n\nName of the solid material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_utility_functions/ansys.motorcad.core.rpc_client_core.set_default_instance",
        "href": "methods/_autosummary_utility_functions/ansys.motorcad.core.rpc_client_core.set_default_instance.html#set_default_instance",
        "title": "set_default_instance",
        "section": "set_default_instance",
        "text": "Set the Motor-CAD instance to use as the default when running scripts from MotorCAD.\nFor Motor-CAD internal use only. Do not use this function.\nPort number of the Motor-CAD instance to set as the default.\nset_default_instance\npython:int"
    },
    {
        "objectID": "methods/_autosummary_utility_functions/ansys.motorcad.core.rpc_client_core.set_default_instance",
        "href": "methods/_autosummary_utility_functions/ansys.motorcad.core.rpc_client_core.set_default_instance.html#ansys.motorcad.core.rpc_client_core.set_default_instance",
        "title": "set_default_instance > set_default_instance > set_default_instance",
        "section": "set_default_instance > set_default_instance",
        "text": "ansys.motorcad.core.rpc_client_core.set_default_instance(port)\n\nSet the Motor-CAD instance to use as the default when running scripts from MotorCAD.\n\nFor Motor-CAD internal use only. Do not use this function.\n\nParameters\n\nport\n\npython:int\n\nPort number of the Motor-CAD instance to set as the default.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.br_x",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.br_x.html#br_x",
        "title": "br_x",
        "section": "br_x",
        "text": "X-axis component of br value.\nbr_x\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.br_x",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.br_x.html#ansys.motorcad.core.geometry.RegionMagnet.br_x",
        "title": "br_x > br_x > br_x",
        "section": "br_x > br_x",
        "text": "property RegionMagnet.br_x\n\nX-axis component of br value.\n\nReturns\n\npython:float\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_capacitance_value",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_capacitance_value.html#set_capacitance_value",
        "title": "set_capacitance_value",
        "section": "set_capacitance_value",
        "text": "Set or create a capacitance.\nset_capacitance_value"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_capacitance_value",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_capacitance_value.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_capacitance_value",
        "title": "set_capacitance_value > set_capacitance_value > set_capacitance_value",
        "section": "set_capacitance_value > set_capacitance_value",
        "text": "MotorCAD.set_capacitance_value(name, node1, value, description)\n\nSet or create a capacitance.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.set_motorlab_context",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.set_motorlab_context.html#set_motorlab_context",
        "title": "set_motorlab_context",
        "section": "set_motorlab_context",
        "text": "Change Motor-CAD to the lab context.\nset_motorlab_context"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.set_motorlab_context",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.set_motorlab_context.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_motorlab_context",
        "title": "set_motorlab_context > set_motorlab_context > set_motorlab_context",
        "section": "set_motorlab_context > set_motorlab_context",
        "text": "MotorCAD.set_motorlab_context()\n\nChange Motor-CAD to the lab context.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_impreg",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_impreg.html#rotor_impreg",
        "title": "rotor_impreg",
        "section": "rotor_impreg",
        "text": "rotor_impreg"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_impreg",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_impreg.html#ansys.motorcad.core.geometry.RegionType.rotor_impreg",
        "title": "rotor_impreg > rotor_impreg > rotor_impreg",
        "section": "rotor_impreg > rotor_impreg",
        "text": "RegionType.rotor_impreg = 'Rotor Impreg'\n\n"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateThermal_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateThermal_Lab.html#calculatethermal_lab",
        "title": "CalculateThermal_Lab",
        "section": "CalculateThermal_Lab",
        "text": "Deprecated function. Replaced by MotorCAD.calculate_thermal_lab().\nCalculateThermal_Lab\nMotorCAD.calculate_thermal_lab()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateThermal_Lab",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateThermal_Lab.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateThermal_Lab",
        "title": "CalculateThermal_Lab > CalculateThermal_Lab > CalculateThermal_Lab",
        "section": "CalculateThermal_Lab > CalculateThermal_Lab",
        "text": "MotorCADCompatibility.CalculateThermal_Lab()\n\nDeprecated function. Replaced by MotorCAD.calculate_thermal_lab().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_force_harmonics_spatial",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_force_harmonics_spatial.html#calculate_force_harmonics_spatial",
        "title": "calculate_force_harmonics_spatial",
        "section": "calculate_force_harmonics_spatial",
        "text": "Calculate 1D force harmonics on the space axis.\ncalculate_force_harmonics_spatial"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_force_harmonics_spatial",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_force_harmonics_spatial.html#ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_force_harmonics_spatial",
        "title": "calculate_force_harmonics_spatial > calculate_force_harmonics_spatial > calculate_force_harmonics_spatial",
        "section": "calculate_force_harmonics_spatial > calculate_force_harmonics_spatial",
        "text": "MotorCAD.calculate_force_harmonics_spatial()\n\nCalculate 1D force harmonics on the space axis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.get_file_name",
        "href": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.get_file_name.html#get_file_name",
        "title": "get_file_name",
        "section": "get_file_name",
        "text": "Get current .mot file name and path.\nCurrent .mot file path and name\nget_file_name\npython:str"
    },
    {
        "objectID": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.get_file_name",
        "href": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.get_file_name.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_file_name",
        "title": "get_file_name > get_file_name > get_file_name",
        "section": "get_file_name > get_file_name",
        "text": "MotorCAD.get_file_name()\n\nGet current .mot file name and path.\n\nReturns\n\npython:str\n\nCurrent .mot file path and name\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/MotorCAD_errors",
        "href": "methods/MotorCAD_errors.html#motor-cad-errors",
        "title": "Motor-CAD errors",
        "section": "Motor-CAD errors",
        "text": "MotorCADError\nProvides the errors to display when issues are raised by the Motor-CAD executable file.\nMotor-CAD errors\nMotorCADError"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.sleeve",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.sleeve.html#sleeve",
        "title": "sleeve",
        "section": "sleeve",
        "text": "sleeve"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.sleeve",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.sleeve.html#ansys.motorcad.core.geometry.RegionType.sleeve",
        "title": "sleeve > sleeve > sleeve",
        "section": "sleeve > sleeve",
        "text": "RegionType.sleeve = 'Sleeve'\n\n"
    },
    {
        "objectID": "examples/adaptive_library/sg_execution_times",
        "href": "examples/adaptive_library/sg_execution_times.html#computation-times",
        "title": "Computation times",
        "section": "Computation times",
        "text": "03:41.895 total execution time for 8 files from examplesadaptive_library:\nExample\nTime\nMem (MB)\nsphx_glr_examples_adaptive_library_TrapezoidalDuct.py (TrapezoidalDuct.py)\n00:43.923\n0.0\nsphx_glr_examples_adaptive_library_RoundParallelSlotBttm.py (RoundParallelSlotBttm.py)\n00:33.688\n0.0\nsphx_glr_examples_adaptive_library_OblongStatorDuct.py (OblongStatorDuct.py)\n00:31.672\n0.0\nsphx_glr_examples_adaptive_library_BezierCurveRotorPockets.py (BezierCurveRotorPockets.py)\n00:31.657\n0.0\nsphx_glr_examples_adaptive_library_UShapeSYNCRELCurvedFluxBarriers.py (UShapeSYNCRELCurvedFluxBarriers.py)\n00:20.907\n0.0\nsphx_glr_examples_adaptive_library_DXFImport.py (DXFImport.py)\n00:20.532\n0.0\nsphx_glr_examples_adaptive_library_BPMTriangularRotorNotches.py (BPMTriangularRotorNotches.py)\n00:20.016\n0.0\nsphx_glr_examples_adaptive_library_UpdateMaterialMesh.py (UpdateMaterialMesh.py)\n00:19.500\n0.0\nComputation times\nTrapezoidalDuct.py\nRoundParallelSlotBttm.py\nOblongStatorDuct.py\nBezierCurveRotorPockets.py\nUShapeSYNCRELCurvedFluxBarriers.py\nDXFImport.py\nBPMTriangularRotorNotches.py\nUpdateMaterialMesh.py"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddLine_RT",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddLine_RT.html#addline_rt",
        "title": "AddLine_RT",
        "section": "AddLine_RT",
        "text": "Deprecated function. Replaced by MotorCAD.add_line_rt().\nAddLine_RT\nMotorCAD.add_line_rt()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddLine_RT",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddLine_RT.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddLine_RT",
        "title": "AddLine_RT > AddLine_RT > AddLine_RT",
        "section": "AddLine_RT > AddLine_RT",
        "text": "MotorCADCompatibility.AddLine_RT(*args)\n\nDeprecated function. Replaced by MotorCAD.add_line_rt().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.parent",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.parent.html#parent",
        "title": "parent",
        "section": "parent",
        "text": "Get or set parent region from Motor-CAD.\nlist of Motor-CAD region object\nparent\npython:list\nof\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.parent",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.parent.html#ansys.motorcad.core.geometry.Region.parent",
        "title": "parent > parent > parent",
        "section": "parent > parent",
        "text": "property Region.parent\n\nGet or set parent region from Motor-CAD.\n\nReturns\n\npython:list of ansys.motorcad.core.geometry.Region\n\nlist of Motor-CAD region object\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_mechanical_calculation",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_mechanical_calculation.html#do_mechanical_calculation",
        "title": "do_mechanical_calculation",
        "section": "do_mechanical_calculation",
        "text": "Run the Motor-CAD mechanical calculation.\ndo_mechanical_calculation"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_mechanical_calculation",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_mechanical_calculation.html#ansys.motorcad.core.motorcad_methods.MotorCAD.do_mechanical_calculation",
        "title": "do_mechanical_calculation > do_mechanical_calculation > do_mechanical_calculation",
        "section": "do_mechanical_calculation > do_mechanical_calculation",
        "text": "MotorCAD.do_mechanical_calculation()\n\nRun the Motor-CAD mechanical calculation.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddRectangularConductor_A",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddRectangularConductor_A.html#addrectangularconductor_a",
        "title": "AddRectangularConductor_A",
        "section": "AddRectangularConductor_A",
        "text": "Deprecated function.\nAddRectangularConductor_A"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddRectangularConductor_A",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddRectangularConductor_A.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddRectangularConductor_A",
        "title": "AddRectangularConductor_A > AddRectangularConductor_A > AddRectangularConductor_A",
        "section": "AddRectangularConductor_A > AddRectangularConductor_A",
        "text": "MotorCADCompatibility.AddRectangularConductor_A(*args)\n\nDeprecated function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autogen_Lab",
        "href": "methods/_autogen_Lab.html#lab",
        "title": "Lab",
        "section": "Lab",
        "text": "add_external_custom_loss(name, ...)\nAdd an external custom loss.\nadd_internal_custom_loss(name, function, ...)\nAdd an internal custom loss.\nbuild_model_lab()\nBuild the Lab model.\ncalculate_duty_cycle_lab()\nRun the Lab duty cycle.\ncalculate_generator_lab()\nCalculate generator performance.\ncalculate_magnetic_lab()\nRun the Lab magnetic calculation.\ncalculate_operating_point_lab()\nRun the Lab operating point calculation.\ncalculate_test_performance_lab()\nCalculate the test performance.\ncalculate_thermal_lab()\nRun the Lab thermal calculation.\nclear_model_build_lab()\nClear the Lab model build.\nexport_duty_cycle_lab()\nExport the calculated duty cycle data to the thermal model.\nexport_figure_lab(calculation_type, ...)\nExport an image of the Lab results graph.\nexport_lab_model(file_path)\nExport lab model.\nget_model_built_lab()\nTest if the Lab model must be built or rebuilt before running calculations.\nload_external_model_lab(file_path)\nLoad an external model data file.\nremove_external_custom_loss(name)\nRemove an external custom loss by name.\nremove_internal_custom_loss(name)\nRemove an internal custom loss by name.\nshow_results_viewer_lab(calculation_type)\nLoad the results viewer for the specified Lab calculation type.\nLab\nadd_external_custom_loss\nadd_internal_custom_loss\nbuild_model_lab\ncalculate_duty_cycle_lab\ncalculate_generator_lab\ncalculate_magnetic_lab\ncalculate_operating_point_lab\ncalculate_test_performance_lab\ncalculate_thermal_lab\nclear_model_build_lab\nexport_duty_cycle_lab\nexport_figure_lab\nexport_lab_model\nget_model_built_lab\nload_external_model_lab\nremove_external_custom_loss\nremove_internal_custom_loss\nshow_results_viewer_lab"
    },
    {
        "objectID": "methods/_autogen_General",
        "href": "methods/_autogen_General.html#general",
        "title": "General",
        "section": "General",
        "text": "clear_duty_cycle()\nClear the duty cycle in both the lab and thermal contexts.\nclear_message_log()\nClear the message log file for the model.\ncreate_report(file_path, template_file_path)\nCreate a Word report of the report tree structure.\ndownload_mot_file(file_path)\nDownload the current .mot file from Motor-CAD and write it to a local directory.\nexport_force_animation(animation, file_name)\nExport a force animation to a GIF file.\nexport_matrices(directory_path)\nExport the resistance, power, and capacitance matrices to files.\nexport_multi_force_data(file_name)\nExport calculated multiforce data to a file.\nexport_nvh_results_data(file_name)\nExport NVH results data to a file.\nexport_results(solution_type, file_path)\nExport results from a solution to a CSV file.\nexport_to_ansys_discovery(file_path)\nExport the model to a Python script file that can be run in Ansys Discovery.\nexport_to_ansys_electronics_desktop(file_path)\nExport the model to a VBS script file that can run in Ansys Electronics Desktop.\ngeometry_export()\nExport the geometry to the file specified in the DXFFileName parameter.\nget_licence()\nCheck if a license is available for the current context and machine type.\nget_license()\nCheck if a license is available for the current context and machine type.\nget_messages(num_messages)\nGet a list of the last N messages from the message history.\nload_custom_drive_cycle(file_path)\nLoad a custom waveform from a file.\nload_duty_cycle(file_name)\nLoad a duty cycle from a DAT file.\nload_dxf_file(file_name)\nLoad a DXF geometry file.\nload_fea_result(file_path, solution_number)\nLoad an existing FEA solution to allow viewing of FEA results.\nload_from_file(mot_file)\nLoad a MOT file into the Motor-CAD instance.\nload_magnetisation_curves(file_path)\nLoad the magnetization curves from a text file.\nload_report_structure(file_path)\nLoad the tree structure of the report from a file.\nload_report_tree()\nLoad the report with the tree structure of the modules and components.\nload_results(solution_type)\nLoad the output results from an \"EMagnetic\" or \"Thermal\" solution.\nload_template(template_name)\nLoad a motor template.\nload_winding_pattern(file_path)\nLoad the winding pattern from a text file.\nquit()\nQuit Motor-CAD.\nsave_duty_cycle(file_path)\nSave the duty cycle to a DAT file.\nsave_magnetisation_curves(file_name)\nSave the magnetisation curves to a text file.\nsave_results(solution_type)\nSave the output results from an \"EMagnetic\" or \"Thermal\" solution.\nsave_template(template_file_name, name, ...)\nSave the template to an MTT template file.\nsave_to_file(mot_file)\nSave the MOT file.\nsave_winding_pattern(file_path)\nSave the winding pattern to a file.\nset_free()\nFree the Motor-CAD instance.\nupload_mot_file(file_path)\nUpload a .mot file to Motor-CAD instance from local directory.\nGeneral\nclear_duty_cycle\nclear_message_log\ncreate_report\ndownload_mot_file\nexport_force_animation\nexport_matrices\nexport_multi_force_data\nexport_nvh_results_data\nexport_results\nexport_to_ansys_discovery\nexport_to_ansys_electronics_desktop\ngeometry_export\nDXFFileName\nget_licence\nget_license\nget_messages\nload_custom_drive_cycle\nload_duty_cycle\nload_dxf_file\nload_fea_result\nload_from_file\nload_magnetisation_curves\nload_report_structure\nload_report_tree\nload_results\n\"EMagnetic\"\n\"Thermal\"\nload_template\nload_winding_pattern\nquit\nsave_duty_cycle\nsave_magnetisation_curves\nsave_results\n\"EMagnetic\"\n\"Thermal\"\nsave_template\nsave_to_file\nsave_winding_pattern\nset_free\nupload_mot_file"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearDutyCycle",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearDutyCycle.html#cleardutycycle",
        "title": "ClearDutyCycle",
        "section": "ClearDutyCycle",
        "text": "Deprecated function. Replaced by MotorCAD.clear_duty_cycle().\nClearDutyCycle\nMotorCAD.clear_duty_cycle()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearDutyCycle",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearDutyCycle.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ClearDutyCycle",
        "title": "ClearDutyCycle > ClearDutyCycle > ClearDutyCycle",
        "section": "ClearDutyCycle > ClearDutyCycle",
        "text": "MotorCADCompatibility.ClearDutyCycle()\n\nDeprecated function. Replaced by MotorCAD.clear_duty_cycle().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.build_model_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.build_model_lab.html#build_model_lab",
        "title": "build_model_lab",
        "section": "build_model_lab",
        "text": "Build the Lab model.\nbuild_model_lab"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.build_model_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.build_model_lab.html#ansys.motorcad.core.motorcad_methods.MotorCAD.build_model_lab",
        "title": "build_model_lab > build_model_lab > build_model_lab",
        "section": "build_model_lab > build_model_lab",
        "text": "MotorCAD.build_model_lab()\n\nBuild the Lab model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.find_entity_from_coordinates",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.find_entity_from_coordinates.html#find_entity_from_coordinates",
        "title": "find_entity_from_coordinates",
        "section": "find_entity_from_coordinates",
        "text": "Search through region to find an entity with start and end coordinates.\nOrder of coordinates does not matter.\nfind_entity_from_coordinates\nLine\nArc\nentity"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.find_entity_from_coordinates",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.find_entity_from_coordinates.html#ansys.motorcad.core.geometry.RegionMagnet.find_entity_from_coordinates",
        "title": "find_entity_from_coordinates > find_entity_from_coordinates > find_entity_from_coordinates",
        "section": "find_entity_from_coordinates > find_entity_from_coordinates",
        "text": "RegionMagnet.find_entity_from_coordinates(coordinate_1, coordinate_2)\n\nSearch through region to find an entity with start and end coordinates.\n\nOrder of coordinates does not matter.\n\nParameters\n\ncoordinate_1: ansys.motorcad.core.geometry.Coordinate\n\n\n\ncoordinate_2: ansys.motorcad.core.geometry.Coordinate\n\n\n\nReturns\n\nLine or Arc entity\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/geometry_shapes",
        "href": "methods/geometry_shapes.html#geometry-shapes",
        "title": "Geometry shapes",
        "section": "Geometry shapes",
        "text": "Geometry shape functions are used to define and modify\nthe Motor-CAD Adaptive Templates geometry using PyMotorCAD.\nMore information on Adaptive Templates is available\nin the ref_user_guide under ref_adaptive_templates_UG.\nsquare(width, r_O, th_O)\nCreate a square of given width at a given set of coordinates.\neq_triangle_h(height, r_O, th_O)\nCreate an equilateral triangle of given height at a given set of coordinates.\neq_triangle_w(width, r_O, th_O)\nCreate an equilateral triangle of given width at a given set of coordinates.\ntriangular_notch(radius, sweep, ...)\nCreate a triangular notch for a rotor or stator at given angular position with given size.\nGeometry shapes\nsquare\neq_triangle_h\neq_triangle_w\ntriangular_notch"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.is_vertical",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.is_vertical.html#is_vertical",
        "title": "is_vertical",
        "section": "is_vertical",
        "text": "Check whether line is vertical.\nis_vertical"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.is_vertical",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.is_vertical.html#ansys.motorcad.core.geometry.Line.is_vertical",
        "title": "is_vertical > is_vertical > is_vertical",
        "section": "is_vertical > is_vertical",
        "text": "property Line.is_vertical\n\nCheck whether line is vertical.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveScreenToFile",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveScreenToFile.html#savescreentofile",
        "title": "SaveScreenToFile",
        "section": "SaveScreenToFile",
        "text": "Deprecated function. Replaced by MotorCAD.save_screen_to_file().\nSaveScreenToFile\nMotorCAD.save_screen_to_file()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveScreenToFile",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveScreenToFile.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveScreenToFile",
        "title": "SaveScreenToFile > SaveScreenToFile > SaveScreenToFile",
        "section": "SaveScreenToFile > SaveScreenToFile",
        "text": "MotorCADCompatibility.SaveScreenToFile(*args)\n\nDeprecated function. Replaced by MotorCAD.save_screen_to_file().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_steady_state_analysis",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_steady_state_analysis.html#do_steady_state_analysis",
        "title": "do_steady_state_analysis",
        "section": "do_steady_state_analysis",
        "text": "Run the thermal steady state analysis.\ndo_steady_state_analysis"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_steady_state_analysis",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.do_steady_state_analysis.html#ansys.motorcad.core.motorcad_methods.MotorCAD.do_steady_state_analysis",
        "title": "do_steady_state_analysis > do_steady_state_analysis > do_steady_state_analysis",
        "section": "do_steady_state_analysis > do_steady_state_analysis",
        "text": "MotorCAD.do_steady_state_analysis()\n\nRun the thermal steady state analysis.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.collides",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.collides.html#collides",
        "title": "collides",
        "section": "collides",
        "text": "Check whether any of the specified regions collide with self.\nMotor-CAD region object/list of objects\ncollides\nansys.motorcad.core.geometry.Region\npython:list\nof\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.collides",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.collides.html#ansys.motorcad.core.geometry.Region.collides",
        "title": "collides > collides > collides",
        "section": "collides > collides",
        "text": "Region.collides(regions)\n\nCheck whether any of the specified regions collide with self.\n\nParameters\n\nregions\n\nansys.motorcad.core.geometry.Region or python:list of ansys.motorcad.core.geometry.Region\n\nMotor-CAD region object/list of objects\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_functions/ansys.motorcad.core.geometry.get_entities_have_common_coordinate",
        "href": "methods/_autosummary_geometry_functions/ansys.motorcad.core.geometry.get_entities_have_common_coordinate.html#get_entities_have_common_coordinate",
        "title": "get_entities_have_common_coordinate",
        "section": "get_entities_have_common_coordinate",
        "text": "Check whether region entities create a closed region.\nLine or Arc object to check for common coordinate\nLine or Arc object to check for common coordinate\nget_entities_have_common_coordinate\nLine\nArc\nLine\nArc\nBoolean"
    },
    {
        "objectID": "methods/_autosummary_geometry_functions/ansys.motorcad.core.geometry.get_entities_have_common_coordinate",
        "href": "methods/_autosummary_geometry_functions/ansys.motorcad.core.geometry.get_entities_have_common_coordinate.html#ansys.motorcad.core.geometry.get_entities_have_common_coordinate",
        "title": "get_entities_have_common_coordinate > get_entities_have_common_coordinate > get_entities_have_common_coordinate",
        "section": "get_entities_have_common_coordinate > get_entities_have_common_coordinate",
        "text": "ansys.motorcad.core.geometry.get_entities_have_common_coordinate(entity_1, entity_2)\n\nCheck whether region entities create a closed region.\n\nParameters\n\nentity_1\n\nLine or Arc\n\nLine or Arc object to check for common coordinate\n\nentity_2\n\nLine or Arc\n\nLine or Arc object to check for common coordinate\n\nReturns\n\nBoolean\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.html#coordinate",
        "title": "Coordinate",
        "section": "Coordinate",
        "text": "Provides the Python representation of a coordinate in two-dimensional space.\nX value.\nY value.\nCoordinate.from_polar_coords(radius, theta)\nCreate Coordinate from polar coordinates.\nCoordinate.get_polar_coords_deg()\nGet coordinates as polar coordinates in degrees.\nCoordinate.mirror(mirror_line)\nMirror Coordinate about a line entity.\nCoordinate.rotate(centre_point, angle)\nRotate Coordinate around a point for a given angle.\nCoordinate.translate(x, y)\nTranslate Coordinate by specified x,y distances.\nCoordinate\npython:float\npython:float\nCoordinate.from_polar_coords\nCoordinate.get_polar_coords_deg\nCoordinate.mirror\nCoordinate.rotate\nCoordinate.translate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Coordinate.html#ansys.motorcad.core.geometry.Coordinate",
        "title": "Coordinate > Coordinate > Coordinate",
        "section": "Coordinate > Coordinate",
        "text": "class ansys.motorcad.core.geometry.Coordinate(x, y)\n\nProvides the Python representation of a coordinate in two-dimensional space.\n\nParameters\n\nx\n\npython:float\n\nX value.\n\ny\n\npython:float\n\nY value.\n\n!! processed by numpydoc !!\n\nMethods\n\n\n\n\n\n\n\nCoordinate.from_polar_coords(radius, theta)\n\nCreate Coordinate from polar coordinates.\n\nCoordinate.get_polar_coords_deg()\n\nGet coordinates as polar coordinates in degrees.\n\nCoordinate.mirror(mirror_line)\n\nMirror Coordinate about a line entity.\n\nCoordinate.rotate(centre_point, angle)\n\nRotate Coordinate around a point for a given angle.\n\nCoordinate.translate(x, y)\n\nTranslate Coordinate by specified x,y distances.\n\n"
    },
    {
        "objectID": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers",
        "href": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers.html#curved-rotor-flux-barriers-for-syncrel-u-shape",
        "title": "Curved Rotor Flux Barriers for SYNCREL U-Shape",
        "section": "Curved Rotor Flux Barriers for SYNCREL U-Shape",
        "text": "This script applies the adaptive templates functionality to alter SYNCREL U-Shape rotor template to\nuse curved rotor pockets.\nFor more information on the use of Adaptive Templates in Motor-CAD,\nand how to create, modify and debug Adaptive Templates Scripts,\nsee ref_adaptive_templates_UG in the ref_user_guide.\nAdaptive Templates in Motor-CAD require v2024.1.2 (Motor-CAD 2024 R1 Update) or later and\nPyMotorCAD v0.4.1. To update PyMotorCAD in Motor-CAD, go to Scripting -> Settings -> PyMotorCAD\nupdates and select ‘Update to Latest Release’.\nThis script does not support:\nZero inner/outer layer thickness\nInner/outer posts\nThis script is designed to be run from Motor-CAD template “i3”.\nIf no Motor-CAD file is open,\nthe i3 template will be loaded.\nTo set an adaptive geometry for a Motor-CAD file,\na script must be loaded in to the Adaptive Templates tab\n(Geometry -> Editor -> Adaptive Templates) in Motor-CAD\nand run.\nWhen the option ‘Geometry Templates Type’ is set to ‘Adaptive’,\nthis script is automatically run repeatedly\nto keep the Adaptive Geometry set in Motor-CAD.\nThis Python script can also be executed externally,\nbut unless the script is loaded in to the Adaptive Templates tab\nin Motor-CAD, the geometry will only be defined temporarily.\nCurved Rotor Flux Barriers for SYNCREL U-Shape"
    },
    {
        "objectID": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers",
        "href": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers.html#perform-required-imports",
        "title": "Curved Rotor Flux Barriers for SYNCREL U-Shape > Perform required imports",
        "section": "Perform required imports",
        "text": "Import pymotorcad to access Motor-CAD.\nImport Arc, Coordinate, Line, Region and rt_to_xy\nto define the adaptive template geometry.\nImport os, shutil, sys, and tempfile\nto open and save a temporary .mot file if none is open.\nPerform required imports\npymotorcad\nArc\nCoordinate\nLine\nRegion\nrt_to_xy\nos\nshutil\nsys\ntempfile"
    },
    {
        "objectID": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers",
        "href": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers.html#connect-to-motor-cad",
        "title": "Curved Rotor Flux Barriers for SYNCREL U-Shape > Connect to Motor-CAD",
        "section": "Connect to Motor-CAD",
        "text": "If this script is loaded into the Adaptive Templates file in Motor-CAD, the current Motor-CAD\ninstance is used.\nIf the script is run externally, these actions occur: a new Motor-CAD instance is opened,\nthe i3 SYNC motor template is loaded, and the file is saved to a temporary folder.\nTo keep a new Motor-CAD instance open after executing the script, use the\nMotorCAD(keep_instance_open=True)  option when opening the new instance.\nAlternatively, use the MotorCAD() method, which closes the Motor-CAD instance after the\nscript is executed.\nConnect to Motor-CAD\nMotorCAD(keep_instance_open=True)\nMotorCAD()"
    },
    {
        "objectID": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers",
        "href": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers.html#define-functions-for-the-adaptive-templates-script",
        "title": "Curved Rotor Flux Barriers for SYNCREL U-Shape > Define functions for the Adaptive Templates script",
        "section": "Define functions for the Adaptive Templates script",
        "text": "This example Adaptive Templates Script works by defining\na number of required functions.\nThese functions are then called within a for loop,\nwhich executes the script for each rotor duct layer.\nDefine functions for the Adaptive Templates script\nfor"
    },
    {
        "objectID": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers",
        "href": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers.html#calculate-barrier-arc-centre-and-radius-coordinates",
        "title": "Curved Rotor Flux Barriers for SYNCREL U-Shape > Calculate barrier arc centre and radius coordinates",
        "section": "Calculate barrier arc centre and radius coordinates",
        "text": "Define a function to get the radius and centre of a barrier arc.\nParameters:\ncoordinate_1 : Coordinate, Arc start coordinate.\ncoordinate_2 : Coordinate, Extra coordinate on arc\ncoordinate_3 : Coordinate, Arc end coordinate\narc_direction : Integer, Direction to create arc between start/end\nReturns:\nradius : float, Arc radius\ncentre : Coordinate, Arc centre coordinate\nCalculate barrier arc centre and radius coordinates\ncoordinate_1\ncoordinate_2\ncoordinate_3\narc_direction\nradius\ncentre"
    },
    {
        "objectID": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers",
        "href": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers.html#whether-corner-rounding-should-be-applied-to-pocket",
        "title": "Curved Rotor Flux Barriers for SYNCREL U-Shape > Whether corner rounding should be applied to pocket",
        "section": "Whether corner rounding should be applied to pocket",
        "text": "Define a function to determine whether corner rounding should be applied to pocket.\nReturns a boolean.\nReturns True if Corner Rounding is selected for the Rotor in the Motor-CAD\nfile, and if the Corner Rounding radius is set to a non-zero value.\nWhether corner rounding should be applied to pocket\nTrue"
    },
    {
        "objectID": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers",
        "href": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers.html#create-a-rotor-mirror-line",
        "title": "Curved Rotor Flux Barriers for SYNCREL U-Shape > Create a rotor mirror line",
        "section": "Create a rotor mirror line",
        "text": "Define a function to create mirror line through rotor from origin to airgap.\nReturns a Line.\nGet the rotor diameter and pole number from the Motor-CAD file.\nCalculate the airgap coordinates.\nCreate a rotor mirror line"
    },
    {
        "objectID": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers",
        "href": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers.html#get-list-of-coordinates",
        "title": "Curved Rotor Flux Barriers for SYNCREL U-Shape > Get list of coordinates",
        "section": "Get list of coordinates",
        "text": "Define a function to get a list of coordinates\nfrom the pocket using coordinate_indices.\nOrder of coordinates: start, end, extra coordinate on arc.\nParameters:\npocket : Region, Pocket region\ncoordinate_indices : list of integer, Pocket region coordinate indices\nmirror_line : Line, Mirror line to generate extra coordinate on arc\nReturns\nlist of Coordinates\nLoop through coordinates and add to a list.\nMirror the first coordinate to generate the third coordinate on the arc.\nGet list of coordinates\npocket\ncoordinate_indices\nmirror_line"
    },
    {
        "objectID": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers",
        "href": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers.html#get-list-of-coordinates-for-pocket-arcs",
        "title": "Curved Rotor Flux Barriers for SYNCREL U-Shape > Get list of coordinates for pocket arcs",
        "section": "Get list of coordinates for pocket arcs",
        "text": "Define functions to get a list of coordinates\nto use to generate the top and bottom arcs for pocket.\nReturn coordinates at indices from pocket.points.\nThese indices match up with coordinates from each pocket region\nwith/without corner rounding.\nOrder of coordinates: [start, end, centre, start, end, centre]\nIndices have been selected using Motor-CAD geometry editor.\nFor no centre post:\nParameters:\npocket : Region, Pocket region\nReturns\nlist of Coordinates\nFor centre post:\nParameters:\npocket : Region, Pocket region\nReturns:\nlist of Coordinates\nMirror required to generate the third point on arc.\nThis third point is required to calculate the centre and radius of arc.\nThe mirror line mirrors the start point of each pocket arc\nto generate this third point.\nGet list of coordinates for pocket arcs\npocket\npocket\npocket.points\npocket\npocket"
    },
    {
        "objectID": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers",
        "href": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers.html#update-pocket-geometry",
        "title": "Curved Rotor Flux Barriers for SYNCREL U-Shape > Update pocket geometry",
        "section": "Update pocket geometry",
        "text": "Define a function to update the pocket entities\nto create a curved pocket using input coordinates.\nParameters:\npocket : Region, Pocket region\ncoordinates : list of Coordinate, Coordinates to generate arcs with in region\nCreate a list of arc entities from the coordinates.\nRemove the entities between the start and end coordinates\nof each arc, then insert into the pocket.\nUpdate pocket geometry\npocket\npocket\ncoordinates"
    },
    {
        "objectID": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers",
        "href": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers.html#get-unique-pocket-name",
        "title": "Curved Rotor Flux Barriers for SYNCREL U-Shape > Get unique pocket name",
        "section": "Get unique pocket name",
        "text": "Define a function to return the unique pocket name\nused in Motor-CAD.\nParameters:\nindex : integer, Current pocket index\nReturns:\nstring\nGet unique pocket name\nindex"
    },
    {
        "objectID": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers",
        "href": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers.html#create-the-adaptive-templates-geometry",
        "title": "Curved Rotor Flux Barriers for SYNCREL U-Shape > Create the Adaptive Templates geometry",
        "section": "Create the Adaptive Templates geometry",
        "text": "Get the number of layers in the rotor for the Motor-CAD file\nFor each layer:\nGet the U-Shape layer parameters\nRaise an exception if the curved barrier\ncan’t be created for a layer\ndue to the thickness being zero\nRaise an exception if the curved barrier\ncan’t be created for a layer\ndue to the post width being zero\nGet the pocket from Motor-CAD using unique name\nDetermine whether there are 1 or 2 pockets in the layer\nand get the new coordinates\nUpdate the rotor pocket geometry with the new coordinates\nSet the updated pocket region in Motor-CAD\nIf there are 2 pockets in the layer,\nthe left pocket region is updated first.\nThis is then mirrored to update the right pocket region.\nCreate the Adaptive Templates geometry"
    },
    {
        "objectID": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers",
        "href": "examples/adaptive_library/UShapeSYNCRELCurvedFluxBarriers.html#load-in-adaptive-templates-script-if-required",
        "title": "Curved Rotor Flux Barriers for SYNCREL U-Shape > Load in Adaptive Templates script if required",
        "section": "Load in Adaptive Templates script if required",
        "text": "When this script is run externally, the script executes the following:\nSet Geometry type to Adaptive.\nLoad the script into the Adaptive Templates tab.\nGo to the Geometry -> Radial tab to run the Adaptive Templates script and display the new\ngeometry.\nWhen running in a Jupyter Notebook, you must provide the path for the Adaptive Templates script\n(PY file) instead of sys.argv[0] when using the load_adaptive_script() method.\nTotal running time of the script: (0 minutes 20.907 seconds)\nDownload Jupyter notebook: UShapeSYNCRELCurvedFluxBarriers.ipynb\nDownload Python source code: UShapeSYNCRELCurvedFluxBarriers.py\nDownload zipped: UShapeSYNCRELCurvedFluxBarriers.zip\nGallery generated by Sphinx-Gallery\nLoad in Adaptive Templates script if required\nsys.argv[0]\nload_adaptive_script()\nDownload Jupyter notebook: UShapeSYNCRELCurvedFluxBarriers.ipynb\nDownload Python source code: UShapeSYNCRELCurvedFluxBarriers.py\nDownload zipped: UShapeSYNCRELCurvedFluxBarriers.zip"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_saturation_map",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_saturation_map.html#calculate_saturation_map",
        "title": "calculate_saturation_map",
        "section": "calculate_saturation_map",
        "text": "Generate electromagnetic saturation and loss data.\nSaturation (flux linkages and inductances) and loss data can be used\nin other analysis and modeling tools. The default MAT file is saved in\nthe lab folder in the .mot directory.\ncalculate_saturation_map\n.mot"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_saturation_map",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_saturation_map.html#ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_saturation_map",
        "title": "calculate_saturation_map > calculate_saturation_map > calculate_saturation_map",
        "section": "calculate_saturation_map > calculate_saturation_map",
        "text": "MotorCAD.calculate_saturation_map()\n\nGenerate electromagnetic saturation and loss data.\n\nSaturation (flux linkages and inductances) and loss data can be used\nin other analysis and modeling tools. The default MAT file is saved in\nthe lab folder in the .mot directory.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.rotate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.rotate.html#rotate",
        "title": "rotate",
        "section": "rotate",
        "text": "Rotate entity around a point for a given angle.\nCoordinate to rotate line around.\nAngle of rotation in degrees. Anticlockwise direction is positive.\nrotate\nCoordinate\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.rotate",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.rotate.html#ansys.motorcad.core.geometry.Arc.rotate",
        "title": "rotate > rotate > rotate",
        "section": "rotate > rotate",
        "text": "Arc.rotate(centre_point, angle)\n\nRotate entity around a point for a given angle.\n\nParameters\n\ncentre_point\n\nCoordinate\n\nCoordinate to rotate line around.\n\nangle\n\npython:float\n\nAngle of rotation in degrees. Anticlockwise direction is positive.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateIMSaturationModel",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateIMSaturationModel.html#calculateimsaturationmodel",
        "title": "CalculateIMSaturationModel",
        "section": "CalculateIMSaturationModel",
        "text": "Deprecated function. Replaced by MotorCAD.calculate_im_saturation_model().\nCalculateIMSaturationModel\nMotorCAD.calculate_im_saturation_model()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateIMSaturationModel",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateIMSaturationModel.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateIMSaturationModel",
        "title": "CalculateIMSaturationModel > CalculateIMSaturationModel > CalculateIMSaturationModel",
        "section": "CalculateIMSaturationModel > CalculateIMSaturationModel",
        "text": "MotorCADCompatibility.CalculateIMSaturationModel()\n\nDeprecated function. Replaced by MotorCAD.calculate_im_saturation_model().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autogen_Utility",
        "href": "methods/_autogen_Utility.html#utility",
        "title": "Utility",
        "section": "Utility",
        "text": "is_file_loaded()\nCheck if a Motor-CAD file is loaded.\nis_open()\nCheck if the Motor-CAD executable file is running.\nUtility\nis_file_loaded\nis_open"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddRegion_RT",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddRegion_RT.html#addregion_rt",
        "title": "AddRegion_RT",
        "section": "AddRegion_RT",
        "text": "Deprecated function. Replaced by MotorCAD.add_region_rt().\nAddRegion_RT\nMotorCAD.add_region_rt()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddRegion_RT",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddRegion_RT.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.AddRegion_RT",
        "title": "AddRegion_RT > AddRegion_RT > AddRegion_RT",
        "section": "AddRegion_RT > AddRegion_RT",
        "text": "MotorCADCompatibility.AddRegion_RT(*args)\n\nDeprecated function. Replaced by MotorCAD.add_region_rt().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.set_3d_component_visibility",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.set_3d_component_visibility.html#set_3d_component_visibility",
        "title": "set_3d_component_visibility",
        "section": "set_3d_component_visibility",
        "text": "Set the visibility of a component by group name and component name.\nName of the group. Options are \"Machine\", \"Stator\", \"Rotor\",\nand \"Shaft Components\". If the component is in the thermal context,\n\"Mounting\" and \"Outer Casing\" are also options.\nName of the component. The component names that are available depend\non which model is used. Options include \"All\", \"Lamination\",\nand \"Wedge\".\nVisibility level. Values range from 0 (invisible) to 100 (solid).\nset_3d_component_visibility\npython:str\n\"Machine\"\n\"Stator\"\n\"Rotor\"\n\"Shaft Components\"\n\"Mounting\"\n\"Outer Casing\"\npython:str\n\"All\"\n\"Lamination\"\n\"Wedge\"\npython:int\n0\n100"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.set_3d_component_visibility",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.set_3d_component_visibility.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_3d_component_visibility",
        "title": "set_3d_component_visibility > set_3d_component_visibility > set_3d_component_visibility",
        "section": "set_3d_component_visibility > set_3d_component_visibility",
        "text": "MotorCAD.set_3d_component_visibility(group_name, component_name, visibility)\n\nSet the visibility of a component by group name and component name.\n\nParameters\n\ngroup_name\n\npython:str\n\nName of the group. Options are \"Machine\", \"Stator\", \"Rotor\",\nand \"Shaft Components\". If the component is in the thermal context,\n\"Mounting\" and \"Outer Casing\" are also options.\n\ncomponent_name\n\npython:str\n\nName of the component. The component names that are available depend\non which model is used. Options include \"All\", \"Lamination\",\nand \"Wedge\".\n\nvisibility\n\npython:int\n\nVisibility level. Values range from 0 (invisible) to 100 (solid).\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.round_corners",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.round_corners.html#round_corners",
        "title": "round_corners",
        "section": "round_corners",
        "text": "Round multiple corners of a region.\nEach corner coordinate must already exist on two entities belonging to the region.\nThe two entities adjacent to each corner are shortened, and an arc is created\nbetween them.\nList of coordinates of the corners to round.\nRadius to round the corners by.\nround_corners\npython:list\nof\nansys.motorcad.core.geometry.Coordinate\npython:float"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.round_corners",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.round_corners.html#ansys.motorcad.core.geometry.RegionMagnet.round_corners",
        "title": "round_corners > round_corners > round_corners",
        "section": "round_corners > round_corners",
        "text": "RegionMagnet.round_corners(corner_coordinates, radius)\n\nRound multiple corners of a region.\n\nEach corner coordinate must already exist on two entities belonging to the region.\nThe two entities adjacent to each corner are shortened, and an arc is created\nbetween them.\n\nParameters\n\ncorner_coordinates\n\npython:list of ansys.motorcad.core.geometry.Coordinate\n\nList of coordinates of the corners to round.\n\nradius\n\npython:float\n\nRadius to round the corners by.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_line_rt",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_line_rt.html#add_line_rt",
        "title": "add_line_rt",
        "section": "add_line_rt",
        "text": "Add a line to the Motor-CAD axial geometry with an r, t (polar) coordinate system.\nUse degrees for angles.\nDeprecated since version 0.6.0: add_line_rt will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\nStart position for the radial coordinate.\nStart position for the angular coordinate in degrees.\nEnd position for the radial coordinate.\nEnd position for the angular coordinate in degrees.\nadd_line_rt\npython:float\npython:float\npython:float\npython:float"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_line_rt",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_line_rt.html#ansys.motorcad.core.motorcad_methods.MotorCAD.add_line_rt",
        "title": "add_line_rt > add_line_rt > add_line_rt",
        "section": "add_line_rt > add_line_rt",
        "text": "MotorCAD.add_line_rt(radius_start, theta_start, radius_end, theta_end)\n\nAdd a line to the Motor-CAD axial geometry with an r, t (polar) coordinate system.\n\nUse degrees for angles.\n\nDeprecated since version 0.6.0: add_line_rt will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\nParameters\n\nradius_start\n\npython:float\n\nStart position for the radial coordinate.\n\ntheta_start\n\npython:float\n\nStart position for the angular coordinate in degrees.\n\nradius_end\n\npython:float\n\nEnd position for the radial coordinate.\n\ntheta_end\n\npython:float\n\nEnd position for the angular coordinate in degrees.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveExternalCircuit",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveExternalCircuit.html#saveexternalcircuit",
        "title": "SaveExternalCircuit",
        "section": "SaveExternalCircuit",
        "text": "Deprecated function. Replaced by MotorCAD.save_external_circuit().\nSaveExternalCircuit\nMotorCAD.save_external_circuit()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveExternalCircuit",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveExternalCircuit.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveExternalCircuit",
        "title": "SaveExternalCircuit > SaveExternalCircuit > SaveExternalCircuit",
        "section": "SaveExternalCircuit > SaveExternalCircuit",
        "text": "MotorCADCompatibility.SaveExternalCircuit(*args)\n\nDeprecated function. Replaced by MotorCAD.save_external_circuit().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_nvh_results_data",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_nvh_results_data.html#export_nvh_results_data",
        "title": "export_nvh_results_data",
        "section": "export_nvh_results_data",
        "text": "Export NVH results data to a file.\nName of the file. Use the r'filepath'\nsyntax to force Python to ignore special characters.\nexport_nvh_results_data\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_nvh_results_data",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.export_nvh_results_data.html#ansys.motorcad.core.motorcad_methods.MotorCAD.export_nvh_results_data",
        "title": "export_nvh_results_data > export_nvh_results_data > export_nvh_results_data",
        "section": "export_nvh_results_data > export_nvh_results_data",
        "text": "MotorCAD.export_nvh_results_data(file_name)\n\nExport NVH results data to a file.\n\nParameters\n\nfile_name\n\npython:str\n\nName of the file. Use the r'filepath'\nsyntax to force Python to ignore special characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateSaturationMap",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateSaturationMap.html#calculatesaturationmap",
        "title": "CalculateSaturationMap",
        "section": "CalculateSaturationMap",
        "text": "Deprecated function. Replaced by MotorCAD.calculate_saturation_map().\nCalculateSaturationMap\nMotorCAD.calculate_saturation_map()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateSaturationMap",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateSaturationMap.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.CalculateSaturationMap",
        "title": "CalculateSaturationMap > CalculateSaturationMap > CalculateSaturationMap",
        "section": "CalculateSaturationMap > CalculateSaturationMap",
        "text": "MotorCADCompatibility.CalculateSaturationMap()\n\nDeprecated function. Replaced by MotorCAD.calculate_saturation_map().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_magnetisation_curves",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_magnetisation_curves.html#save_magnetisation_curves",
        "title": "save_magnetisation_curves",
        "section": "save_magnetisation_curves",
        "text": "Save the magnetisation curves to a text file.\nThis method is for switched reluctance machines (SRMs) only.\nFull path to the text file, including file name. Use the r'filepath'\nsyntax to force Python to ignore special characters.\nsave_magnetisation_curves\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_magnetisation_curves",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.save_magnetisation_curves.html#ansys.motorcad.core.motorcad_methods.MotorCAD.save_magnetisation_curves",
        "title": "save_magnetisation_curves > save_magnetisation_curves > save_magnetisation_curves",
        "section": "save_magnetisation_curves > save_magnetisation_curves",
        "text": "MotorCAD.save_magnetisation_curves(file_name)\n\nSave the magnetisation curves to a text file.\n\nThis method is for switched reluctance machines (SRMs) only.\n\nParameters\n\nfile_name\n\npython:str\n\nFull path to the text file, including file name. Use the r'filepath'\nsyntax to force Python to ignore special characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.check_closed_region",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.check_closed_region.html#check_closed_region",
        "title": "check_closed_region",
        "section": "check_closed_region",
        "text": "Check region is closed using region detection.\nMotor-CAD region object.\ncheck_closed_region\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.check_closed_region",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.check_closed_region.html#ansys.motorcad.core.motorcad_methods.MotorCAD.check_closed_region",
        "title": "check_closed_region > check_closed_region > check_closed_region",
        "section": "check_closed_region > check_closed_region",
        "text": "MotorCAD.check_closed_region(region)\n\nCheck region is closed using region detection.\n\nParameters\n\nregion\n\nansys.motorcad.core.geometry.Region\n\nMotor-CAD region object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.get_array_variable_2d",
        "href": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.get_array_variable_2d.html#get_array_variable_2d",
        "title": "get_array_variable_2d",
        "section": "get_array_variable_2d",
        "text": "Get a value from a 2D array at element [array_index1,array_index2].\nName of the array.\nFirst index of the array.\nSecond index of the array.\nValue of the Motor-CAD variable.\nget_array_variable_2d\n[array_index1,array_index2]\npython:str\npython:int\npython:int"
    },
    {
        "objectID": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.get_array_variable_2d",
        "href": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.get_array_variable_2d.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_array_variable_2d",
        "title": "get_array_variable_2d > get_array_variable_2d > get_array_variable_2d",
        "section": "get_array_variable_2d > get_array_variable_2d",
        "text": "MotorCAD.get_array_variable_2d(array_name, array_index1, array_index2)\n\nGet a value from a 2D array at element [array_index1,array_index2].\n\nParameters\n\narray_name\n\npython:str\n\nName of the array.\n\narray_index1\n\npython:int\n\nFirst index of the array.\n\narray_index2\n\npython:int\n\nSecond index of the array.\n\nReturns\n\nint|float|str|bool\n\nValue of the Motor-CAD variable.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autogen_Variables",
        "href": "methods/_autogen_Variables.html#variables",
        "title": "Variables",
        "section": "Variables",
        "text": "get_array_variable(array_name, array_index)\nGet a Motor-CAD array variable.\nget_array_variable_2d(array_name, ...)\nGet a value from a 2D array at element [array_index1,array_index2].\nget_file_name()\nGet current .mot file name and path.\nget_variable(variable_name)\nGet a Motor-CAD variable.\nrestore_compatibility_settings()\nRestore model compatibility settings to default values to use the latest methods.\nset_array_variable(array_name, array_index, ...)\nSet a Motor-CAD array variable.\nset_array_variable_2d(array_name, ...)\nSet the value of a 2D array at element [array_index1,array_index2].\nset_variable(variable_name, variable_value)\nSet a Motor-CAD variable.\nVariables\nget_array_variable\nget_array_variable_2d\n[array_index1,array_index2]\nget_file_name\nget_variable\nrestore_compatibility_settings\nset_array_variable\nset_array_variable_2d\n[array_index1,array_index2]\nset_variable"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.lamination_type",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.lamination_type.html#lamination_type",
        "title": "lamination_type",
        "section": "lamination_type",
        "text": "Get or set lamination type of region from Motor-CAD.\nlamination_type\npython:str"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.lamination_type",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionMagnet.lamination_type.html#ansys.motorcad.core.geometry.RegionMagnet.lamination_type",
        "title": "lamination_type > lamination_type > lamination_type",
        "section": "lamination_type > lamination_type",
        "text": "property RegionMagnet.lamination_type\n\nGet or set lamination type of region from Motor-CAD.\n\nReturns\n\npython:str\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_shapes/ansys.motorcad.core.geometry_shapes.triangular_notch",
        "href": "methods/_autosummary_geometry_shapes/ansys.motorcad.core.geometry_shapes.triangular_notch.html#triangular_notch",
        "title": "triangular_notch",
        "section": "triangular_notch",
        "text": "Create a triangular notch for a rotor or stator at given angular position with given size.\nRadius value, radius of the Rotor or Stator for which the notch is being defined.\nSweep value, the angular distance (in degrees) that the notch spans.\nAngle value, angular coordinate of the notch centre.\nDepth value, depth of the notch.\nRegion type with two Line and one Arc entity types.\ntriangular_notch\npython:float\npython:float\npython:float\npython:float\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_geometry_shapes/ansys.motorcad.core.geometry_shapes.triangular_notch",
        "href": "methods/_autosummary_geometry_shapes/ansys.motorcad.core.geometry_shapes.triangular_notch.html#ansys.motorcad.core.geometry_shapes.triangular_notch",
        "title": "triangular_notch > triangular_notch > triangular_notch",
        "section": "triangular_notch > triangular_notch",
        "text": "ansys.motorcad.core.geometry_shapes.triangular_notch(radius, sweep, centre_angle, depth)\n\nCreate a triangular notch for a rotor or stator at given angular position with given size.\n\nParameters\n\nradius\n\npython:float\n\nRadius value, radius of the Rotor or Stator for which the notch is being defined.\n\nsweep\n\npython:float\n\nSweep value, the angular distance (in degrees) that the notch spans.\n\ncentre_angle\n\npython:float\n\nAngle value, angular coordinate of the notch centre.\n\ndepth\n\npython:float\n\nDepth value, depth of the notch.\n\nReturns\n\nthis_triangular_notch\n\nansys.motorcad.core.geometry.Region\n\nRegion type with two Line and one Arc entity types.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.export_duty_cycle_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.export_duty_cycle_lab.html#export_duty_cycle_lab",
        "title": "export_duty_cycle_lab",
        "section": "export_duty_cycle_lab",
        "text": "Export the calculated duty cycle data to the thermal model.\nexport_duty_cycle_lab"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.export_duty_cycle_lab",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.export_duty_cycle_lab.html#ansys.motorcad.core.motorcad_methods.MotorCAD.export_duty_cycle_lab",
        "title": "export_duty_cycle_lab > export_duty_cycle_lab > export_duty_cycle_lab",
        "section": "export_duty_cycle_lab > export_duty_cycle_lab",
        "text": "MotorCAD.export_duty_cycle_lab()\n\nExport the calculated duty cycle data to the thermal model.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_slot",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_slot.html#rotor_slot",
        "title": "rotor_slot",
        "section": "rotor_slot",
        "text": "rotor_slot"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_slot",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.rotor_slot.html#ansys.motorcad.core.geometry.RegionType.rotor_slot",
        "title": "rotor_slot > rotor_slot > rotor_slot",
        "section": "rotor_slot > rotor_slot",
        "text": "RegionType.rotor_slot = 'Rotor Slot'\n\n"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_power_source_value",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_power_source_value.html#set_power_source_value",
        "title": "set_power_source_value",
        "section": "set_power_source_value",
        "text": "Set or create a power source.\nset_power_source_value"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_power_source_value",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.set_power_source_value.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_power_source_value",
        "title": "set_power_source_value > set_power_source_value > set_power_source_value",
        "section": "set_power_source_value > set_power_source_value",
        "text": "MotorCAD.set_power_source_value(name, node1, value, rpm_ref, rpm_coef, description)\n\nSet or create a power source.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.centroid",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.centroid.html#centroid",
        "title": "centroid",
        "section": "centroid",
        "text": "Get the region centroid.\ncentroid"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.centroid",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.centroid.html#ansys.motorcad.core.geometry.Region.centroid",
        "title": "centroid > centroid > centroid",
        "section": "centroid > centroid",
        "text": "property Region.centroid\n\nGet the region centroid.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_duct",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_duct.html#stator_duct",
        "title": "stator_duct",
        "section": "stator_duct",
        "text": "stator_duct"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_duct",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.RegionType.stator_duct.html#ansys.motorcad.core.geometry.RegionType.stator_duct",
        "title": "stator_duct > stator_duct > stator_duct",
        "section": "stator_duct > stator_duct",
        "text": "RegionType.stator_duct = 'Stator Duct'\n\n"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.midpoint",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.midpoint.html#midpoint",
        "title": "midpoint",
        "section": "midpoint",
        "text": "Get midpoint of Line.\nmidpoint\nCoordinate"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.midpoint",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.midpoint.html#ansys.motorcad.core.geometry.Line.midpoint",
        "title": "midpoint > midpoint > midpoint",
        "section": "midpoint > midpoint",
        "text": "property Line.midpoint\n\nGet midpoint of Line.\n\nReturns\n\nCoordinate\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodeTemperature",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodeTemperature.html#getnodetemperature",
        "title": "GetNodeTemperature",
        "section": "GetNodeTemperature",
        "text": "Deprecated function. Replaced by MotorCAD.get_node_temperature().\nGetNodeTemperature\nMotorCAD.get_node_temperature()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodeTemperature",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodeTemperature.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetNodeTemperature",
        "title": "GetNodeTemperature > GetNodeTemperature > GetNodeTemperature",
        "section": "GetNodeTemperature > GetNodeTemperature",
        "text": "MotorCADCompatibility.GetNodeTemperature(*args)\n\nDeprecated function. Replaced by MotorCAD.get_node_temperature().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.remove_external_custom_loss",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.remove_external_custom_loss.html#remove_external_custom_loss",
        "title": "remove_external_custom_loss",
        "section": "remove_external_custom_loss",
        "text": "Remove an external custom loss by name.\nName of lab external custom loss\nremove_external_custom_loss\npython:str"
    },
    {
        "objectID": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.remove_external_custom_loss",
        "href": "methods/_autosummary_Lab/ansys.motorcad.core.motorcad_methods.MotorCAD.remove_external_custom_loss.html#ansys.motorcad.core.motorcad_methods.MotorCAD.remove_external_custom_loss",
        "title": "remove_external_custom_loss > remove_external_custom_loss > remove_external_custom_loss",
        "section": "remove_external_custom_loss > remove_external_custom_loss",
        "text": "MotorCAD.remove_external_custom_loss(name)\n\nRemove an external custom loss by name.\n\nParameters\n\nname\n\npython:str\n\nName of lab external custom loss\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.count",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.count.html#count",
        "title": "count",
        "section": "count",
        "text": "Return number of occurrences of value.\ncount"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.count",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.count.html#ansys.motorcad.core.geometry.EntityList.count",
        "title": "count > count > count",
        "section": "count > count",
        "text": "EntityList.count(value, /)\n\nReturn number of occurrences of value.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_fea_graph",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_fea_graph.html#get_fea_graph",
        "title": "get_fea_graph",
        "section": "get_fea_graph",
        "text": "Get graph points from a Motor-CAD FEA graph.\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\nWhich skew slice to get results from. Slice 1 is the first.\nPoint number to get x and y coordinate arrays from for\ntransient graphs.\nvalue of x coordinates from graph\nvalue of y coordinates from graph\nget_fea_graph\npython:str\npython:int\npython:int\npython:int\npython:list\npython:list"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_fea_graph",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_fea_graph.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_fea_graph",
        "title": "get_fea_graph > get_fea_graph > get_fea_graph",
        "section": "get_fea_graph > get_fea_graph",
        "text": "MotorCAD.get_fea_graph(graph_name, slice_number, point_number=0)\n\nGet graph points from a Motor-CAD FEA graph.\n\nParameters\n\ngraph_name\n\npython:str, python:int\n\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\n\nslice_number\n\npython:int\n\nWhich skew slice to get results from. Slice 1 is the first.\n\npoint_number\n\npython:int\n\nPoint number to get x and y coordinate arrays from for\ntransient graphs.\n\nReturns\n\nx_values\n\npython:list\n\nvalue of x coordinates from graph\n\ny_values\n\npython:list\n\nvalue of y coordinates from graph\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveTransientPowerValues",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveTransientPowerValues.html#savetransientpowervalues",
        "title": "SaveTransientPowerValues",
        "section": "SaveTransientPowerValues",
        "text": "Deprecated function. Replaced by MotorCAD.save_transient_power_values().\nSaveTransientPowerValues\nMotorCAD.save_transient_power_values()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveTransientPowerValues",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveTransientPowerValues.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.SaveTransientPowerValues",
        "title": "SaveTransientPowerValues > SaveTransientPowerValues > SaveTransientPowerValues",
        "section": "SaveTransientPowerValues > SaveTransientPowerValues",
        "text": "MotorCADCompatibility.SaveTransientPowerValues(*args)\n\nDeprecated function. Replaced by MotorCAD.save_transient_power_values().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportResults",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportResults.html#exportresults",
        "title": "ExportResults",
        "section": "ExportResults",
        "text": "Deprecated function. Replaced by MotorCAD.export_results().\nExportResults\nMotorCAD.export_results()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportResults",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportResults.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportResults",
        "title": "ExportResults > ExportResults > ExportResults",
        "section": "ExportResults > ExportResults",
        "text": "MotorCADCompatibility.ExportResults(*args)\n\nDeprecated function. Replaced by MotorCAD.export_results().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.area",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.area.html#area",
        "title": "area",
        "section": "area",
        "text": "Get the region area.\narea"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.area",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.area.html#ansys.motorcad.core.geometry.Region.area",
        "title": "area > area > area",
        "section": "area > area",
        "text": "property Region.area\n\nGet the region area.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.set_component_material",
        "href": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.set_component_material.html#set_component_material",
        "title": "set_component_material",
        "section": "set_component_material",
        "text": "Set the solid material properties of the component from the materials database.\nComponent name. In Motor-CAD, you can select Input Data -> Materials\nand view the Component column to see component names.\nName of the solid material.\nset_component_material\npython:str\npython:str"
    },
    {
        "objectID": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.set_component_material",
        "href": "methods/_autosummary_Materials/ansys.motorcad.core.motorcad_methods.MotorCAD.set_component_material.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_component_material",
        "title": "set_component_material > set_component_material > set_component_material",
        "section": "set_component_material > set_component_material",
        "text": "MotorCAD.set_component_material(component_name, material_name)\n\nSet the solid material properties of the component from the materials database.\n\nParameters\n\ncomponent_name\n\npython:str\n\nComponent name. In Motor-CAD, you can select Input Data -> Materials\nand view the Component column to see component names.\n\nmaterial_name\n\npython:str\n\nName of the solid material.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/adaptive_library/BezierCurveRotorPockets",
        "href": "examples/adaptive_library/BezierCurveRotorPockets.html#bezier-curve-rotor-pockets",
        "title": "Bezier curve rotor pockets",
        "section": "Bezier curve rotor pockets",
        "text": "This script applies the adaptive templates functionality to modify rotor pockets\nwith a custom curve defined using a Bezier function.\nThis script requires Motor-CAD 2024 R2 or later.\nThis script is designed to be run from a Motor-CAD model based on the e4a template (a 48 slot,\n8 pole IPM machine). The model is modified from the template by adjusting the Standard Template\ngeometry parameters as follows:\nSet L1 Bridge thickness to 2 mm.\nSet L1 Pole V Angle to 180 degrees.\nSet L1 Magnet Post to 0 mm.\nSet L1 Magnet Separation to 0 mm.\nSet L1 Mag Gap Inner to 0 mm.\nIf no Motor-CAD file is open, the e4a template is loaded and the geometry is adjusted as\ndescribed earlier.\nBezier curve rotor pockets"
    },
    {
        "objectID": "examples/adaptive_library/BezierCurveRotorPockets",
        "href": "examples/adaptive_library/BezierCurveRotorPockets.html#perform-required-imports",
        "title": "Bezier curve rotor pockets > Perform required imports",
        "section": "Perform required imports",
        "text": "Import the pymotorcad package to access Motor-CAD.\nImport the Coordinate, Arc, Line and rt_to_xy objects\nto define the adaptive template geometry.\nImport bezier used to draw the curve.\nImport the os, shutil, sys and tempfile packages\nto open and save a temporary MOT file if none is open.\nPerform required imports\npymotorcad\nCoordinate\nArc\nLine\nrt_to_xy\nbezier\nos\nshutil\nsys\ntempfile"
    },
    {
        "objectID": "examples/adaptive_library/BezierCurveRotorPockets",
        "href": "examples/adaptive_library/BezierCurveRotorPockets.html#connect-to-motor-cad",
        "title": "Bezier curve rotor pockets > Connect to Motor-CAD",
        "section": "Connect to Motor-CAD",
        "text": "If this script is loaded into the Adaptive Templates file in Motor-CAD, the current Motor-CAD\ninstance is used.\nIf the script is run externally, these actions occur: a new Motor-CAD instance is opened,\nthe e4a IPM motor template is loaded, the geometry changes described earlier are applied and the\nfile is saved to a temporary folder. To keep a new Motor-CAD instance open after executing the\nscript, use the MotorCAD(keep_instance_open=True) option when opening the new instance.\nAlternatively, use the MotorCAD() method, which closes the Motor-CAD instance after the\nscript is executed.\nConnect to Motor-CAD\nMotorCAD(keep_instance_open=True)\nMotorCAD()"
    },
    {
        "objectID": "examples/adaptive_library/BezierCurveRotorPockets",
        "href": "examples/adaptive_library/BezierCurveRotorPockets.html#set-adaptive-parameter-if-required",
        "title": "Bezier curve rotor pockets > Set adaptive parameter if required",
        "section": "Set adaptive parameter if required",
        "text": "The set_adaptive_parameter_default function checks if a parameter exists. If not,\nit creates the parameter with a default value.\nSet the required L1 Bezier Curve Projection, L1 Upper Convex and L1 Lower Concave\nparameters if undefined.\nThe adaptive parameters are used to define the curved rotor pocket geometry with a Bezier\nfunction. The parameters relate to the rotor pocket shape as follows:\nL1 Bezier Curve Projection: Defines the rotor pocket extension beyond the magnet edge in the\ndirection of the magnet length in mm.\nL1 Upper Convex: Defines the concave rotor pocket extension beyond the magnet edge in the\ndirection of the magnet thickness. This parameter is dependent on the magnet thickness (a\nStandard Template parameter).\nL1 Lower Concave: Defines the convex rotor pocket curvature in the direction of the magnet\nthickness. This parameter is dependent on the magnet thickness (a Standard Template parameter).\nSet adaptive parameter if required\nset_adaptive_parameter_default\nL1 Bezier Curve Projection\nL1 Upper Convex\nL1 Lower Concave\nL1 Bezier Curve Projection\nL1 Upper Convex\nL1 Lower Concave"
    },
    {
        "objectID": "examples/adaptive_library/BezierCurveRotorPockets",
        "href": "examples/adaptive_library/BezierCurveRotorPockets.html#get-required-parameters-and-objects",
        "title": "Bezier curve rotor pockets > Get required parameters and objects",
        "section": "Get required parameters and objects",
        "text": "From Motor-CAD, get the adaptive parameters and their values.\nGet the standard template rotor region. This can be drawn for debugging if required.\nGet the adaptive parameters specified in Motor-CAD, and their values\nGet the Rotor Pocket regions\nGet the magnet regions\nFind the magnet edge that is shared with the first rotor pocket\nGet properties of the magnet edge that are to be used to define the new rotor pocket geometry\nGet required parameters and objects"
    },
    {
        "objectID": "examples/adaptive_library/BezierCurveRotorPockets",
        "href": "examples/adaptive_library/BezierCurveRotorPockets.html#create-the-adaptive-templates-geometry",
        "title": "Bezier curve rotor pockets > Create the Adaptive Templates geometry",
        "section": "Create the Adaptive Templates geometry",
        "text": "Remove all existing entities from the first rotor pocket\nDefine the x-y points that are to be used to draw the new rotor pocket. The points are defined\nrelative to a vertical magnet edge (parallel to the y axis).\nDefine nodes from points and create curve using bezier\nCreate set of points for drawing the calculated bezier curve\nAdd the points as Coordinate objects to a list\nCreate a list of entities from the curve points\nAdd the new entities that make up the curve to the first rotor pocket region\nCounts the number of arcs and lines\nTranslate (move) the rotor pocket region in the x-y plane to the magnet edge\nRotate the rotor pocket region to match the magnet edge\nAdd the magnet edge line to the rotor pocket region\nCheck that the rotor pocket region is joined up and set the region in Motor-CAD\nMirror the first rotor pocket region on the other half of the rotor. Define the mirror line from\nthe origin and use the Region.mirror() method to create a new region named mirroredRegion\nfrom the rotor pocket region.\nUse the Region.replace() method to replace the entities in the second rotor pocket with those\nfrom the new mirroredRegion. The properties of the second rotor pocket (such as name,\nmaterial, colour) are retained.\nCheck that the rotor pocket region is joined up and set the region in Motor-CAD\nCreate the Adaptive Templates geometry\nCoordinate\nRegion.mirror()\nmirroredRegion\nRegion.replace()\nmirroredRegion"
    },
    {
        "objectID": "examples/adaptive_library/BezierCurveRotorPockets",
        "href": "examples/adaptive_library/BezierCurveRotorPockets.html#load-in-adaptive-templates-script-if-required",
        "title": "Bezier curve rotor pockets > Load in Adaptive Templates script if required",
        "section": "Load in Adaptive Templates script if required",
        "text": "When this script is run externally, the script executes the following:\nSet Geometry type to Adaptive.\nLoad the script into the Adaptive Templates tab.\nGo to the Geometry -> Radial tab to run the Adaptive Templates script and display the new\ngeometry.\nWhen running in a Jupyter Notebook, you must provide the path for the Adaptive Templates script\n(PY file) instead of sys.argv[0] when using the load_adaptive_script() method.\nTotal running time of the script: (0 minutes 31.657 seconds)\nDownload Jupyter notebook: BezierCurveRotorPockets.ipynb\nDownload Python source code: BezierCurveRotorPockets.py\nDownload zipped: BezierCurveRotorPockets.zip\nGallery generated by Sphinx-Gallery\nLoad in Adaptive Templates script if required\nsys.argv[0]\nload_adaptive_script()\nDownload Jupyter notebook: BezierCurveRotorPockets.ipynb\nDownload Python source code: BezierCurveRotorPockets.py\nDownload zipped: BezierCurveRotorPockets.zip"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_boundary_rt",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_boundary_rt.html#add_arc_boundary_rt",
        "title": "add_arc_boundary_rt",
        "section": "add_arc_boundary_rt",
        "text": "Add a boundary condition arc using r, t coordinates for the center.\nDeprecated since version 0.6.0: add_arc_boundary_rt will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\nadd_arc_boundary_rt"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_boundary_rt",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_boundary_rt.html#ansys.motorcad.core.motorcad_methods.MotorCAD.add_arc_boundary_rt",
        "title": "add_arc_boundary_rt > add_arc_boundary_rt > add_arc_boundary_rt",
        "section": "add_arc_boundary_rt > add_arc_boundary_rt",
        "text": "MotorCAD.add_arc_boundary_rt(direction, rc, tc, th1, th2, r, dir_code, sym_code, virt_code, init_code)\n\nAdd a boundary condition arc using r, t coordinates for the center.\n\nDeprecated since version 0.6.0: add_arc_boundary_rt will be removed with Motor-CAD 2025R2 (tentative).\nFunctionality replaced by adaptive templates.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_fea_path_line",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_fea_path_line.html#set_fea_path_line",
        "title": "set_fea_path_line",
        "section": "set_fea_path_line",
        "text": "Add or edit a line in the path editor.\nset_fea_path_line"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_fea_path_line",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.set_fea_path_line.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_fea_path_line",
        "title": "set_fea_path_line > set_fea_path_line > set_fea_path_line",
        "section": "set_fea_path_line > set_fea_path_line",
        "text": "MotorCAD.set_fea_path_line(path_name, path_location, coord_system, ror_x_start, tor_y_start, ror_x_end, tor_y_end, points, calculation, expression)\n\nAdd or edit a line in the path editor.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetIMIronLoss",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetIMIronLoss.html#getimironloss",
        "title": "GetIMIronLoss",
        "section": "GetIMIronLoss",
        "text": "Deprecated function.\nGetIMIronLoss"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetIMIronLoss",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetIMIronLoss.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.GetIMIronLoss",
        "title": "GetIMIronLoss > GetIMIronLoss > GetIMIronLoss",
        "section": "GetIMIronLoss > GetIMIronLoss",
        "text": "MotorCADCompatibility.GetIMIronLoss(*args)\n\nDeprecated function.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.set_visible",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.set_visible.html#set_visible",
        "title": "set_visible",
        "section": "set_visible",
        "text": "Set the visibility of the Motor-CAD UI.\nWhether to show the Motor-CAD UI. When True,\nthe UI is shown. When False, the UI is hidden.\nset_visible\nTrue\nFalse"
    },
    {
        "objectID": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.set_visible",
        "href": "methods/_autosummary_UI/ansys.motorcad.core.motorcad_methods.MotorCAD.set_visible.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_visible",
        "title": "set_visible > set_visible > set_visible",
        "section": "set_visible > set_visible",
        "text": "MotorCAD.set_visible(visible)\n\nSet the visibility of the Motor-CAD UI.\n\nParameters\n\nvisible\n\nbool\n\nWhether to show the Motor-CAD UI. When True,\nthe UI is shown. When False, the UI is hidden.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.reverse",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.reverse.html#reverse",
        "title": "reverse",
        "section": "reverse",
        "text": "Reverse Arc entity.\nreverse"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.reverse",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Arc.reverse.html#ansys.motorcad.core.geometry.Arc.reverse",
        "title": "reverse > reverse > reverse",
        "section": "reverse > reverse",
        "text": "Arc.reverse()\n\nReverse Arc entity.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_duty_cycle",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_duty_cycle.html#clear_duty_cycle",
        "title": "clear_duty_cycle",
        "section": "clear_duty_cycle",
        "text": "Clear the duty cycle in both the lab and thermal contexts.\nclear_duty_cycle"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_duty_cycle",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.clear_duty_cycle.html#ansys.motorcad.core.motorcad_methods.MotorCAD.clear_duty_cycle",
        "title": "clear_duty_cycle > clear_duty_cycle > clear_duty_cycle",
        "section": "clear_duty_cycle > clear_duty_cycle",
        "text": "MotorCAD.clear_duty_cycle()\n\nClear the duty cycle in both the lab and thermal contexts.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.set_array_variable",
        "href": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.set_array_variable.html#set_array_variable",
        "title": "set_array_variable",
        "section": "set_array_variable",
        "text": "Set a Motor-CAD array variable.\nName of the array.\nIndex in the array.\nValue to set the variable to.\nset_array_variable\npython:str\npython:int"
    },
    {
        "objectID": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.set_array_variable",
        "href": "methods/_autosummary_Variables/ansys.motorcad.core.motorcad_methods.MotorCAD.set_array_variable.html#ansys.motorcad.core.motorcad_methods.MotorCAD.set_array_variable",
        "title": "set_array_variable > set_array_variable > set_array_variable",
        "section": "set_array_variable > set_array_variable",
        "text": "MotorCAD.set_array_variable(array_name, array_index, variable_value)\n\nSet a Motor-CAD array variable.\n\nParameters\n\narray_name\n\npython:str\n\nName of the array.\n\narray_index\n\npython:int\n\nIndex in the array.\n\nvariable_value\n\nint|float|str|bool\n\nValue to set the variable to.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_power_graph_point",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_power_graph_point.html#get_power_graph_point",
        "title": "get_power_graph_point",
        "section": "get_power_graph_point",
        "text": "Get a point from a Motor-CAD power graph.\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\nPoint number to get x and y coordinate values from.\nValue of the x coordinate from the graph.\nValue of the y coordinate from the graph.\nget_power_graph_point\npython:str\npython:int\npython:int\npython:float\npython:float"
    },
    {
        "objectID": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_power_graph_point",
        "href": "methods/_autosummary_Graphs/ansys.motorcad.core.motorcad_methods.MotorCAD.get_power_graph_point.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_power_graph_point",
        "title": "get_power_graph_point > get_power_graph_point > get_power_graph_point",
        "section": "get_power_graph_point > get_power_graph_point",
        "text": "MotorCAD.get_power_graph_point(graph_name, point_number)\n\nGet a point from a Motor-CAD power graph.\n\nParameters\n\ngraph_name\n\npython:str, python:int\n\nName (preferred) or ID of the graph. In Motor-CAD, you can\nselect Help -> Graph Viewer to see the graph name.\n\npoint_number\n\npython:int\n\nPoint number to get x and y coordinate values from.\n\nReturns\n\nxValue\n\npython:float\n\nValue of the x coordinate from the graph.\n\nyValue\n\npython:float\n\nValue of the y coordinate from the graph.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autogen_Internal Scripting",
        "href": "methods/_autogen_Internal Scripting.html#internal-scripting",
        "title": "Internal Scripting",
        "section": "Internal Scripting",
        "text": "load_script(script_file)\nLoad a script file into Motor-CAD's internal scripting.\nrun_script()\nRun the script file in Motor-CAD's internal scripting.\nsave_script(file_path)\nSave the internal Python script to a Python file.\nInternal Scripting\nload_script\nrun_script\nsave_script"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_im_saturation_model",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_im_saturation_model.html#calculate_im_saturation_model",
        "title": "calculate_im_saturation_model",
        "section": "calculate_im_saturation_model",
        "text": "Calculate saturation lookup tables for IM machines.\ncalculate_im_saturation_model"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_im_saturation_model",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_im_saturation_model.html#ansys.motorcad.core.motorcad_methods.MotorCAD.calculate_im_saturation_model",
        "title": "calculate_im_saturation_model > calculate_im_saturation_model > calculate_im_saturation_model",
        "section": "calculate_im_saturation_model > calculate_im_saturation_model",
        "text": "MotorCAD.calculate_im_saturation_model()\n\nCalculate saturation lookup tables for IM machines.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.remove_external_component",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.remove_external_component.html#remove_external_component",
        "title": "remove_external_component",
        "section": "remove_external_component",
        "text": "Remove an external circuit component.\nType of the external circuit components. Options are \"Resistance\",\n\"Power Source\", and \"Power Injection\").\nNumber of the thermal node.\nremove_external_component\n\"Resistance\"\n\"Power Source\"\n\"Power Injection\""
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.remove_external_component",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.remove_external_component.html#ansys.motorcad.core.motorcad_methods.MotorCAD.remove_external_component",
        "title": "remove_external_component > remove_external_component > remove_external_component",
        "section": "remove_external_component > remove_external_component",
        "text": "MotorCAD.remove_external_component(component_type, name, node1)\n\nRemove an external circuit component.\n\nParameters\n\ncomponent_type: str\n\nType of the external circuit components. Options are \"Resistance\",\n\"Power Source\", and \"Power Injection\").\n\nname: str\n\n\n\nnode1: int\n\nNumber of the thermal node.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.sort",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.sort.html#sort",
        "title": "sort",
        "section": "sort",
        "text": "Sort the list in ascending order and return None.\nThe sort is in-place (i.e. the list itself is modified) and stable (i.e. the\norder of two equal elements is maintained).\nIf a key function is given, apply it once to each list item and sort them,\nascending or descending, according to their function values.\nThe reverse flag can be set to sort in descending order.\nsort"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.sort",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.EntityList.sort.html#ansys.motorcad.core.geometry.EntityList.sort",
        "title": "sort > sort > sort",
        "section": "sort > sort",
        "text": "EntityList.sort(*, key=None, reverse=False)\n\nSort the list in ascending order and return None.\n\nThe sort is in-place (i.e. the list itself is modified) and stable (i.e. the\norder of two equal elements is maintained).\n\nIf a key function is given, apply it once to each list item and sort them,\nascending or descending, according to their function values.\n\nThe reverse flag can be set to sort in descending order.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.get_messages",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.get_messages.html#get_messages",
        "title": "get_messages",
        "section": "get_messages",
        "text": "Get a list of the last N messages from the message history.\nNumber of last messages to get. If is parameter is set to\n0, all messages in the history are returned.\nList of messages.\nget_messages\npython:int\n0\nList"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.get_messages",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.get_messages.html#ansys.motorcad.core.motorcad_methods.MotorCAD.get_messages",
        "title": "get_messages > get_messages > get_messages",
        "section": "get_messages > get_messages",
        "text": "MotorCAD.get_messages(num_messages)\n\nGet a list of the last N messages from the message history.\n\nParameters\n\nnum_messages\n\npython:int\n\nNumber of last messages to get. If is parameter is set to\n0, all messages in the history are returned.\n\nReturns\n\nList\n\nList of messages.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.insert_entity",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.insert_entity.html#insert_entity",
        "title": "insert_entity",
        "section": "insert_entity",
        "text": "Insert entity to list of region entities at given index.\nIndex of which to insert at\nLine/arc entity class instance\ninsert_entity\npython:int\nLine\nArc"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.insert_entity",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Region.insert_entity.html#ansys.motorcad.core.geometry.Region.insert_entity",
        "title": "insert_entity > insert_entity > insert_entity",
        "section": "insert_entity > insert_entity",
        "text": "Region.insert_entity(index, entity)\n\nInsert entity to list of region entities at given index.\n\nParameters\n\nindex\n\npython:int\n\nIndex of which to insert at\n\nentity\n\nLine or Arc\n\nLine/arc entity class instance\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "examples/internal_scripting/emag",
        "href": "examples/internal_scripting/emag.html#e-magnetic",
        "title": "E-magnetic",
        "section": "E-magnetic",
        "text": "This example demonstrates internal scripting E-Mag functionality\nDisable pop-up messages\nE-magnetic"
    },
    {
        "objectID": "examples/internal_scripting/emag",
        "href": "examples/internal_scripting/emag.html#pymotorcad-documentation-example",
        "title": "E-magnetic > PyMotorCAD Documentation Example",
        "section": "PyMotorCAD Documentation Example",
        "text": "(Used for the PyMotorCAD Documentation Examples only)\nTotal running time of the script: (0 minutes 26.079 seconds)\nDownload Jupyter notebook: emag.ipynb\nDownload Python source code: emag.py\nDownload zipped: emag.zip\nGallery generated by Sphinx-Gallery\nPyMotorCAD Documentation Example\nDownload Jupyter notebook: emag.ipynb\nDownload Python source code: emag.py\nDownload zipped: emag.zip"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.create_winding_pattern",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.create_winding_pattern.html#create_winding_pattern",
        "title": "create_winding_pattern",
        "section": "create_winding_pattern",
        "text": "Create winding pattern.\nRefreshes the UI to recreate winding pattern. Will be replaced by direct API call soon.\ncreate_winding_pattern"
    },
    {
        "objectID": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.create_winding_pattern",
        "href": "methods/_autosummary_Calculations/ansys.motorcad.core.motorcad_methods.MotorCAD.create_winding_pattern.html#ansys.motorcad.core.motorcad_methods.MotorCAD.create_winding_pattern",
        "title": "create_winding_pattern > create_winding_pattern > create_winding_pattern",
        "section": "create_winding_pattern > create_winding_pattern",
        "text": "MotorCAD.create_winding_pattern()\n\nCreate winding pattern.\n\nRefreshes the UI to recreate winding pattern. Will be replaced by direct API call soon.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.load_external_circuit",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.load_external_circuit.html#load_external_circuit",
        "title": "load_external_circuit",
        "section": "load_external_circuit",
        "text": "Load an external circuit from a file.\nload_external_circuit"
    },
    {
        "objectID": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.load_external_circuit",
        "href": "methods/_autosummary_Thermal/ansys.motorcad.core.motorcad_methods.MotorCAD.load_external_circuit.html#ansys.motorcad.core.motorcad_methods.MotorCAD.load_external_circuit",
        "title": "load_external_circuit > load_external_circuit > load_external_circuit",
        "section": "load_external_circuit > load_external_circuit",
        "text": "MotorCAD.load_external_circuit(circuit_file_name)\n\nLoad an external circuit from a file.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.check_if_geometry_is_valid",
        "href": "methods/_autosummary_Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.check_if_geometry_is_valid.html#check_if_geometry_is_valid",
        "title": "check_if_geometry_is_valid",
        "section": "check_if_geometry_is_valid",
        "text": "Check if the Motor-CAD geometry is valid.\nIndicates if Motor-CAD can try to reset the geometry\nwithin constraints if the geometry is invalid. Options are:\n1: Yes. Try and reset the geometry\n0: No. Do not try to reset the geometry.\n1 if an attempt to reset the geometry has been made, O otherwise.\ncheck_if_geometry_is_valid\npython:int\n1\n0\npython:int\n1\nO"
    },
    {
        "objectID": "methods/_autosummary_Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.check_if_geometry_is_valid",
        "href": "methods/_autosummary_Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.check_if_geometry_is_valid.html#ansys.motorcad.core.motorcad_methods.MotorCAD.check_if_geometry_is_valid",
        "title": "check_if_geometry_is_valid > check_if_geometry_is_valid > check_if_geometry_is_valid",
        "section": "check_if_geometry_is_valid > check_if_geometry_is_valid",
        "text": "MotorCAD.check_if_geometry_is_valid(edit_geometry)\n\nCheck if the Motor-CAD geometry is valid.\n\nParameters\n\nedit_geometry\n\npython:int\n\nIndicates if Motor-CAD can try to reset the geometry\nwithin constraints if the geometry is invalid. Options are:\n\n1: Yes. Try and reset the geometry\n\n0: No. Do not try to reset the geometry.\n\nReturns\n\npython:int\n\n1 if an attempt to reset the geometry has been made, O otherwise.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.is_horizontal",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.is_horizontal.html#is_horizontal",
        "title": "is_horizontal",
        "section": "is_horizontal",
        "text": "Check whether line is horizontal.\nis_horizontal"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.is_horizontal",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.is_horizontal.html#ansys.motorcad.core.geometry.Line.is_horizontal",
        "title": "is_horizontal > is_horizontal > is_horizontal",
        "section": "is_horizontal > is_horizontal",
        "text": "property Line.is_horizontal\n\nCheck whether line is horizontal.\n\nReturns\n\nbool\n\n\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_custom_drive_cycle",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_custom_drive_cycle.html#load_custom_drive_cycle",
        "title": "load_custom_drive_cycle",
        "section": "load_custom_drive_cycle",
        "text": "Load a custom waveform from a file.\nFilepath for loading the file with the custom waveform.\nUse the r'filepath' syntax to force Python to ignore\nspecial characters.\nload_custom_drive_cycle\npython:str\nr'filepath'"
    },
    {
        "objectID": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_custom_drive_cycle",
        "href": "methods/_autosummary_General/ansys.motorcad.core.motorcad_methods.MotorCAD.load_custom_drive_cycle.html#ansys.motorcad.core.motorcad_methods.MotorCAD.load_custom_drive_cycle",
        "title": "load_custom_drive_cycle > load_custom_drive_cycle > load_custom_drive_cycle",
        "section": "load_custom_drive_cycle > load_custom_drive_cycle",
        "text": "MotorCAD.load_custom_drive_cycle(file_path)\n\nLoad a custom waveform from a file.\n\nParameters\n\nfile_path\n\npython:str\n\nFilepath for loading the file with the custom waveform.\nUse the r'filepath' syntax to force Python to ignore\nspecial characters.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportNVHResultsData",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportNVHResultsData.html#exportnvhresultsdata",
        "title": "ExportNVHResultsData",
        "section": "ExportNVHResultsData",
        "text": "Deprecated function. Replaced by MotorCAD.export_nvh_results_data().\nExportNVHResultsData\nMotorCAD.export_nvh_results_data()"
    },
    {
        "objectID": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportNVHResultsData",
        "href": "methods/_autosummary/ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportNVHResultsData.html#ansys.motorcad.core.motorcad_methods.MotorCADCompatibility.ExportNVHResultsData",
        "title": "ExportNVHResultsData > ExportNVHResultsData > ExportNVHResultsData",
        "section": "ExportNVHResultsData > ExportNVHResultsData",
        "text": "MotorCADCompatibility.ExportNVHResultsData(*args)\n\nDeprecated function. Replaced by MotorCAD.export_nvh_results_data().\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.unite_regions",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.unite_regions.html#unite_regions",
        "title": "unite_regions",
        "section": "unite_regions",
        "text": "Unite region with two or more other regions.\nMotor-CAD region object\nMotor-CAD region objects to united with region\nUnited Motor-CAD region object.\nunite_regions\nansys.motorcad.core.geometry.Region\npython:list\nof\nansys.motorcad.core.geometry.Region\nansys.motorcad.core.geometry.Region"
    },
    {
        "objectID": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.unite_regions",
        "href": "methods/_autosummary_Adaptive Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.unite_regions.html#ansys.motorcad.core.motorcad_methods.MotorCAD.unite_regions",
        "title": "unite_regions > unite_regions > unite_regions",
        "section": "unite_regions > unite_regions",
        "text": "MotorCAD.unite_regions(region, regions)\n\nUnite region with two or more other regions.\n\nParameters\n\nregion\n\nansys.motorcad.core.geometry.Region\n\nMotor-CAD region object\n\nregions\n\npython:list of ansys.motorcad.core.geometry.Region\n\nMotor-CAD region objects to united with region\n\nReturns\n\nansys.motorcad.core.geometry.Region\n\nUnited Motor-CAD region object.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "getting_started/running_motorcad",
        "href": "getting_started/running_motorcad.html#standard-installation",
        "title": "Standard installation",
        "section": "Standard installation",
        "text": "The PyAnsys ansys-motorcad-core package requires either a local or\nremote instance of Motor-CAD to communicate with it. This section covers\nlaunching and interfacing with Motor-CAD from a local instance by\nlaunching it from Python.\nStandard installation\nansys-motorcad-core"
    },
    {
        "objectID": "getting_started/running_motorcad",
        "href": "getting_started/running_motorcad.html#install-motor-cad",
        "title": "Standard installation > Install Motor-CAD",
        "section": "Install Motor-CAD",
        "text": "The Motor-CAD installer can be downloaded from the Ansys Customer Portal.\nA valid Motor-CAD licence is required to run the software.\nOnce the Windows setup file is downloaded, run this as administrator.\nIt may take up to around 5 minutes to prepare the installation wizard.\nThen follow the steps to proceed with installing Motor-CAD: read and accept the license agreement etc.\nThe installation may take several minutes to complete.\nInstall Motor-CAD"
    },
    {
        "objectID": "getting_started/running_motorcad",
        "href": "getting_started/running_motorcad.html#launch-motor-cad",
        "title": "Standard installation > Launch Motor-CAD",
        "section": "Launch Motor-CAD",
        "text": "Launch Motor-CAD"
    },
    {
        "objectID": "getting_started/running_motorcad",
        "href": "getting_started/running_motorcad.html#launch-motor-cad-locally",
        "title": "Standard installation > Launch Motor-CAD locally",
        "section": "Launch Motor-CAD locally",
        "text": "You can use the MotorCAD method to have Python start a new instance of Motor-CAD and\nautomatically connect to it:\nThis is the easiest and fastest way to get PyMotorCAD up and running.\nBut you need to have an Ansys license server installed locally.\nLaunch Motor-CAD locally\nMotorCAD"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.reverse",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.reverse.html#reverse",
        "title": "reverse",
        "section": "reverse",
        "text": "Reverse Entity class.\nreverse"
    },
    {
        "objectID": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.reverse",
        "href": "methods/_autosummary_geometry_methods/ansys.motorcad.core.geometry.Line.reverse.html#ansys.motorcad.core.geometry.Line.reverse",
        "title": "reverse > reverse > reverse",
        "section": "reverse > reverse",
        "text": "Line.reverse()\n\nReverse Entity class.\n\n!! processed by numpydoc !!"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.do_slot_finite_element",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.do_slot_finite_element.html#do_slot_finite_element",
        "title": "do_slot_finite_element",
        "section": "do_slot_finite_element",
        "text": "Run slot FEA.\ndo_slot_finite_element"
    },
    {
        "objectID": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.do_slot_finite_element",
        "href": "methods/_autosummary_FEA Geometry/ansys.motorcad.core.motorcad_methods.MotorCAD.do_slot_finite_element.html#ansys.motorcad.core.motorcad_methods.MotorCAD.do_slot_finite_element",
        "title": "do_slot_finite_element > do_slot_finite_element > do_slot_finite_element",
        "section": "do_slot_finite_element > do_slot_finite_element",
        "text": "MotorCAD.do_slot_finite_element()\n\nRun slot FEA.\n\n!! processed by numpydoc !!"
    }
]